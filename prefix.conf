%if "#{&&:#{escape_key},#{assist_key}}"

%else
	%if '[ -s "$DOT_CONFIG/terminal/tmux/header.conf" ]'
		source "$DOT_CONFIG/terminal/tmux/header.conf"
	%endif
%endif

#   There are three modes for prefix/normal
#   1   one_stage_policy #   Overlay mode is not considered
#   1.1 one_key_prefix mode                 (via prefix_root)
#   1.2 C-W delegations                     (via prefix_root)
#   2.  Navigateion and resize key bindings (via prefix_root)
#   3   one_key_copy   mode                 (via normal_enter)

#   Purpose: Hanle the definition of key bindings and switch them easily
#   Stage one: Define the function/operations on a specific mode
#   Stage two: Define the binding right-hand-side (rhs) general names and composite them
#   Stage three: Trigger a binding right-hand-side general name based on a specific scenario
#

%if "#{==:#{normal_key},#{prefix_key}}"
	display -p "Invalid \$prefixx_key: $prefixx_key and \$normal_key: $normal_key"
	confirm-before -p "kill-session #{session_id} ? (y/n)" kill-session
#   detach
#   kill-session
%endif

#   MARK "overwritten 00"
%if   "#{==:#{prefix_key},Escape}" #   #AA0000
#   This line could be literal empty, just another newline at least (a place holder)
%elif "#{==:#{normal_key},Escape}" #   #00AAAA

%endif

	%hidden mode_monitor="on"

#   Do it in editor
	%hidden vim_restore="
	if-shell -F '#{pane_in_mode}' {
	#   run 'echo \">>>>vim_restore in mode\" >> $HOME/.vim.log'
		if-shell -F '#{mode_monitor}' {
			mode_monitor_original='on'
		} {
			mode_monitor=
			setenv -ghu mode_monitor
		}
	#   send-keys -X cancel
		if-shell -F '#{@is-insert}' {
			send-keys -X C-c #   Escape
		}
	#   if-shell -F '#{client_prefix}' {
	#       send-keys Escape #   Cancel the pending C-W
	#   }
		#   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE S'
	#   send-keys -X ESCAPE 'SPACE S'
		send-keys -X M-C
	#   copy-mode
		if-shell -F '#{mode_monitor_original}' {
			mode_monitor='on'
			setenv -gh  mode_monitor 'on'
		}
	} {
		if-shell -F '#{@is-insert}' {
			send-keys C-c #   Escape #   Will be blocked by switch-client
		}
	#   if-shell -F '#{client_prefix}' {
	#       send-keys Escape #   Cancel the pending C-W
	#   }
	#   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE S'
	#   send-keys ESCAPE 'SPACE S' #   Will be blocked by switch-client
		send-keys M-C #   Will be blocked by switch-client
	}
	if-shell -F '#{@is-insert}' {
		send-keys C-c #   Escape
	}
	"
#   Do it in editor
	%hidden vim_reverse="
	if-shell -F '#{pane_in_mode}' {
	#   run 'echo \"<<<<vim_reverse in mode\" >> $HOME/.vim.log'
		if-shell -F '#{mode_monitor}' {
			mode_monitor_original='on'
		} {
			mode_monitor=
			setenv -ghu mode_monitor
		}
	#   send-keys -X cancel
		if-shell -F '#{@is-insert}' {
			send-keys -X C-c #   Escape
		}
		#   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE V'
	#   send-keys -X ESCAPE 'SPACE V'
		send-keys -X M-V
	#   copy-mode
		if '#{mode_monitor_original}' {
			mode_monitor='on'
			setenv -gh  mode_monitor 'on'
		}
	} {
		if-shell -F '#{@is-insert}' {
			send-keys C-c #   Escape #   Will be blocked by switch-client
		}
	#   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE V'
	#   send-keys ESCAPE 'SPACE V' #   Will be blocked by switch-client
		send-keys M-V #   Will be blocked by switch-client
	}
	if-shell -F '#{@is-insert}' {
		send-keys C-c #   Escape
	}
	"

	%hidden color_prefix="
#   run 'echo \"color_prefix\" >> $HOME/.vim.log'
		if-shell -F '#{@is-vim}' {
		#   if-shell -F '#{==:#{default_background},#{current_background}}' {
			#   Prefix and copy modes sending the same key twice will prevent the vim pane from entering copy-mode
			#   send-keys -t '$TMUX_PANE' ESCAPE 'C-SPACE V' #   No ENTER appended
			#   Version 2
				$vim_reverse #   Do it in editor
		#   } {
		#   #   Version 1
		#   #   send-keys ESCAPE 'SPACE V'
		#   #   Version 0
		#   #   select-pane -P 'bg=#{prefix_background}' #   If vim bg is NONE  #   got dynamic value
		#   #   Version 2
		#   #   $vim_restore
		#   }
		#   select-pane -P bg=terminal
		} {
			if-shell -F '#{==:#{default_background},dark}' { #   if-shell -F '#{==:#{default_background},#{current_background}}' {
			#   select-pane -P 'fg=colour051,bg=#{prefix_background}'  #   got dynamic value
				set -p window-style 'fg=default,bg=terminal'
			#   select-pane -P 'fg=default,bg=terminal' #   got dynamic value
				set -p window-active-style 'fg=default,bg=#{prefix_background}'
			} {

			#   select-pane -P 'fg=colour051,bg=#{prefix_bg_on_light}' #   got dynamic value
				set -p window-style 'fg=default,bg=terminal'
			#   select-pane -P 'fg=default,bg=terminal' #   got dynamic value
				set -p window-active-style 'fg=default,bg=#{prefix_bg_on_light}'
			}
		}
	"

%if "#{alias_index_12}"
	display -p "Occupied \$alias_index_12: $alias_index_12"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_12=12
	%if "#{color_prefix}"
		set -s  command-alias[$alias_index_12] color_prefix="$color_prefix"
	%else
		display -p "\$color_prefix not defined: $color_prefix"
		confirm-before -p "alias_index_12, \$color_prefix not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_12
%endif

	%hidden color_normal="
#   run 'echo \"color_normal\" >> $HOME/.vim.log'
		if-shell -F '#{@is-vim}' {
		#   if-shell -F '#{==:#{default_background},#{current_background}}' {
			#   Prefix and copy modes sending the same key twice will prevent the vim pane from entering copy-mode
			#   Version 2
				$vim_reverse #   Do it in editor
		#   } {
		#   #   Version 1
		#   #   send-keys ESCAPE 'SPACE V'
		#   #   Version 0
		#   #   select-pane -P 'bg=#{normal_background}' #   If vim bg is NONE  #   got dynamic value
		#   #   Version 2
		#   #   $vim_restore
		#   }
		}
	#   if-shell -F '#{==:#{current_background},dark}' { #   if-shell -F '#{==:#{default_background},#{current_background}}' {
	#       set-window-option -g mode-style 'fg=default,bg=#{normal_bg_on_light}'
	#   #   set-window-option -g mode-style 'fg=default,bg=default,reverse'
	#   #   set -p window-active-style 'fg=default,bg=#{normal_bg_on_light}'
	#       select-pane -P 'fg=default,bg=#{normal_bg_on_light}' #   got dynamic value
	#   } {
	#       set-window-option -g mode-style 'fg=default,bg=#{normal_background}'
	#   #   set-window-option -g mode-style 'fg=default,bg=default,reverse'
	#   #   set -p window-active-style 'fg=default,bg=#{normal_background}'
	#       select-pane -P 'fg=default,bg=#{normal_background}'  #   got dynamic value
	#   }
	#   select-pane -P 'fg=default,bg=terminal'
		set -p window-style 'fg=default,bg=terminal'
		set -p window-active-style 'fg=default,bg=terminal'
	"

%if "#{alias_index_13}"
	display -p "Occupied \$alias_index_13: $alias_index_13"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_13=13
	%if "#{color_normal}"
		set -s  command-alias[$alias_index_13] color_normal="$color_normal"
	%else
		display -p "\$color_normal not defined: $color_normal"
		confirm-before -p "alias_index_13, \$color_normal not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_13
%endif

	%hidden color_terminal="
#   run 'echo \"color_terminal\" >> $HOME/.vim.log'
		if-shell -F '#{@is-vim}' {
			#   if-shell -F '#{default_background}' {
			#   if-shell -F '#{==:#{default_background},#{current_background}}' {} {
		#   if-shell -F '#{==:#{default_background},#{current_background}}' {
		#       #   Version 1
		#       #   send-keys ESCAPE 'SPACE S'
		#       #   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE V'
		#       #   Version 0
		#       #   select-pane -P bg=terminal #   If vim bg is NONE
		#   #   Version 2
				$vim_restore #   Do it in editor
		#   #   $vim_reverse
		#   #   }
		#   } {
		#   #   if-shell -F '#{==:#{default_background},#{current_background}}' {
		#       #   Version 1
		#       #   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE V'
		#       #   send-keys ESCAPE 'SPACE V'
		#       #   Version 0
		#       #   select-pane -P bg=terminal
		#   #   Version 2
		#   #   $vim_restore
		#       $vim_reverse
		#   #   }
		#   }
		#   if-shell -F '#{==:#{default_background},#{current_background}}' {
		#       select-pane -P 'fg=colour051,bg=#{prefix_bg_on_light}' #   got dynamic value
		#   #   select-pane -P 'fg=default,bg=terminal' #   got dynamic value
		#   #   set -p window-active-style 'fg=default,bg=#{prefix_bg_on_light}'
		#   } {
		#       select-pane -P 'fg=colour051,bg=#{prefix_background}'  #   got dynamic value
		#   #   select-pane -P 'fg=default,bg=terminal' #   got dynamic value
		#   #   set -p window-active-style 'fg=default,bg=#{prefix_background}'
		#   }
		} {
		#   select-pane -P bg=terminal
			set -p window-style 'fg=default,bg=terminal'
			set -p window-active-style 'fg=default,bg=terminal'
		}
	"

%if "#{alias_index_14}"
	display -p "Occupied \$alias_index_14: $alias_index_14"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_14=14
	%if "#{color_terminal}"
		set -s  command-alias[$alias_index_14] color_terminal="$color_terminal"
	%else
		display -p "\$color_terminal not defined: $color_terminal"
		confirm-before -p "alias_index_14, \$color_terminal not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_14
%endif

#   The reason why vim-tmux-navigator is popular, is it found the correct model ?
#   But it broke all the prefix's design
#   We do need less keystroke, but we need concept simple more than key strokes
#   Test double quotes
	setenv -ghu prefix_prefix

	setenv -ghu prefix_quit
	%hidden prefix_quit="
	run 'echo \"prefix_quit\" >> $HOME/.vim.log'
	set -p '@mode-pre' '#{@mode-cur}'
	set -p '@mode-cur' 'root'
	#   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \;
	#   $unbind_assist_on_prefix
	if-shell -F '#{@is-vim}' {
		if-shell -F '#{@is-insert}' {
			send-keys C-c #   Escape
		}
	#     bind -T root '$assist_key' normal_enter
		  bind -T root '$assist_key' assist_on_root
	#     bind -T root '$assist_key' send-keys ESCAPE SPACE N
	#     run -b '\tmux bind -T root '$assist_key' assist_on_root'
	} {
		unbind -T root '$assist_key'
	#   bind -T root   '$escape_key' prefix_root
	}
	#   bind -T root '$escape_key' escape_on_root #   Left hand side hard coded prefix to Escape
	#   The folowing line can not contains comments even you quote the right hand side
	#   run -C 'bind_prefix_on_root'                #   $prefix_root is not defined at this moment
		run -C bind_prefix_on_root
	#   bind -T prefix '$prefix_key' if-shell true {   # won't work
	#   send-keys -X cancel

	#   %if "#{!=:#{normal_key},#{prefix_key}}"

	#   %if    '#{delegate_wincmd}'

	#   %else  #   "#{delegate_wincmd}"
	#       if-shell -F '#{@is-vim}' ' send-keys C-W ' ' switch-client -T root '

	#   %endif #   "#{delegate_wincmd}"

	#   unbind -T prefix "$prefix_key"
	#   bind -n '$prefix_key' \"$prefix_root\" #   self maintenance
	#
	#   if-shell -F '#{==:@mode-pre,normal}' {
	#   if-shell -F '#{||:#{==:#{client_key_table},#{copy-mode-vi}},#{==:#{client_key_table},#{copy-mode}}}' {
	#   } {
				switch-client -T root
				$color_terminal
			#   run '\tmux color_terminal'
			#   $color_toggle
	#   }
	#
	#   %if   '#{==:#{prefix_key},Escape}'

	#       %if    '#{one_stage_policy}'
	#           if-shell -F '#{pane_in_mode}' {
	#               if-shell -F '#{selection_present}' 'send-keys -X clear-selection' {
	#                   send-keys -X cancel
	#                   $color_terminal
	#                   if-shell -F '#{@is-vim}' {
	#                       send-keys C-c #   Escape
	#                   }
	#               }
	#           }

	#       %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode

	#           if-shell -F '#{pane_in_mode}' { #   does not work in the copy-mode bind block
	#           #   if-shell   -F "#{selection_present}" "send-keys -X clear-selection" "send-keys -X cancel"
	#           #   send-keys -X cancel
	#           } {
	#               copy-mode
	#           }
	#           $color_normal #   Let mode-changed hook handle it ?

	#       %endif #   "#{one_stage_policy}"

	#   %elif '#{==:#{normal_key},Escape}'

	#       if-shell -F '#{pane_in_mode}' {
	#           $color_normal #   Let mode-changed hook handle it ?
	#       }

	#   %endif #   '#{==:#{normal_key},Escape}'

	#   if-shell -F "#{pane_in_mode}" {
	#       $color_normal #   Let mode-changed hook handle it ?
	#   } {
	#       $color_terminal
	#   }

	#   %else  #   "#{!=:#{normal_key},#{prefix_key}}"

	#   %endif #   "#{!=:#{normal_key},#{prefix_key}}"

		#   if-shell -F "#{@is-vim}" {
		#   #   send-keys C-c
		#   #   Won't be a recursively calling -- can contain an odd number of single quotes
		#   #   send-keys $prefix_key # will not be a recursively calling -- can not contain an odd number of single quotes
		#       if-shell -F "#{@is-cmd}" {
		#           set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
		#       }
		#       if-shell -F "#{@is-float}" {
		#           set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
		#       }
		#   }
	if-shell -F '#{delegate_wincmd}' {} {
		if-shell -F '#{@is-vim}' {
			if-shell -F '#{vim_in_charge_of_keystrokes}' {} {
			#   #   Does not work, because the loss of atomicity of C-W
			#   send-keys C-W #   Control sequences are not case sensitive
			#   if-shell -F '#{client_prefix}' {
				send-keys Escape #   Cancel the pending C-W
			#   }
				send-keys M-C
			}
		}
	}
	"
%if    '#{delegate_wincmd}'

%else  #   "#{delegate_wincmd}"

	#   %hidden prefix_quit="
	#           if-shell -F '#{@is-vim}' ' send-keys C-W ' ' switch-client -T root '
	#           $prefix_quit
	#       "
%endif #   "#{delegate_wincmd}"

%if    '#{==:#{prefix_key},Escape}'

	%if    '#{one_stage_policy}'

		%hidden prefix_prefix="
			if-shell -F '#{pane_in_mode}' {
				if-shell -F '#{selection_present}' {
					send-keys -X clear-selection
				} {
					send-keys -X cancel
					$color_terminal
				#   run '\tmux color_terminal'
					if-shell -F '#{@is-vim}' {
						if-shell -F '#{@is-insert}' {
							send-keys C-c #   Escape
						}
					}
				}
			}
			$prefix_quit
		"
	%else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode

		%hidden prefix_prefix="
			if-shell -F '#{pane_in_mode}' { #   does not work in the copy-mode bind block
			#   if-shell   -F "#{selection_present}" "send-keys -X clear-selection" "send-keys -X cancel"
			#   send-keys -X cancel
			} {
				copy-mode
			}
		#   $color_normal #   Let mode-changed hook handle it ?
			$prefix_quit
		"

	%endif #   "#{one_stage_policy}"

%elif  '#{==:#{normal_key},Escape}'

	%hidden prefix_prefix="
		$prefix_quit
	#   if-shell -F '#{pane_in_mode}' {
		#   $color_normal #   Let mode-changed hook handle it ?
	#   }
	"
%endif

#       %hidden prefix_prefix="
#       switch-client -T root
#       $color_terminal
#       if-shell -F '#{pane_in_mode}' {
#           $color_normal #   Let mode-changed hook handle it ?
#       }
#       "
#   setenv -gh  prefix_prefix " \
#       switch-client -T root \
#       $color_terminal \
#       if-shell -F '#{pane_in_mode}' { \
#           $color_normal \
#       } \
#   "
	setenv -gh  prefix_prefix "$prefix_prefix"


	#       %hidden prefix_root='
	#       #   You don't need these because vim could disable $normal_key by itself when in insert-mode
	#       #   if-shell -F "#{@is-vim}" {
	#       #   #   copy-mode
	#       #       send-keys $prefix_key
	#       #       if-shell -F "#{@is-cmd}" {
	#       #           copy-mode
	#       #           $color_normal #   Let mode-changed hook handle it ?
	#       #           set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#       #       } {
	#       #           if-shell -F "#{@is-float}" {
	#       #           #   send-keys $normal_key
	#       #           #   send-keys C-c
	#       #               # } {
	#       #               copy-mode
	#       #               $color_normal #   Let mode-changed hook handle it ?
	#       #               set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#       #           } {
	#       #               switch-client -T prefix
	#       #               $color_prefix #   Let mode-changed hook handle it ?
	#       #               setenv -gh active_pane "$TMUX_PANE" # got ''?
	#       #               set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#       #               set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#       #           }
	#       #       }
	#       #       set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#       #       set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#       #   } {
	#
	#       #   %if "#{!=:#{normal_key},#{prefix_key}}"
	#
	#       %if   "#{==:#{prefix_key},Escape}" #   #AA0000
	#           if-shell -F "#{pane_in_mode}" { #   does not work in the copy-mode bind block
	#           } {
	#           #   if-shell -F "#{@is-vim}" {
	#           #   send-keys $normal_key
	#           #   } {
	#           #   copy-mode #   with this design, you can not enter C-W to vim
	#           #   }
	#           #   Don't enter copy-mode here, because the copy-mode will lose window switch functions of vim
	#               copy-mode   # but we do need copy mode -- one-key copy-mode is important to preserve the scense
	#               $color_normal #   Let mode-changed hook handle it ?
	#           }
	#       %elif "#{==:#{normal_key},Escape}" #   #00AAAA
	#
	#       %endif #   "#{==:#{normal_key},Escape}"
	#
	#   #   %if    '#{one_stage_policy}'
	#
	#   #   %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode
	#       #   self maintenance
	#           bind -T prefix "$prefix_key" $prefix_prefix #   vim is sensitive to this if $prefix_key is a alphabet
	#           switch-client -T prefix #   copy-prefix-overlay/override/superposition-mode
	#           $color_prefix #   Let mode-changed hook handle it ?
	#   #   %endif #   "#{one_stage_policy}"
	#
	#       #   %else  #   "#{!=:#{normal_key},#{prefix_key}}"
	#
	#       #   %endif #   "#{!=:#{normal_key},#{prefix_key}}"
	#
	#           #   display-panes -N
	#
	#
	#
	#           #   $color_terminal #   Let mode-changed hook handle it ?
	#           #   send-keys ESCAPE 'pwd' Enter
	#           #   if-shell -F "\#{pane_id}" {
	#           #       setenv -gh active_pane "\#{pane_id}"
	#           setenv -gh active_pane "$TMUX_PANE" # got ''?
	#           #   #   select-pane -m
	#           #   }
	#           #   display-panes
	#           #   Shell can not write tmux buffer correctly -- you need send "command" ENTER
	#           #   run -b "export TTY=$(tty) && . '$DOT_CONFIG/terminal/tmux/default-command'"
	#       #   }
	#       '

	setenv -ghu prefix_root
	setenv -ghu prefix_enter

#   %hidden prefix_enter="
#   #   bind -T prefix '$prefix_key' \"$prefix_prefix\"
#       switch-client -T prefix
#       $color_prefix
#       "

	%hidden prefix_enter="
	run 'echo \"prefix_enter\" >> $HOME/.vim.log'
	set -p '@mode-pre' '#{@mode-cur}'
	set -p '@mode_cur' 'prefix'
	#   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \;
	if-shell -F '#{pane_in_mode}' {
		send-keys -X cancel
	}
	#   $color_terminal
	#   $bind_assist_on_prefix
	#   Does not work
	#   bind -T prefix '$assist_key' run -C '$normal_enter'
	#   bind -T prefix '$assist_key' 'if true { copy-mode ; $color_normal }'
	#   bind -T prefix '$assist_key' 'if true { tmux \$normal_enter }'
	#
	#   Partially working
	#   bind -T prefix '$assist_key' run '
	#   tmux display -p \"#{normal_enter}\"
	#   #   tmux showenv -gh \"normal_enter\"
	#   '

	#   Does not work
	#   bind -T prefix '$assist_key' '
	#   if true { $normal_enter }
	#   '
	#
	#   Works
	if-shell -F '#{@is-vim}' {
		if-shell -F '#{@is-insert}' {
			send-keys C-c #   Escape
		}
	#   send-keys C-c #   Escape #   Resolve tmux 'jump to backward' error
	#   bind -T root '$assist_key' normal_enter
		  bind -T root '$assist_key' assist_on_root
	#     bind -T root '$assist_key' send-keys ESCAPE SPACE N
	#   bind -T prefix '$assist_key' assist_on_prefix
	#   Works
	#   run '\tmux bind -T root \"$assist_key\" \"$(\tmux display -p \"#{assist_on_root}\")\"'
	#   if true { bind -T root "$assist_key" assist_on_root }
	#   run '\tmux bind -T prefix "$assist_key" assist_on_prefix' #   Recursive call
	#   run '\tmux bind -T root "$assist_key" assist_on_root' #   Recursive call
	#     bind -T root '$assist_key' $assist_on_root
	#   send-keys C-W
	}
	#   bind -T prefix '$escape_key' prefix_prefix
		bind -T prefix '$escape_key' escape_on_prefix
	#   bind -T prefix '$assist_key' normal_enter
		bind -T prefix '$assist_key' assist_on_prefix

	#   You don't need these because vim could disable $normal_key by itself when in insert-mode
	#   if-shell -F "#{@is-vim}" {
	#   #   copy-mode
	#       send-keys $prefix_key
	#       if-shell -F "#{@is-cmd}" {
	#           copy-mode
	#           $color_normal #   Let mode-changed hook handle it ?
	#           set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#       } {
	#           if-shell -F "#{@is-float}" {
	#           #   send-keys $normal_key
	#           #   send-keys C-c
	#               # } {
	#               copy-mode
	#               $color_normal #   Let mode-changed hook handle it ?
	#               set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#           } {
	#               switch-client -T prefix
	#               $color_prefix
	#               setenv -gh active_pane "$TMUX_PANE" # got ''?
	#               set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#               set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#           }
	#       }
	#       set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#       set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#   } {

	#   %if "#{!=:#{normal_key},#{prefix_key}}"

	#   %if   "#{==:#{prefix_key},Escape}" #   #AA0000
	#       if-shell -F "#{pane_in_mode}" { #   does not work in the copy-mode bind block
	#       } {
	#       #   if-shell -F "#{@is-vim}" {
	#       #   send-keys $normal_key
	#       #   } {
	#       #   copy-mode #   with this design, you can not enter C-W to vim
	#       #   }
	#       #   Don't enter copy-mode here, because the copy-mode will lose window switch functions of vim
	#           copy-mode   # but we do need copy mode -- one-key copy-mode is important to preserve the scense
	#           $color_normal #   Let mode-changed hook handle it ?
	#       }
	#   %elif "#{==:#{normal_key},Escape}" #   #00AAAA

	#   %endif #   "#{==:#{normal_key},Escape}"

	#   %if    '#{one_stage_policy}'

	#   %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode
		#   Self maintenance
	#       bind -T prefix '$prefix_key' \"$prefix_prefix\" #   Tmux will prevent your normally input if $prefix_key is a alphabet

		#   switch-client -T root
		#   $color_terminal
		#   $color_prefix #   tmux 'jump to backward' error comes from here
		#   send-keys C-c #   Escape              #   Will be blocked by switch-client
		#   send-keys ESCAPE 'SPACE V' #   Will be blocked by switch-client
		#   select-pane -P 'bg=#{prefix_bg_on_light}'
		#   set -p window-active-style 'fg=default,bg=#{prefix_bg_on_light}'
			$color_prefix
		#   $color_terminal
		#   run '\tmux color_prefix' #   tmux 'jump to backward' error comes from here
		#   Duplicated with send-prefix
			switch-client -T prefix #   copy-prefix-overlay/override/superposition-mode when prefix_key triggering copy-mode first from root mode

	#   run '\tmux switch-client -T prefix' #   Recursive call
	#   send-prefix #   send-keys '$prefix_key' # won't work when tmux just has one pane #   #AAAA00
	#   %endif #   "#{one_stage_policy}"

	#   %else  #   "#{!=:#{normal_key},#{prefix_key}}"

	#   %endif #   "#{!=:#{normal_key},#{prefix_key}}"

		#   display-panes -N

		#   $color_terminal #   Let mode-changed hook handle it ?
		#   send-keys 'pwd' Enter
		#   if-shell -F "\#{pane_id}" {
		#       setenv -gh active_pane "\#{pane_id}"
	#   setenv -gh active_pane '$TMUX_PANE' # got ''?
		#   #   select-pane -m
		#   }
		#   display-panes
		#   Shell can not write tmux buffer correctly -- you need send "command" ENTER
		#   run -b "export TTY=$(tty) && . '$DOT_CONFIG/terminal/tmux/default-command'"
	#   }
	if-shell -F '#{delegate_wincmd}' {} {
		if-shell -F '#{@is-vim}' {
			if-shell -F '#{vim_in_charge_of_keystrokes}' {
				send-keys '$prefix_key'
			} {
				#   Does not work, because the loss of atomicity of C-W
				send-keys C-W #   Control sequences are not case sensitive
			}
		}
	}
	"

%if   "#{==:#{prefix_key},Escape}" #   #AA0000

	%if "#{one_key_copy}"
		%hidden prefix_root="
		#   if-shell -F '#{pane_in_mode}' { #   does not work in the copy-mode bind block
		#   } {
		#   #   if-shell -F "#{@is-vim}" {
		#   #   send-keys $normal_key
		#   #   } {
		#   #   copy-mode #   with this design, you can not enter C-W to vim
		#   #   }
		#   #   Don't enter copy-mode here, because the copy-mode will lose window switch functions of vim
		#   #   When switching window, we could close copy-mode before that operation
		#       copy-mode   # but we do need copy mode -- one-key copy-mode is important to preserve the scense
		#   #   $color_normal
		#   }
			$prefix_enter
		#   $color_toggle
		"

	%else  #   "#{one_key_copy}"
		%hidden prefix_root="
			$prefix_enter
		#   $color_toggle
		"

	%endif #   "#{one_key_copy}"

%elif "#{==:#{normal_key},Escape}" #   #00AAAA

	%hidden prefix_root="
		$prefix_enter
	"
%endif

	setenv -gh  prefix_root "$prefix_root"

#   Trying to avoid command alias -- maintain clias index is a pain
#   %hidden   recover_root="run -C '  bind -T root $prefix_key \"$prefix_root\"'"
#   %hidden recover_prefix="run -C 'bind -T prefix $prefix_key \"$prefix_prefix\"'"
#   %hidden recover_normal="run -C '  bind -T root $normal_key \"$normal_enter\"'"

#   run -C "bind -T root $prefix_key $prefix_root   \;   echo \"$(\tmux list-keys -T root   | awk -v key=\"$prefix_key\" '\$4 = key {print}')\" > /tmp/$(id -u)/root.conf"
#   run -C "bind -T prefix $prefix_key $prefix_prefix \; echo \"$(\tmux list-keys -T prefix | awk -v key=\"$prefix_key\" '\$4 = key {print}')\" > /tmp/$(id -u)/prefix.conf"
#   run -C "bind -T root $normal_key $normal_enter   \;  echo \"$(\tmux list-keys -T root   | awk -v key=\"$normal_key\" '\$4 = key {print}')\" > /tmp/$(id -u)/normal.conf"

	unbind    Enter
	unbind -n Enter
#   bind -T prefix Enter $prefix_prefix
#   bind -T prefix Enter $prefix_root   # It's a joke :) You have already entered, better quit

#   if-shell -F '#{delegate_wincmd}' {
#   #   Use default behavior ?
#   #   $color_toggle sending keys is not a stable operation
#       bind -T root Enter "
#           if-shell \"#{||:#{pane_in_mode},#{client_prefix}}\" {
#               display-panes -N
#           }
#           $color_toggle
#           send-keys Enter
#       "
#
#   #   $color_toggle sending keys is not a stable operation
#       bind -T prefix Enter "
#       $color_toggle
#       #   bind -T prefix "$prefix_key"   $prefix_prefix
#       #   bind -T root   "$prefix_key"   $prefix_root
#       #   if-shell -F "#{@is-vim}" {
#
#       #   switch-client -T root
#           switch-client -T prefix
#       #   $color_terminal
#
#       #   #   display-panes -N
#       #   } {
#       #       switch-client -T root   # kill last rolling messages
#       #   #   Shell can not write tmux buffer correctly
#       #   #   run -b "export TTY=$(tty) && . '$DOT_CONFIG/terminal/tmux/default-command'"   # It's a joke :) You have already entered, better quit
#       #   #   run -b 'env TTY=$(tty) sh -c "$DOT_CONFIG/terminal/tmux/default-command"'
#       #       send-keys "export TTY=$(tty) && . '$DOT_CONFIG/terminal/tmux/default-command'" ENTER
#       #   }
#       "
#   }
#
#   prefix_key_1_1/3/4 -- unset prefix mode $prefix_key
#

#   unbind        "$prefix_key"
#   unbind        '`'
#   unbind        Escape
#   When using Escape as prefix and triggerd prefix-w, use ctrl-m to quit it
	unbind -T prefix "$prefix_key"
#   unbind -T prefix Escape
#   unbind -T prefix Escape

#   set-option -g prefix       "$prefix_key"
#   set happens during execution

#   setenv        prefix_key   "$prefix_key" # no current session
#   setenv     -g prefix_key   "$prefix_key" # set-environment

#   set-option    prefix       None          # no current session
#   set-option -g prefix       None          #

#
#   prefix_key_1_2/3/4 --   set prefix mode $prefix_key name
#

#   set-option -g prefix_key   "$prefix_key" # invalid option -- prefix_key is defined by user :)
#   set        -g prefix_key   "$prefix_key"
#   set-option    prefix       "$prefix_key" # no current session
#   set        -g prefix       "$prefix_key"
#   set-option -g prefix       "$prefix_key" # Everything about prefix does not work
#   Comment out the above line C-b does not function

#
#   prefix_key_1_3/3/4 --   set prefix mode $prefix_key actions
#
#   $prefix_prefix bindings was removed -- it's just a RHS

#   bind -n `     if-shell "$is_vim" 'set prefix None; unbind \`; unbind -T root \`; bind -T root \` send-keys \`; send-keys \`' 'set prefix \`; bind -T root \` switch-client -T prefix; switch-client -T prefix'
#   bind -n `     if-shell "$is_vim" 'set prefix None; unbind \`; unbind -T root \`; send-keys \`' 'set prefix \`; switch-client -T prefix'

#   https://gist.github.com/darkdreamingdan/8b04a1ee25d7e984f35908a1b9bdf0f7
#   Add ` as prefix
#   set-option -g prefix2 "$prefix_key" #   set-option -g prefix2 '`'
#   #   Double tap ` or Alt-` to get a real `
#   bind "$prefix_key" send-keys "$prefix_key" #   bind ` send-keys `


#   For idempotent binding
#   bind           "$prefix_key" switch-client -T prefix
#   bind           "$prefix_key" \
#   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \; \
#   switch-client -T prefix

#
#   prefix_key_2_1/2/4 -- unset root mode $prefix_key
#
	unbind -T root "$prefix_key"
#   bind   -T root "$normal_key" copy-mode

#   prefix_key_2_2/2/4 -- set root mode $prefix_key

#   $prefix_root bindings was removed -- it's just a RHS

#   Keeping the default key binding as a backup
#   unbind -T copy-mode-vi q

#   [Is it possible to support interactive command in run-shell?](https://github.com/tmux/tmux/issues/3187)

#   %if "#{!=:#{normal_key},#{prefix_key}}"

%if   "#{==:#{prefix_key},Escape}" #   #AA0000
	unbind -T prefix [
#     unbind -T root [

	  bind -T prefix [ "
		mode_monitor=
		setenv -ghu mode_monitor
		if-shell -F '#{client_prefix}' { #   if-shell -F '#{||:#{client_prefix},#{==:#{client_key_table},prefix}}' {
			switch-client -T root
			$color_terminal
		}
		if-shell -F '#{pane_in_mode}' {
		} {
			copy-mode
		}
		$color_normal
	#   run '\tmux color_normal' #   Let mode-changed hook handle it ?
	#   run '\tmux display -p #{color_normal}'
		mode_monitor='on'
		setenv -gh  mode_monitor $mode_monitor
	"

%elif "#{==:#{normal_key},Escape}" #   #00AAAA
#
%endif #   "#{==:#{normal_key},Escape}"

#   %endif #   "#{!=:#{normal_key},#{prefix_key}}"

#   bind    [ run-shell 'tmux-vim-pager'


#   #000000 normal_general___________________________________________________________________________
%if "#{normal_quit}"
	setenv -ghu normal_quit
%endif
%if "#{normal_enter}"
	setenv -ghu normal_enter
%endif
%if "#{normal_toggle}"
	setenv -ghu normal_toggle
%endif
	%hidden   normal_quit=
	%hidden  normal_enter=
	%hidden normal_toggle=


#   %if "#{!=:#{normal_key},#{prefix_key}}" #   if '[ "$(\tmux display -p "#{normal_key}")" != "$(\tmux display -p "#{prefix_key}")" ]' {

%if    "#{normal_enter}"
	display -p "[1117] [error] normal_enter already defined: #{normal_enter}"
	confirm-before -p "normal_enter already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
%else  #   "#{normal_enter}"

	%hidden normal_quit="
		set -p '@mode-pre' '#{@mode-cur}'
		set -p '@mode_cur' 'prefix'
		if-shell -F '#{mode_monitor}' {
			mode_monitor_original='on'
		} {
			mode_monitor=
			setenv -ghu mode_monitor
		}
		if-shell -F '#{selection_present}' {
			send-keys -X clear-selection
		} {
			send-keys -X cancel
			switch-client -T root
			$color_terminal
		#   run '\tmux color_terminal' #   ?
		#   if-shell -F '#{@is-vim}' {
		#       send-keys C-c #   Escape
		#   }
		}
		if-shell -F '#{mode_monitor_original}' {
			mode_monitor='on'
			setenv -gh  mode_monitor $mode_monitor
		}
	"

	%hidden normal_enter="
	mode_monitor=
	setenv -ghu mode_monitor
	set -p '@mode-pre' '#{@mode-cur}'
	set -p '@mode_cur' 'normal'
	#   select-pane -P 'fg=green,bg=#{prefix_bg_on_light}'
	if-shell -F '#{client_prefix}' { #   if-shell -F '#{||:#{client_prefix},#{==:#{client_key_table},prefix}}' {
		switch-client -T root
	}
#   } {
#       switch-client -T prefix
#       switch-client -T root
#   }
    if-shell -F '#{pane_in_mode}' {
#       $normal_quit
    } {
	#   send-keys C-c #   Escape
	#   $color_terminal #   'jump to backward' error
	#   select-pane -P 'fg=green,bg=#{prefix_bg_on_light}'

	#   bind -T prefix '$prefix_key' $prefix_prefix
	#   bind -T root   '$prefix_key' $prefix_root
	#   You don't need these because vim could disable $normal_key by itself when in insert-mode
	#   if-shell -F '#{@is-vim}' {
	#       if-shell -F '#{@is-cmd}' {
	#           copy-mode
	#           $color_normal
	#       } {
	#           if-shell -F '#{@is-float}' {
	#               send-keys $escape_key
	#           #   send-keys C-c
	#               set-option -p -u -t '$TMUX_PANE' @is-float #   shut off this channel
	#           } {
	#               copy-mode
	#               $color_normal
	#           }
	#       }
	#   } {
	#   if-shell -F '#{@is-vim}' {} {
		#   send-keys $normal_key #   ?
			$color_normal
		#   run '\tmux color_normal' #   Let mode-changed hook handle it ?
	#   }
			copy-mode #   you can not enter C-W to vim withut quit copy-mode first
	#   }
	#   switch-client -T prefix #   let mode-changed hook do it since copy-mode initiated
	#   $color_prefix
    }
	mode_monitor='on'
	setenv -gh  mode_monitor $mode_monitor
	"

	%hidden normal_toggle="
	mode_monitor=
	setenv -ghu mode_monitor
	if-shell -F '#{client_prefix}' {
		switch-client -T root
	}
	#   $color_terminal #   'jump to backward' error
	#   if-shell -F '#{&&:#{rescue},#{@is-vim}}' {
	#       $vim_rescue
	#       #   $prefix_prefix
	#   }
	if-shell -F '#{pane_in_mode}' {
		$normal_quit
	#   $color_normal
	#   #   run '\tmux color_normal' #   Let mode-changed hook handle it ?
	#   if-shell -F '#{selection_present}' {
	#       send-keys -X clear-selection
	#   } {
	#       send-keys -X cancel
	#       switch-client -T root
	#       $color_terminal
	#   #   run '\tmux color_terminal'
	#       if-shell -F '#{@is-vim}' {
	#           send-keys C-c #   Escape
	#       }
	#   }
	#
	#   if-shell -F '#{client_prefix}' {
	#   #   switch-client -T root
	#   #   if-shell -F '#{selection_present}' {
	#   #       send-keys -X clear-selection
	#   #   } {
	#           send-keys -X cancel
	#           switch-client -T root
	#           run '\tmux color_terminal'
	#           if-shell -F '#{@is-vim}' {
	#               send-keys C-c #   Escape
	#           }
	#           copy-mode
	#   #   }
	#   }
	} {
	#   select-pane
		$color_normal
	#   run '\tmux color_normal' #   Let mode-changed hook handle it ?
	#   send-keys ESCAPE 'SPACE V'
		copy-mode
	}
	#   Pure copy-mode, otherwise h/j/k/l will move to other panes
	#   switch-client -T prefix
	#   $color_prefix
	mode_monitor='on'
	setenv -gh  mode_monitor $mode_monitor
	"

	%if   "#{==:#{prefix_key},Escape}" #   #AA0000

		display -p "[1256] prefix_key: #{prefix_key}"

	%elif "#{==:#{normal_key},Escape}" #   #00AAAA

		display -p "[1302] normal_key: #{normal_key}"

		#   %hidden normal_enter="copy-mode"
		#   Reducing the dependencies on @is-vim is a better choice because vim might be failed
		#   set-option -g @is-vim      false # Wrong operation. if-shell -F "#{@is-vim}" only read the pane option value

		#   Will be override by prefix_key binding when they share the same key

		#   Makes vim/nvim complicated if $normal_key == Escape
		#   %hidden normal_enter="
		#       bind   -T prefix '$prefix_key' switch-client -T root
		#       bind   -T root '$prefix_key' if-shell true {
		#           switch-client -T prefix
		#           $color_prefix
		#           #   display-panes -N
		#       }
		#       if-shell -F '#{@is-vim}' 'send-keys $normal_key' 'copy-mode'
		#   "

	%endif

	setenv -gh  normal_quit   "$normal_quit"
	setenv -gh  normal_enter  "$normal_enter"
	setenv -gh  normal_toggle "$normal_toggle"

%endif #   "#{normal_enter}"

#   %endif #   "#{!=:#{normal_key},#{prefix_key}}" #   }



#   #000000 normal_general___________________________________________________________________________


#   %if 0 #   0 #   Bypass $prefix_copy and $normal_copy -- does not work because nested %if does not work

#
#   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#   $normal_copy for overlay
#
#   unbind -T copy-mode-vi Escape
	unbind -T copy-mode-vi "$normal_key"
#   unbind -T copy-mode    Escape
	   unbind -T copy-mode "$normal_key"

%if   "#{==:#{prefix_key},Escape}" #   #AA0000

	%hidden normal_copy="
	#   $normal_copy # syntax error
	#   if-shell   -F "#{&&:#{@is-vim},#{@is-insert}}" {
		if-shell   -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'
		#   $mode_toggle
		if-shell   -F '#{@is-vim}' {
		# Shut off the mode entrance above first, then trigger the following action
		#   send-keys $normal_key #   No, what if it is '`' #   recursively calling ?
			send-keys C-c #   Escape      #   recursively calling ?
		#   bind -T root '$prefix_key' \"$prefix_root\"
			#   $prefix_prefix
		} {
		#   unbind -T prefix "$prefix_key"
		#   unbind -T root '$prefix_key'
		#   Toggle binding root on prefix == Escape, you can not quit copy-mode to root mode #   tmux 'jump to backward' error
		#   -- there will be always a prefix mode there waiting for you
		#   Quoting $normal_enter to keep it away from performing operations
		#   bind   -T root   '$normal_key' $normal_enter
		}
		switch-client -T root
		$color_terminal
	#   run '\tmux color_terminal'
	"

	#   assist_on_normal
#   %if   "#{normal_key}"
#       bind   -T copy-mode-vi "$normal_key" "$normal_copy"
#       bind   -T copy-mode    "$normal_key" "$normal_copy"
#   %endif

%elif "#{==:#{normal_key},Escape}" #   #00AAAA

	%hidden normal_copy="
	#   $normal_copy # syntax error
	#   if-shell   -F "#{&&:#{@is-vim},#{@is-insert}}" {
		if-shell   -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'
		#   $mode_toggle
		if-shell   -F '#{@is-vim}' {
		# Shut off the mode entrance above first, then trigger the following action
		#   send-keys $normal_key #   recursively calling ?
			send-keys C-c #   Escape      #   recursively calling ?
			bind -T root '$prefix_key' \"$prefix_root\"
			#   $prefix_prefix
		} {
		#   unbind -T prefix "$prefix_key"
			unbind -T root '$prefix_key'
		#   Toggle binding root on prefix == Escape, you can not quit copy-mode to root mode
		#   -- there will be always a prefix mode there waiting for you
		#   bind   -T root   '$normal_key' $normal_enter
		#   select-pane -P bg=terminal
		#   $color_terminal
		}
		switch-client -T root
		$color_terminal
	#   run '\tmux color_terminal'
	"


#   https://stackoverflow.com/questions/47848463/tmux-variable-indicating-whether-text-is-selected
#   bind   -T copy-mode-vi Escape send-keys -X clear-selection

#   Recursive calling
#   bind   -T copy-mode-vi "$normal_key" { if-shell -F "#{@is-vim}" "send-keys $normal_key"; \
#   if-shell -F '#{selection_present}' \
#       'send-keys -X clear-selection' \
#       'send-keys -X cancel' }

#   bind   -T copy-mode-vi "$normal_key" if-shell -F "#{@is-vim}" "send-keys C-c \; send-keys C-c" { if-shell -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel' }

#   bind   -T copy-mode-vi "$normal_key" "$normal_copy $mode_toggle"
#   bind   -T copy-mode-vi "$normal_key" {
#   #   $normal_copy # syntax error
#   #   if-shell   -F "#{&&:#{@is-vim},#{@is-insert}}" {
#       if-shell   -F "#{selection_present}" 'send-keys -X clear-selection' 'send-keys -X cancel'
#       #   $mode_toggle
#       if-shell   -F "#{@is-vim}" {
#       # Shut off the mode entrance above first, then trigger the following action
#           send-keys $normal_key # recursively calling ?
#           bind -T root "$prefix_key" "$prefix_root"
#           #   $prefix_prefix
#       } {
#       #   unbind -T prefix "$prefix_key"
#           unbind -T root "$prefix_key"
#       #   Toggle binding root on prefix == Escape, you can not quit copy-mode to root mode
#       #   -- there will be always a prefix mode there waiting for you
#       #   bind   -T root   '$normal_key' $normal_enter
#       #   $color_terminal
#       }
#       switch-client -T root
#   #   color_terminal #   ?
#   }


	#   assist_on_normal
#   %if   "#{normal_key}"
#       bind   -T copy-mode-vi "$normal_key" "$normal_copy"
#       bind   -T copy-mode    "$normal_key" "$normal_copy"
#   %endif
%endif

#   bind   -T copy-mode    Escape send-keys -X cancel
#
#   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#   bind   -n M-s          copy-mode \; send-keys ?

#   ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
#
#   $prefix_copy for overlay
#
#   bind   -T copy-mode-vi "$prefix_key" \
#   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \; \
#   switch-client -T prefix \; \
#   select-pane -P 'fg=default,   bg=colour020' \; \
#   display-panes -N \; \
#   select-pane -P 'fg=default,   bg=terminal'

#   prefix_key_3_1/2/4 -- unset copy-mode prefix_key
	unbind -T copy-mode-vi "$prefix_key"
#   unbind -T copy-mode-vi "$prefix_key"
#   unbind -T copy-mode-vi "$prefix_key"
	   unbind -T copy-mode "$prefix_key"

#   prefix_key_3_2/2/4 --   set copy-mode prefix_key actions

#   Recursive calling ?
#   if -F '#{==:#{prefix_key},Escape}' \
#   'bind -T copy-mode-vi "$prefix_key" \
#   select-pane -P "fg=default,bg=#{prefix_background}" \; \
#   switch-client -T prefix \; \
#   display-panes -N \; \
#   select-pane -P fg=default,bg=terminal' \
#   'bind -T copy-mode-vi "$prefix_key" send-prefix'
#   'bind -T copy-mode-vi "$prefix_key" send-keys "$prefix_key"'



#   %if "#{!=:#{normal_key},#{prefix_key}}" #   if '[ "$(\tmux display -p "#{normal_key}")" != "$(\tmux display -p "#{prefix_key}")" ]' {

#   set -p @client-prefix-overlay on


%if   "#{==:#{prefix_key},Escape}" #   #AA0000 #   if '[ "Escape" = "$(\tmux display -p "#{prefix_key}")" ]' {

	%if    "#{one_stage_policy}"
		%hidden prefix_copy="
		if-shell -F '#{selection_present}' {
			send-keys -X clear-selection
		} {
		#   send-keys -X cancel
		#   switch-client -T root
		#   $color_terminal
		#   if-shell -F "#{pane_in_mode}" { #   does not work in the copy-mode bind block
		#   } {
		#       if-shell -F "#{@is-vim}" {
		#       #   send-keys C-c
		#       #   Won't be a recursively calling when mode value left the copy
		#           send-keys $prefix_key
		#       }
		#   }

		#   %if    '#{one_stage_policy}'
				send-keys -X cancel
			#   run '\tmux color_terminal'
				if-shell -F '#{@is-vim}' {
					send-keys C-c #   Escape
				}

		#   %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode
		#       switch-client -T prefix #   copy-prefix-overlay/override/superposition-mode
		#       $color_prefix
		#   %endif #   "#{one_stage_policy}"
		}
		#   See MARK "overwritten 00"
		#   select-pane -P bg=$prefix_background
		#   if-shell -F '#{@client-prefix-overlay}' {
		#       switch-client -T prefix
		#       $color_prefix
		#       set -up @client-prefix-overlay
		#   } {
		#       switch-client -T root
		#       $color_terminal
		#       set -p @client-prefix-overlay on
		#   }
		switch-client -T root
		$color_terminal
	#   run '\tmux color_terminal'
		"
	%else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode
		%hidden prefix_copy="
		#   if-shell -F '#{selection_present}' 'send-keys -X clear-selection' ' switch-client -T prefix ; set -g window-active-style bg=$prefix_background,reverse '
		if-shell -F '#{selection_present}' {
			send-keys -X clear-selection
		} {
			switch-client -T prefix #   copy-prefix-overlay/override/superposition-mode
			$color_prefix
		#   run '\tmux color_prefix'
		}
		"
	%endif #   "#{one_stage_policy}"

	#   Will be override by "$normal_key" on copy-mode<-vi> mode -- tmux bug # issues #4234
	#   escape_on_normal
	#   bind -T copy-mode-vi "$prefix_key" "$prefix_copy"
	#      bind -T copy-mode "$prefix_key" "$prefix_copy"

%elif "#{==:#{normal_key},Escape}" #   #00AAAA #   } {

	%hidden prefix_copy="
	#   #   client_prefix is always 0 because tmux is in copy-mode by the current binding definition
	#   if-shell -F '#{!=:#{client_prefix},1}' ' switch-client -T prefix ; select-pane -P "bg=#{prefix_background},reverse" ' ' copy-mode ; select-pane -P "bg=#{normal_background},reverse" '
	#   if-shell -F '#{@is-vim}' ' send-keys C-W ' ' switch-client -T prefix '
	#   if-shell -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'
	#   if-shell -F '#{selection_present}' 'send-keys -X clear-selection'
	#   send-keys -X cancel
	switch-client -T prefix
	$color_prefix
	#   display-panes -N
	#   run '\tmux color_prefix'
	"

	#   escape_on_normal
	#   bind -T copy-mode-vi "$prefix_key" "$prefix_copy"
	#      bind -T copy-mode "$prefix_key" "$prefix_copy"


%endif #   "#{==:#{normal_key},Escape}" #   }

#   %endif #   "#{!=:#{normal_key},#{prefix_key}}" #   }

#   ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
#
#   %endif #   0 #   Bypass $prefix_copy and $normal_copy
#
#   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#
#   bind   -n "$prefix_key" copy-mode # using Backtic as copy-mode initiator does not work without restart tmux
#   bind   -n "`"           copy-mode
#   bind   -T root          "$normal_key" copy-mode
#   run -C 'bind -n Escape  copy-mode'
#   bind   -n Tab           copy-mode
#   bind   -n Escape        send-keys "$prefix_key-["

	unbind -n C-d
#   bind   -T copy-mode-vi C-d           send-keys -X halfpage-down

	   unbind "$toggle_key"
		 bind "$toggle_key" "$normal_enter"

	  bind -T copy-mode-vi "$toggle_key" "$normal_quit"
		 bind -T copy-mode "$toggle_key" "$normal_quit"
	  bind -T copy-mode-vi [ "$normal_quit"
		 bind -T copy-mode [ "$normal_quit"

#   bind   -T copy-mode-vi "$toggle_key" {
#       if-shell -F "#{selection_present}" {
#           send-keys -X clear-selection
#       } {
#           send-keys -X cancel
#           switch-client -T root
#           select-pane -P bg=terminal
#       #   "$color_terminal" #   ?   #   "#{color_terminal}" #   ?
#           if-shell -F "#{@is-vim}" {
#               send-keys "Escape"
#           }
#       }
#   }

#   bind   -n "$toggle_key"         copy-mode-vi #   Unknown command: copy-mode-vi -- it's a mode, not a command
#   bind   -n Escape                   copy-mode-vi
#   bind   -n "$toggle_key"         confirm-before -p "kill-pane #P? (y/n)" kill-pane
#   bind   -n "$toggle_key"         copy-mode \; select-pane -P "fg=default,bg=#{normal_background}"

#   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#   Implement CursorMoved in tmux ?
#   unbind -n h
#   unbind -n l
#   unbind -n j
#   unbind -n k
#   bind -n h if-shell -F "#{is-vim}" 'send-keys h ; select-pane -P bg=terminal '

# # %hidden color_up="
# # $color_toggle
# # send-keys -X cursor-up
# # "
# # bind -T copy-mode-vi k "$color_up
# # selectp" #   Just a test. Works

# # unknown command:
# # bind -T copy-mode-vi k {
# # $color_toggle
# # send-keys -X cursor-up
# # }
# # bind -T copy-mode-vi k {
# # if-shell -F "#{pane_in_mode}" {
# #     select-pane -P "bg=#{normal_background}"
# # } {
# # if-shell -F "#{client_prefix}" {
# #     select-pane -P "bg=$prefix_background"
# # } {
# #     select-pane -P bg=terminal
# # }
# # }
# # send-keys -X cursor-up }

#       unbind -T copy-mode-vi k
#       bind -T copy-mode-vi k "
#       send-keys -X cursor-up
#   #   $color_toggle
#       "
#
#       unbind -T copy-mode-vi h
#       bind -T cory-mode-vi h "
#       send-keys -X cursor-left
#   #   $color_toggle
#       "
#
#       unbind -T copy-mode-vi l
#       bind -T copy-mode-vi l "
#       send-keys -X cursor-right
#   #   $color_toggle
#       "
#
#       unbind -T copy-mode-vi j
#       bind -T copy-mode-vi j "
#       send-keys -X cursor-down
#   #   $color_toggle
#       "
#
#       unbind -T root h
#       bind -T root h "
#           send-keys h
#       #   $color_toggle #   Too heavy
#       "
#       unbind -T root l
#       bind -T root l "
#           send-keys l
#       #   $color_toggle #   Too heavy
#       "
#       unbind -T root j
#       bind -T root j "
#           send-keys j
#       #   $color_toggle #   Too heavy
#       "
#       unbind -T root k
#       bind -T root k "
#           send-keys k
#       #   $color_toggle #   Too heavy
#       "
#

#
#
#
#
#


#   %hidden color_toggle='
#   tmux if-shell -F "#{pane_in_mode}" {
#       tmux select-pane -P "fg=default,bg=#{normal_background}"
#       tmux set -p window-active-style "fg=default,bg=#{normal_background}"
#   } {
#       if-shell -F "#{client_prefix}" {
#           tmux select-pane -P "fg=default,bg=#{prefix_background}"
#           tmux set -p window-active-style "fg=default,bg=#{prefix_background}"
#       } {
#           tmux select-pane -P bg=terminal
#           tmux set -p window-active-style bg=terminal
#       }
#   }
#   '

	%hidden color_toggle="
	if-shell -F '#{pane_in_mode}' {
		$color_normal
	#   run -C 'color_normal'
	#   Got "dragging" effect, poor compile and run performance ? No
	#   select-pane -P 'bg=#{normal_background}' #   got dynamic value
	#   select-pane -P bg=$normal_background     #   got static value
	#   set -p window-active-style bg=$normal_background #   got static value #   after-set-option recursive ?
	} {
		if-shell -F '#{client_prefix}' {
			$color_prefix
		#   run '\tmux color_prefix'
		#   Got "dragging" effect, poor compile and run performance ? No
		#   select-pane -P 'bg=#{prefix_background}' #   got dynamic value
		#   select-pane -P bg=$prefix_background     #   got static value
		#   set -p window-active-style bg=$prefix_background #   got static value #   after-set-option recursive ?
		} {
			$color_terminal
		#   run '\tmux color_terminal'
		#   select-pane -P bg=terminal
		#   set -p window-active-style bg=terminal   #   got static value         #   after-set-option recursive ?
		}
	}
	"
#   %hidden style_on_client_prefix='
#   if-shell -F "#{client_prefix}" {
#       set -p window-active-style "bg=#{prefix_background}"
#   } {
#       set -p window-active-style bg=terminal
#   }
#   '

	%hidden select_on_client_prefix="
	if-shell -F '#{client_prefix}' {
		$color_prefix
	#   run '\tmux color_prefix'
	} {
		$color_terminal
	#   run '\tmux color_terminal'
	}
	"

#   Composition factory #AABB00


#   Moved to init.conf but useless
	%hidden init='
	unbind -T   root "$escape_key" # $normal_key
	unbind -T prefix "$escape_key" # $normal_key
	unbind -T   root "$assist_key"
	%hidden assist_on_root=
	setenv -ghu assist_on_root

	%hidden bind_assist_on_root=
	setenv -ghu bind_assist_on_root

	%hidden escape_on_root=
	setenv -ghu escape_on_root #   unknown variable: escape_on_root
#   setenv -gh  escape_on_root $escape_on_root

#   %if '#{escape_on_root}'
#       display -p '[1812] [error] escape_on_root already defined: #{escape_on_root}'
#       confirm-before -p 'escape_on_root already defined. kill-session #{session_id} ? (y/n)' kill-session #   no current client
#   %else
#       display -p '[1815] [succeeded] escape_on_root already cleared: #{escape_on_root}'
#   %endif

	%hidden bind_escape_on_root=
	setenv -ghu bind_escape_on_root

	setenv -ghu unbind_escape_on_root

%if "#{escape_key}"
	%hidden unbind_escape_on_root="
		unbind -T root \"$escape_key\"
		"
%else
	%hidden unbind_escape_on_root=
%endif

	%hidden escape_on_prefix=
	setenv -ghu escape_on_prefix

	%hidden bind_escape_on_prefix=
	setenv -ghu bind_escape_on_prefix

	%hidden assist_on_prefix=
	setenv -ghu assist_on_prefix

	%hidden bind_assist_on_prefix=
	setenv -ghu bind_assist_on_prefix
	%hidden unbind_assist_on_prefix=
	setenv -ghu unbind_assist_on_prefix

	%hidden escape_on_normal=
	setenv -ghu escape_on_normal
	%hidden assist_on_normal=
	setenv -ghu assist_on_normal

#   display -p '[1853] Composition factory initialized'
#   display -p '[1854] prefix_key: #{prefix_key}'
#   display -p '[1855] normal_key: #{normal_key}'
#   display -p '[1856] escape_key: #{escape_key}'
#   display -p '[1857] assist_key: #{assist_key}'
	'


%if "#{alias_index_17}"
	display -p "Occupied \$alias_index_17: $alias_index_17"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_17=17
	%if "#{init}"
		set -s  command-alias[$alias_index_17] init="$init"
		setenv -gh init_alias_name "init" #   Decoupling from the editor
	%else
		display -p "\$init not defined: $init"
		confirm-before -p "kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_17
%endif

#   Useless
#   run -b '\tmux init'
#   Useless
#   run -C '#{init}' #   syntax error (comes from %if)
#   Useless
#   run -C "$init"   #   syntax error (comes from %if)

#   source "$DOT_CONFIG/terminal/tmux/init.conf"

#   Escape -> prefix-mode -> assist_key -> copy-mode
%if   "#{==:#{prefix_key},Escape}" #   #AA0000
#   if-shell -F "#{==:#{prefix_key},Escape}" { #   #AA0000

#   source "$DOT_CONFIG/terminal/tmux/prefix-escape.conf"

	display -p "[1948] prefix_key: #{prefix_key} [current policy]"

#   Useless
#   run -C '#{init}' #   syntax error (comes from %if)
#   Useless
#   run -C "$init"   #   syntax error (comes from %if)

#   source "$DOT_CONFIG/terminal/tmux/init.conf"

%if    "#{&&:#{escape_key},#{==:#{prefix_key},Escape}}"
	unbind -T   root "$escape_key" # $normal_key
	unbind -T prefix "$escape_key" # $normal_key

	%hidden     escape_on_root=
	setenv -ghu escape_on_root

	%if "#{escape_on_root}"
		display -p "[1965] [error] escape_on_root already defined: #{escape_on_root}"
		confirm-before -p "[1966] [error] escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%else
		display -p "[1968] [succeeded] escape_on_root already cleared: #{escape_on_root}"
	%endif

	%hidden     bind_escape_on_root=
	setenv -ghu bind_escape_on_root


	%hidden     escape_on_prefix=
	setenv -ghu escape_on_prefix

	%hidden     bind_escape_on_prefix=
	setenv -ghu bind_escape_on_prefix

	%hidden     escape_on_normal=
	setenv -ghu escape_on_normal

	%hidden unbind_escape_on_root="unbind -T root '$escape_key'"

	%hidden unbind_escape_on_prefix="unbind -T prefix '$escape_key'"

	%hidden unbind_escape_on_normal="
		unbind -T copy-mode    '$escape_key'
		unbind -T copy-mode-vi '$escape_key'
		"

	display -p "[1992] escape_key: #{escape_key}"
%else
	%hidden     unbind_escape_on_root=
	setenv -ghu unbind_escape_on_root
	%hidden     unbind_escape_on_prefix=
	setenv -ghu unbind_escape_on_prefix
	%hidden     unbind_escape_on_normal=
	setenv -ghu unbind_escape_on_normal
%endif

 %if    "#{&&:#{assist_key},#{==:#{prefix_key},Escape}}"
	unbind -T   root "$assist_key"

	%hidden assist_on_root=
	setenv -ghu assist_on_root

	%hidden bind_assist_on_root=
	setenv -ghu bind_assist_on_root

	%hidden assist_on_prefix=
	setenv -ghu assist_on_prefix

	%hidden bind_assist_on_prefix=
	setenv -ghu bind_assist_on_prefix

	%hidden assist_on_normal=
	setenv -ghu assist_on_normal

	%hidden unbind_assist_on_root="unbind -T root '$assist_key'"

	%hidden unbind_assist_on_prefix="unbind -T prefix '$assist_key'"

	%hidden unbind_assist_on_normal="
		unbind -T copy-mode    '$assist_key'
		unbind -T copy-mode-vi '$assist_key'
		"

	display -p "[2026] assist_key: #{assist_key}"
%else
	%hidden     unbind_assist_on_root=
	setenv -ghu unbind_assist_on_root
	%hidden     unbind_assist_on_prefix=
	setenv -ghu unbind_assist_on_prefix
	%hidden     unbind_assist_on_normal=
	setenv -ghu unbind_assist_on_normal

%endif

	display -p "[2041] prefix_key: #{prefix_key}"
	display -p "[2042] normal_key: #{normal_key}"

	display -p "[2044] Composition factory initialized"


	%if "#{&&:#{prefix_root},#{==:#{prefix_key},Escape}}"

		%if "#{escape_on_root}"
			display -p "[2019] [error] escape_on_root already defined: #{escape_on_root}"
			confirm-before -p "[1956] [error] normal_key: #{normal_key}, escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			display -p "[2022] [succeeded] escape_on_root already cleared: #{escape_on_root}"
		%endif

		%if "#{escape_on_root}"
			display -p "[2026] [error] escape_on_root already defined: #{escape_on_root}"
			confirm-before -p "prefix_key: #{prefix_key}, assist_key: #{assist_key}, escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else
		#   %if   "#{==:#{prefix_key},Escape}" #   #AA0000
		#   display -p "[2030] escape_on_root is gonna be assigned: #{escape_on_root}"
			%hidden    escape_on_root="$prefix_root"
			setenv -gh escape_on_root "$prefix_root"
		#   display -p "[2032] [succeeded] escape_on_root was assigned: #{escape_on_root}"
		#   %endif

		%endif

		%if "#{bind_escape_on_root}"
			display -p "[2038] [error] bind_escape_on_root already defined: #{bind_escape_on_root}"
			confirm-before -p "prefix_key: #{prefix_key}, assist_key: #{assist_key}, bind_escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			%hidden    bind_escape_on_root="
			bind -T root '$escape_key' \"$prefix_root\"
			"
			setenv -gh bind_escape_on_root "
			bind -T root '$escape_key' \"$prefix_root\"
			"
		%endif

		%if "#{escape_on_normal}"
			display -p "[2047] [error] escape_on_normal already defined: #{escape_on_normal}"
			confirm-before -p "prefix_key: #{prefix_key}, escape_on_normal already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			%hidden    escape_on_normal="$prefix_root"
			setenv -gh escape_on_normal "$prefix_root"
		%endif
	%else  #   "#{prefix_root}"
		display -p "\$prefix_root not defined: $prefix_root"
		confirm-before -p "prefix_key: #{prefix_key}, \$prefix_root not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif #   "#{prefix_root}"


	%if "#{&&:#{prefix_prefix},#{==:#{prefix_key},Escape}}"

		%if "#{escape_on_prefix}"
			display -p "[2061] [error] escape_on_prefix already defined: #{escape_on_prefix}"
			confirm-before -p "prefix_key: #{prefix_key}, escape_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			%hidden    escape_on_prefix="$prefix_prefix"
			setenv -gh escape_on_prefix "$prefix_prefix"
			display -p "[2065] escape_on_prefix <= prefix_prefix"
		#   %if "#{==:#{prefix_prefix},#{escape_on_prefix}}"
		#       display -p "prefix_prefix == escape_on_prefix"
		#   %else
		#       display -p "prefix_prefix != escape_on_prefix"
		#   %endif
		%endif


		%if "#{bind_escape_on_prefix}"
			display -p "[2075] [error] bind_escape_on_prefix already defined: #{bind_escape_on_prefix}"
			confirm-before -p "prefix_key: #{prefix_key}, bind_escape_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			%hidden    bind_escape_on_prefix="
			bind -T root '$escape_key' \"$prefix_prefix\"
			"
			setenv -gh bind_escape_on_prefix "
			bind -T root '$escape_key' \"$prefix_prefix\"
			"
		%endif
	%else  #   "#{prefix_prefix}"
		display -p "\$prefix_prefix not defined: $prefix_prefix"
		confirm-before -p "prefix_key: #{prefix_key}, \$prefix_prefix not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif #   "#{prefix_prefix}"

	%if "#{&&:#{prefix_copy},#{==:#{prefix_key},Escape}}"

	%else
		display -p "\$prefix_copy not defined: $prefix_copy"
		confirm-before -p "prefix_key: #{prefix_key}, \$prefix_copy not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif #   "#{prefix_copy}"

	%if   "#{&&:#{assist_key},#{==:#{prefix_key},Escape}}"

		%if "#{normal_enter}"
			%if "#{assist_on_prefix}"
				display -p "[2098] [error] assist_on_prefix already defined: #{assist_on_prefix}"
				confirm-before -p "prefix_key: #{prefix_key}, assist_key: #{assist_key}, assist_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
			%else
				%hidden    assist_on_prefix="$normal_enter"
				setenv -gh assist_on_prefix "$normal_enter"
			%endif

			%if "#{bind_assist_on_prefix}"
				display -p "[2105] [error] bind_assist_on_prefix already defined: #{bind_assist_on_prefix}"
				confirm-before -p "prefix_key: #{prefix_key}, assist_key: #{assist_key}, bind_assist_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
			%else
				%hidden    bind_assist_on_prefix="
				#   bind -T prefix '$normal_key' \"$normal_prefix\"
					bind -T prefix '$assist_key' \"$normal_enter\"
					"
				setenv -gh bind_assist_on_prefix "
					bind -T prefix '$assist_key' \"$normal_enter\"
					"
			%endif

			%if "#{assist_on_root}"
				display -p "[2124] [error] assist_on_root already defined: #{assist_on_root}"
				confirm-before -p "prefix_key: #{prefix_key}, assist_key: #{assist_key}, assist_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
			%else
				%hidden    assist_on_root="
				if-shell -F '#{@is-vim}' {
					if-shell -F '#{@is-insert}' {
						send-keys C-c #   Escape
					}
				#   send-keys SPACE N
					send-keys M-N
				} {
					$normal_enter
				}
				"

				setenv -gh assist_on_root "
				if-shell -F '#{@is-vim}' {
					if-shell -F '#{@is-insert}' {
						send-keys C-c #   Escape
					}
				#   send-keys SPACE N
					send-keys M-N
				} {
					$normal_enter
				}
				"

			#   %hidden assist_on_root_nvim="$normal_enter"
			#   setenv -gh assist_on_root_nvim "$assist_on_root_nvim"
				#   normal_root_bind
			#   %hidden    normal_on_root_nvim_slot="$assist_on_root_nvim"
				%hidden    normal_on_root_nvim_slot="$normal_enter"
				setenv -gh normal_on_root_nvim_slot "$normal_enter" #   Decoupling from the editor
				%hidden    normal_on_root_nvim_alias_name="normal_enter"
				setenv -gh normal_on_root_nvim_alias_name "normal_enter" #   Decoupling from the editor

			#   display -p "assist_on_root   <= send-keys ESCAPE SPACE N"
				%hidden    bind_assist_on_root="
			#     bind -T root '$assist_key' \"$normal_enter\"
			#     bind -T root '$assist_key' send-keys ESCAPE SPACE N
				  bind -T root '$assist_key' \"$assist_on_root\"
				"
				setenv -gh bind_assist_on_root "
				  bind -T root '$assist_key' \"$assist_on_root\"
				"
			%endif

			%if "#{toggle_key}"
				unbind -n "$toggle_key"
			#   bind   -n "$toggle_key" "$normal_enter"
				bind   -n "$toggle_key" "$assist_on_root"
			%endif
		%else
			display -p "\$normal_enter not defined: $normal_enter"
			confirm-before -p "prefix_key: #{prefix_key}, assist_key: #{assist_key}, \$normal_enter not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%endif

		%if "#{normal_quit}"
			%if "#{assist_on_normal}"
				display -p "[2158] [error] assist_on_normal already defined: #{assist_on_normal}"
				confirm-before -p "prefix_key: #{prefix_key}, assist_key: #{assist_key}, assist_on_normal already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
			%else
			#   %hidden    assist_on_normal_impl="$normal_quit"
				%hidden    assist_on_normal="$normal_quit"
			#   %hidden    assist_on_normal="send-keys ESCAPE SETQUIT"
				setenv -gh assist_on_normal "$normal_quit"
			%endif
		%else
			display -p "\$normal_quit not defined: $normal_quit"
			confirm-before -p "normal_key: #{normal_key}, \$normal_quit not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%endif #   "#{normal_quit}"

	%else  #   "#{assist_key}"
		%hidden     bind_assist_on_prefix=""
		setenv -ghu bind_assist_on_prefix
		%hidden     bind_assist_on_root=""
		setenv -ghu bind_assist_on_root
		%hidden     assist_on_root=""
		setenv -ghu assist_on_root
		%hidden     assist_on_prefix=""
		setenv -ghu assist_on_prefix

	%endif #   "#{assist_key}"
#   }





#   }
#   %else #   "#{==:#{prefix_key},Escape}"
#   Escape -> copy-mode   -> assist_key -> prefix-mode
%elif "#{==:#{normal_key},Escape}" #   #00AAAA
#   %if "#{==:#{normal_key},Escape}" #   #00AAAA
#   if-shell -F "#{==:#{normal_key},Escape}" { #   #00AAAA

#   source "$DOT_CONFIG/terminal/tmux/normal-escape.conf"

	display -p "[2197] normal_key: #{normal_key} [current policy]"

#   Useless
#   run -C '#{init}' #   syntax error (comes from %if)
#   Useless
#   run -C "$init"   #   syntax error (comes from %if)
#   $init             #   unknown command:
#   if true { $init } #   unknown command:

#   source "$DOT_CONFIG/terminal/tmux/init.conf"


%if    "#{&&:#{escape_key},#{==:#{normal_key},Escape}}"
	unbind -T   root "$escape_key" # $normal_key
	unbind -T prefix "$escape_key" # $normal_key

	%hidden     escape_on_root=
	setenv -ghu escape_on_root

	%if "#{escape_on_root}"
		display -p "[2238] [error] escape_on_root already defined: #{escape_on_root}"
		confirm-before -p "[2239] [error] escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%else
		display -p "[2241] [succeeded] escape_on_root already cleared: #{escape_on_root}"
	%endif

	%hidden     bind_escape_on_root=
	setenv -ghu bind_escape_on_root


#%if "#{==:#{normal_key},Escape}" #   #00AAAA
		%hidden     escape_on_prefix=
		setenv -ghu escape_on_prefix
#%endif

	%hidden     bind_escape_on_prefix=
	setenv -ghu bind_escape_on_prefix

	%hidden     escape_on_normal=
	setenv -ghu escape_on_normal

	%hidden unbind_escape_on_root="unbind -T root '$escape_key'"

	%hidden unbind_escape_on_prefix="unbind -T prefix '$escape_key'"

	%hidden unbind_escape_on_normal="
		unbind -T copy-mode    '$escape_key'
		unbind -T copy-mode-vi '$escape_key'
		"

	display -p "[2266] escape_key: #{escape_key}"
%else
	%hidden     unbind_escape_on_root=
	setenv -ghu unbind_escape_on_root
	%hidden     unbind_escape_on_prefix=
	setenv -ghu unbind_escape_on_prefix
	%hidden     unbind_escape_on_normal=
	setenv -ghu unbind_escape_on_normal
%endif

 %if    "#{&&:#{assist_key},#{==:#{normal_key},Escape}}"
	unbind -T   root "$assist_key"

#%if "#{==:#{normal_key},Escape}" #   #00AAAA
	%hidden assist_on_root=
	setenv -ghu assist_on_root
#%endif

	%hidden bind_assist_on_root=
	setenv -ghu bind_assist_on_root

	%hidden assist_on_prefix=
	setenv -ghu assist_on_prefix

	%hidden bind_assist_on_prefix=
	setenv -ghu bind_assist_on_prefix

	%hidden assist_on_normal=
	setenv -ghu assist_on_normal

	%hidden unbind_assist_on_root="unbind -T root '$assist_key'"

	%hidden unbind_assist_on_prefix="unbind -T prefix '$assist_key'"

	%hidden unbind_assist_on_normal="
		unbind -T copy-mode    '$assist_key'
		unbind -T copy-mode-vi '$assist_key'
		"

	display -p "[2303] assist_key: #{assist_key}"
%else
	%hidden     unbind_assist_on_root=
	setenv -ghu unbind_assist_on_root
	%hidden     unbind_assist_on_prefix=
	setenv -ghu unbind_assist_on_prefix
	%hidden     unbind_assist_on_normal=
	setenv -ghu unbind_assist_on_normal

%endif

	display -p "[2314] prefix_key: #{prefix_key}"
	display -p "[2315] normal_key: #{normal_key}"

	display -p "[2317] Composition factory initialized"

#   %if #{!=:#{escape_on_root},}
#   %if '$escape_on_root'
	%if "#{escape_on_root}"
		display -p "[2270] [error] escape_on_root already defined: '#{escape_on_root}'"
		confirm-before -p "[2271] [error] normal_key: #{normal_key}, escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%else
#       display -p "[2273] [succeeded] escape_on_root already cleared: #{escape_on_root}"
	%endif
	%hidden head='abcd'
	%hidden tail='wxyz'
	%if #{==:#{head}$escape_on_root#{tail},#{head}#{tail}}
#   %if "#{==:#{head}#{escape_on_root},#{head}}"
		display -p "[2279] [succeeded] escape_on_root already cleared: #{escape_on_root}"
	%endif
#   run 'unset escape_on_root'
	%if #{!=:#{escape_on_root},}
#   %if "$escape_on_root"
#       showenv -gh 'escape_on_root' #   unknown variable: escape_on_root

#   %if '#(\tmux display -p "#{escape_on_root}")'
		run 'echo "escape_on_root: $(\tmux display -p "#{escape_on_root}")" >> $HOME/.vim.log'
		display -p "[2288] [error] escape_on_root already defined: '#{escape_on_root}'"
		confirm-before -p "[2289] [error] normal_key: #{normal_key}, escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%else
		display -p "[2291] [succeeded] escape_on_root already cleared: #{escape_on_root}"
	%endif

	%if "#{normal_enter}"

		%if "#{escape_on_root}"
	#   Works ? #   No
	#   if-shell -F '#{escape_on_root}' {
			display -p "[2299] [error] escape_on_root already defined: #{escape_on_root}"
			confirm-before -p "[2300] [error] normal_key: #{normal_key}, escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	#   } {
		%else
			%hidden escape_on_root="
			if-shell -F '#{@is-vim}' {
				if-shell -F '#{@is-insert}' {
					send-keys C-c #   Escape
				}
			#   send-keys SPACE N
				send-keys M-N
			} {
				$normal_enter
			}
			"
			setenv -gh escape_on_root "
			if-shell -F '#{@is-vim}' {
				if-shell -F '#{@is-insert}' {
					send-keys C-c #   Escape
				}
			#   send-keys SPACE N
				send-keys M-N
			} {
				$normal_enter
			}
			"

		#   %hidden escape_on_root_nvim="$normal_enter"
		#   setenv -gh escape_on_root_nvim "$escape_on_root_nvim"
			#   normal_root_bind
		#   %hidden    normal_on_root_nvim_slot="$escape_on_root_nvim"
			%hidden    normal_on_root_nvim_slot="$normal_enter"
			setenv -gh normal_on_root_nvim_slot "$normal_enter" #   Decoupling from the editor
		#   %hidden    normal_on_root_nvim_alias_name="escape_on_root_nvim"
			%hidden    normal_on_root_nvim_alias_name="normal_enter"
			setenv -gh normal_on_root_nvim_alias_name "normal_enter" #   Decoupling from the editor

			%if "#{toggle_key}"
				unbind -n "$toggle_key"
			#   bind   -n "$toggle_key" "$normal_enter"
				bind   -n "$toggle_key" "$escape_on_root"
			%endif
		%endif
	#   }
		%if "#{bind_escape_on_root}" #   if-shell -F '#{bind_escape_on_root}' {
			display -p "[2322] [error] bind_escape_on_root already defined: #{bind_escape_on_root}"
			confirm-before -p "[2323] [error] normal_key: #{normal_key}, bind_escape_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else #   } {
			%hidden    bind_escape_on_root="
		#   bind -T root '$escape_key' \"$normal_enter\"
			bind -T root '$escape_key' \"$escape_on_root\"
			"
			setenv -gh bind_escape_on_root "
			bind -T root '$escape_key' \"$escape_on_root\"
			"
		%endif #   }

		%if "#{escape_on_prefix}" #   if-shell -F '#{escape_on_prefix}' {
			display -p "[2332] [error] escape_on_prefix already defined: #{escape_on_prefix}"
			confirm-before -p "[2333] [error] normal_key: #{normal_key}, escape_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else #   } {
			%if "#{==:#{normal_key},Escape}" #   #00AAAA
				%hidden    escape_on_prefix="$normal_enter"
				setenv -gh escape_on_prefix "$normal_enter"
				display -p "[2336] escape_on_prefix <= normal_enter"
			%endif
		%endif #   }

		%if "#{bind_escape_on_prefix}" #   if-shell -F '#{bind_escape_on_prefix}' {
			display -p "[2340] [error] bind_escape_on_prefix already defined: #{bind_escape_on_prefix}"
			confirm-before -p "[2341] [error] normal_key: #{normal_key}, bind_escape_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else #   } {
			%hidden    bind_escape_on_prefix="
			#   bind -T root "$escape_key" "$normal_prefix"
			bind -T root '$escape_key' \"$normal_enter\"
			"
			setenv -gh bind_escape_on_prefix "
			bind -T root '$escape_key' \"$normal_enter\"
			"
		%endif #   }


	%else
		display -p "\$normal_enter not defined: $normal_enter"
		confirm-before -p "normal_key: #{normal_key}, \$normal_enter not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif

	%if    "#{normal_quit}"

		%if "#{escape_on_normal}" #   if-shell -F '#{escape_on_normal}' {
			display -p "[2358] [error] escape_on_normal already defined: #{escape_on_normal}"
			confirm-before -p "[2359] [error] normal_key: #{normal_key}, escape_on_normal already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%else #   } {
			%hidden    escape_on_normal="$normal_quit"
			setenv -gh escape_on_normal "$normal_quit"
		%endif #   }
	%else
		display -p "\$normal_quit not defined: $normal_quit"
		confirm-before -p "normal_key: #{normal_key}, \$normal_quit not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif #   "#{normal_quit}"

	%if    "#{assist_key}"

		%if "#{prefix_prefix}"

			%if "#{assist_on_prefix}" #   if-shell -F '#{assist_on_prefix}' {
				display -p "[2373] [error] assist_on_prefix already defined: #{assist_on_prefix}"
				confirm-before -p "normal_key: #{normal_key}, assist_key: #{assist_key}, assist_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
			%else #   } {
				%hidden    assist_on_prefix="$prefix_prefix"
				setenv -gh assist_on_prefix "$prefix_prefix"
			%endif #   }

			%if "#{bind_assist_on_prefix}" #   if-shell -F '#{bind_assist_on_prefix}' {
				display -p "[2380] [error] bind_assist_on_prefix already defined: #{bind_assist_on_prefix}"
				confirm-before -p "normal_key: #{normal_key}, assist_key: #{assist_key}, bind_assist_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
			%else #   } {
				%hidden    bind_assist_on_prefix="
				#   bind -T prefix "$normal_key" "$prefix_prefix"
				  bind -T prefix '$assist_key' \"$prefix_prefix\"
				"
				setenv -gh bind_assist_on_prefix "
				  bind -T prefix '$assist_key' \"$prefix_prefix\"
				"
			%endif #   }

		#   %if '#{unbind_assist_on_prefix}' #   if-shell -F '#{unbind_assist_on_prefix}' {
		#       display -p "[2390] [error] unbind_assist_on_prefix already defined: #{unbind_assist_on_prefix}"
		#       confirm-before -p "normal_key: #{normal_key}, assist_key: #{assist_key}, unbind_assist_on_prefix already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		#   %else #   } {
		#       %hidden unbind_assist_on_prefix="
		#       unbind -T prefix '$assist_key'
		#       "
		#   %endif #   }
		%else
			display -p "\$prefix_prefix not defined: $prefix_prefix"
			confirm-before -p "normal_key: #{normal_key}, assist_key: #{assist_key}, \$prefix_prefix not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%endif

		%if "#{prefix_root}"
			%if "#{assist_on_root}" #   if-shell -F '#{assist_on_root}' {
				display -p "[2404] [error] assist_on_root already defined: #{assist_on_root}"
				confirm-before -p "normal_key: #{normal_key}, assist_key: #{assist_key}, assist_on_root already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
			%else #   } {
				%if "#{==:#{normal_key},Escape}" #   #00AAAA
					%hidden    assist_on_root="$prefix_root"
					setenv -gh assist_on_root "$prefix_root"
				#   %hidden assist_on_root_nvim="$prefix_root"
					display -p "[2409] assist_on_root   <= prefix_root"
					%hidden    bind_assist_on_root="
					  bind -T root '$assist_key' \"$prefix_root\"
					"
					setenv -gh bind_assist_on_root "
					  bind -T root '$assist_key' \"$prefix_root\"
					"
				%endif
			%endif #   }
			%if "#{assist_on_normal}" #   if-shell -F '#{assist_on_normal}' {
				display -p "[2415] [error] assist_on_normal already defined: #{assist_on_normal}"
				confirm-before -p "normal_key: #{normal_key}, assist_key: #{assist_key}, assist_on_normal already defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
			%else #   } {
			#   %hidden assist_on_normal_impl="$prefix_root"
				%hidden    assist_on_normal="$prefix_root"
				setenv -gh assist_on_normal "$prefix_root"
			#   %hidden assist_on_normal="send-keys ESCAPE SETQUIT"
			%endif #   }
		%else
			display -p "\$prefix_root not defined: $prefix_root"
			confirm-before -p "normal_key: #{normal_key}, assist_key: #{assist_key}, \$prefix_root not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%endif

	%else  #   "#{assist_key}"
		%hidden     bind_assist_on_prefix=""
		setenv -ghu bind_assist_on_prefix
		%hidden     bind_assist_on_root=""
		setenv -ghu bind_assist_on_root
		%hidden     assist_on_root=""
		setenv -ghu assist_on_root
		%hidden     assist_on_prefix=""
		setenv -ghu assist_on_prefix

	%endif #   "#{assist_key}"




#   }
	#   %endif #   "#{==:#{normal_key},Escape}" #   #00AAAA
%endif #   "#{||:#{==:#{prefix_key},Escape},#{==:#{normal_key},Escape}}"

%if "#{==:#{normal_enter},#{assist_on_root}}"
	display -p "[2449] assist_on_root   == normal_enter"
	display -p "[2450] assist_on_root   != prefix_root"
%elif "#{==:#{prefix_root},#{assist_on_root}}"
	display -p "[2452] assist_on_root   == prefix_root"
	display -p "[2453] assist_on_root   != normal_enter"
#   %elif "#{==:send-keys ESCAPE SPACE N,#{assist_on_root}}"
#       display -p "[2088] assist_on_root   == send-keys ESCAPE SPACE N"
%endif

%if "#{==:#{normal_enter},#{assist_on_prefix}}"
	display -p "[2459] assist_on_prefix == normal_enter"
	display -p "[2460] assist_on_prefix != prefix_prefix"
%elif "#{==:#{prefix_prefix},#{assist_on_prefix}}"
	display -p "[2462] assist_on_prefix == prefix_prefix"
	display -p "[2463] assist_on_prefix != normal_enter"
%endif

%if "#{==:#{prefix_root},#{escape_on_root}}"
	display -p "[2467] escape_on_root   == prefix_root"
	display -p "[2468] escape_on_root   != normal_enter"
%elif "#{==:#{normal_enter},#{escape_on_root}}"
	display -p "[2470] escape_on_root   == normal_enter"
	display -p "[2471] escape_on_root   != prefix_root"
#   %elif "#{==:send-keys ESCAPE SPACE N,#{escape_on_root}}"
#       display -p "[2088] escape_on_root   == send-keys ESCAPE SPACE N"
%endif

%if "#{==:#{prefix_prefix},#{escape_on_prefix}}"
	display -p "[2477] escape_on_prefix == prefix_prefix"
	display -p "[2478] escape_on_prefix != normal_enter"
%elif "#{==:#{normal_enter},#{escape_on_prefix}}"
	display -p "[2480] escape_on_prefix == normal_enter"
	display -p "[2481] escape_on_prefix != prefix_prefix"
%endif


	%if "#{alias_index_09}"
		display -p "Occupied \$alias_index_09: $alias_index_09"
		confirm-before -p "kill-server ? (y/n)" kill-server
	%else
		%hidden alias_index_09=9
			set -s  command-alias[$alias_index_09] assist_on_prefix="$assist_on_prefix"
			setenv -gh assist_on_prefix_alias_name "assist_on_prefix" #   Decoupling from the editor
		setenv -ghu alias_index_09
	%endif

	%if "#{alias_index_10}"
		display -p "Occupied \$alias_index_10: $alias_index_10"
		confirm-before -p "kill-server ? (y/n)" kill-server
	%else
#   #   %hidden alias_index="$alias_index + 1" #   got string '0 + 1'
#   #   run 'index=$(\tmux showenv -gh alias_index | awk -F = "{print \$2}"); : $((index += 1)); tmux setenv -gh alias_index $index;'
#   #   run 'index=$(\tmux display -p "#{alias_index}"); : $((index += 1)); tmux setenv -gh "alias_index" "$index"; \
#   #   tmux set -s  command-alias[#{alias_index}] bind_prefix_on_root=" \
#   #   bind -T root \"#{escape_key}\" \"#{prefix_root}\" \
#   #   "'
#   Diagram of the relationship between primary key and auxiliary key combination
#                           [Neovim/Terminal](mode_toggle)
#                             /       \
#                       Escape        Assist
#   prefix-mode <--  [prefix_key]  ]prefix_key[ <-- "#{==:#{normal_key},Escape}"
#                                \/
#                                /\
#     copy-mode <--  ]normal_key[  [normal_key] <-- "#{==:#{prefix_key},Escape}"
#   normal_on_root_nvim_slot #   point to $normal_enter
#   bind_prefix_on_root      #   point to $prefix_root

		%hidden alias_index_10=10
		#   Escape -> prefix-mode -> assist_key -> copy-mode
		%if   "#{==:#{prefix_key},Escape}"
			set -s  command-alias[$alias_index_10] bind_prefix_on_root="$bind_escape_on_root" #   point to $prefix_root
			#   %hidden    prefix_on_root_alias_name="bind_prefix_on_root" #   Decoupling from the editor
			#   setenv -gh prefix_on_root_alias_name "$prefix_on_root_alias_name" #   Decoupling from the editor
		#   Escape -> copy-mode   -> assist_key -> prefix-mode
		%elif "#{==:#{normal_key},Escape}" #   #00AAAA
			set -s  command-alias[$alias_index_10] bind_prefix_on_root="$bind_assist_on_root" #   point to $prefix_root
			#   %hidden    prefix_on_root_alias_name="bind_prefix_on_root" #   Decoupling from the editor
			#   setenv -gh prefix_on_root_alias_name "$prefix_on_root_alias_name" #   Decoupling from the editor

		%endif

		setenv -ghu alias_index_10
	%endif


	%if "#{alias_index_11}"
		display -p "Occupied \$alias_index_11: $alias_index_11"
		confirm-before -p "kill-server ? (y/n)" kill-server
	%else
		%hidden alias_index_11=11

		%if   "#{==:#{prefix_key},Escape}" #   #AA0000
			%if "#{==:#{prefix_prefix},#{escape_on_prefix}}"

			%else
				display -p "[2575] [error] escape_on_prefix != prefix_prefix"
				%if "#{prefix_prefix}"

				%else
					display -p "[2579] prefix_prefix: #{prefix_prefix}"
				%endif
				%if "#{escape_on_prefix}"

				%else
					display -p "[2584] escape_on_prefix: #{escape_on_prefix}"
				%endif
			%endif
		%elif "#{==:#{normal_key},Escape}" #   #00AAAA
			%if "#{==:#{normal_enter},#{escape_on_prefix}}"

			%else
				display -p "[2591] [error] escape_on_prefix != normal_enter"
				%if "#{normal_enter}"

				%else
					display -p "[2595] normal_enter: #{normal_enter}"
				%endif
				%if #{escape_on_prefix}

				%else
					display -p "[2600] escape_on_prefix: #{escape_on_prefix}"
				%endif
			%endif
		%endif #   "#{||:#{==:#{prefix_key},Escape},#{==:#{normal_key},Escape}}"

			set -s  command-alias[$alias_index_11] escape_on_prefix="$escape_on_prefix"
			setenv -gh escape_on_prefix_alias_name "escape_on_prefix" #   Decoupling from the editor

		setenv -ghu alias_index_11
	%endif




	%hidden mode_toggle="
				bind -T copy-mode-vi '$escape_key' \"$escape_on_normal\"
				   bind -T copy-mode '$escape_key' \"$escape_on_normal\"
		if-shell -F '#{@is-vim}' {
					#   bind -T root '$escape_key' \"$prefix_root\"
			#   $bind_escape_on_root
			#   Duplicated with main source process and will enter a overlay mode ?
			#   When the "overlay mode" is not by design, something messed up
			#           bind -T root '$escape_key' \"$escape_on_root\"
			if-shell -F '#{@is-insert}' {
					  unbind -T root '$escape_key'
			#   $unbind_escape_on_root

					  unbind -T root '$assist_key'
					unbind -T prefix '$assist_key'
			#   $unbind_assist_on_root
			#   $unbind_assist_on_prefix
			} {
					#   bind -T root '$normal_key' \"$normal_enter\"
						bind -T root '$escape_key' \"$escape_on_root\"

			#   Works
			#   $bind_assist_on_root
			#   Works
			#   bind -T root '$assist_key' \"$assist_on_root\"
			#   Works
						bind -T root '$assist_key' \"$assist_on_root\"

			#   bind -T root '$assist_key' run '\tmux showenv -gh \"bind_assist_on_root\" | awk -F = \"\$2 = \$2 {print \$2}\"'
			#   bind -T root '$assist_key' run '\tmux display -p  \"#{bind_assist_on_root}\"'
			#   bind -T root '$assist_key' run '\tmux $(\tmux display -p \"#{assist_on_root}\")'
				#
				#   $prefix_prefix # syntax error
			#   \"$bind_assist_on_prefix\" # Won't work
			#   $bind_assist_on_prefix
					  bind -T prefix '$assist_key' \"$assist_on_prefix\"

			#   bind -T copy-mode-vi '$assist_key' \"$assist_on_normal\" #   'jump to backward' error
			#      bind -T copy-mode '$assist_key' \"$assist_on_normal\" #   'jump to backward' error

				bind -T copy-mode-vi '$assist_key' \"$assist_on_normal\"
				   bind -T copy-mode '$assist_key' \"$assist_on_normal\"
			}
		} {
						bind -T root '$escape_key' \"$escape_on_root\"
		#   if-shell -F "#{||:#{pane_in_mode},#{@is-vim}}" {
			if-shell -F '#{pane_in_mode}' {
			#   bind   -T prefix "$prefix_key" $prefix_prefix

			#   bind -T root '$normal_key' \"$normal_enter\"
			#   $bind_assist_on_root
						bind -T root '$assist_key' \"$assist_on_root\"

				#   run -b "echo \"$(\tmux list-keys -T root | awk -v key=\"$prefix_key\" \"\$4 = key {print}\")\" > /tmp/$(id -u)/root.conf"
			#   $prefix_prefix # syntax error
			#   $bind_assist_on_prefix
					  bind -T prefix '$assist_key' \"$assist_on_prefix\"
			#   select-pane -P "bg=#{prefix_background}"
			#   $color_normal
				bind -T copy-mode-vi '$assist_key' \"$assist_on_normal\"
				   bind -T copy-mode '$assist_key' \"$assist_on_normal\"
			} {
			#   unbind -T prefix "$prefix_key"

					  unbind -T root '$assist_key'
					unbind -T prefix '$assist_key'
			#   $unbind_assist_on_root
			#   $unbind_assist_on_prefix

			#   Toggle binding root on prefix == Escape, you can not quit copy-mode to root mode
			#   -- there will be always a prefix mode there waiting for you
			#   bind   -T root "$normal_key" $normal_enter
			#   $color_terminal
			}
		}
		#   if-shell -F "#{client_prefix}" {
		#     select-pane -P "bg=#{prefix_background}"
		#   } {
		#     select-pane -P bg=terminal
		#   }
		#   set -pF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"

	#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}" #   after-set-option recursive ?

		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}"
		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}" -t $TMUX_PANE
		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}" -t "#{pane_id}"
		#   display-panes -N
	"

	%if "#{alias_index_15}"
		display -p "Occupied \$alias_index_15: $alias_index_15"
		confirm-before -p "kill-server ? (y/n)" kill-server
	%else
		%hidden alias_index_15=15
		%if "#{mode_toggle}"
			set -s  command-alias[$alias_index_15] mode_toggle="$mode_toggle"
		%else
			display -p "\$mode_toggle not defined: $mode_toggle"
			confirm-before -p "\$mode_toggle not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
		%endif
		setenv -ghu alias_index_15
	%endif

#   tmux show-hooks -g pane-mode-changed
#   set-hook -g  pane-mode-changed[0] 'set -g #{?pane_in_mode, #[fg=default#,bg=#{prefix_background}, #[fg=default#,bg=terminal}#W'
#   set-hook -g  pane-mode-changed[0] 'run "[ \"$(\tmux display -p \"#{pane_in_mode}\")\" -ne \"0\" ] && tmux select-pane -P \"fg=default,bg=#{normal_background}\" || tmux select-pane -P fg=default,bg=terminal"'
#   set-hook -g  pane-mode-changed[0] 'run "[ \"$(\tmux display -p \"#{pane_in_mode}\")\" -eq 1 ] &&

#   set-hook -g  pane-mode-changed[1] 'run "[ \"$(\tmux display -p \"#{client_prefix}\")\" -eq 1 ] &&
#   tmux select-pane -P \"fg=default,bg=#{normal_background}\" ||
#   tmux select-pane -P fg=default,bg=terminal"'
#   https://github.com/tmux/tmux/issues/634
#   set-hook -g  pane-mode-changed { if-shell -F "#{pane_in_mode}" "selectp -P bg=blue" "selectp -P default" }
#   set-hook -g  pane-mode-changed \
#   '#{?pane_in_mode, \
#   select-pane -P "fg=default,bg=#{prefix_background}", \
#   select-pane -P fg=default,bg=terminal}#W'

#   set-hook -g  pane-mode-changed \
#   'run "[ \"$(\tmux display -p \"#{pane_in_mode}\")\" -ne \"0\" ] && \
#   tmux set-option -wp pane-border-status off || \
#   tmux set-option -wp pane-border-status bottom"'

#   'run "[ \"$(\tmux display -p \"#{pane_in_mode}\")\" -eq \"0\" ] && \
#   tmux set-option -wp pane-border-status bottom || \
#   tmux set-option -wp pane-border-status off"'

#   set-hook -g  pane-mode-changed '#{?pane_in_mode, \
#   set-option -g pane-border-status off, \
#   set-option -g pane-border-status bottom}'

#   Change mode after changed mode is recursive #   $mode_toggle might do it
#   set-hook -g pane-mode-changed[0] "
#   #   display 'pane-mode-changed'
#   if-shell -F '#{mode_monitor}' {
#   Because the prefix color is needed to display, copy-mode color should not occupy all the places
#   #   $color_toggle
#       $mode_toggle
#   }
#   "

	set-hook -gu after-copy-mode
#   set-hook -g  after-copy-mode[0] "
#   $color_normal
#   "

	%hidden vim_rescue="
	#   if-shell -F '#{@is-insert}' {
	#   #   display -p "@is-insert : #{@is-insert}" #   this will print to editor when insert
	#   #   run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; [ ! -s \"/tmp/$(id -u)/tmux/insert.log\" ] || : > /tmp/$(id -u)/tmux/insert.log'
	#       run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; echo \"#{@is-insert}\" >> /tmp/$(id -u)/tmux/insert.log'
	#   #   tail -f -n 10 /tmp$(id -u)/tmux/insert.log
	#       run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; : > /tmp/$(id -u)/tmux/binding.log'
	#   } {
	#       The following line is a heavy operation
	#       run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; echo \"binding\" >> /tmp/$(id -u)/tmux/binding.log'
	#   #   if-shell "[ -z \"$(\tmux list-keys -T root | awk -v key=\"$(\tmux showenv -gh \"prefix_key\" | awk -F = '$2 = $2 {print $2}')\" '$4 == key {print}')\" ]" {
	#       if-shell '[ -z \"$(\tmux list-keys -T root | awk -v key=\\"$prefix_key" \"\$4 == key {print}\" 2> /dev/null)\" ]' {
			#   bind -T root \"$prefix_key\" \"$prefix_root\"
			#   $bind_escape_on_root
			  bind -T root '$escape_key' \"$escape_on_root\"
	#       }
	#   #   if-shell "[ -z \"$(\tmux list-keys -T prefix | awk -v key=\"$(\tmux showenv -gh \"prefix_key\" | awk -F = '$2 = $2 {print $2}')\" '$4 == key {print}')\" ]" {
	#       if-shell '[ -z \"$(\tmux list-keys -T prefix | awk -v key=\\"$prefix_key" \"\$4 == key {print}\" 2> /dev/null)\" ]' {
			#   bind -T prefix \"$prefix_key\" \"$prefix_prefix\"
			#   $bind_escape_on_prefix
			bind -T prefix '$escape_key' \"$escape_on_prefix\"
	#       }
	#   #   if-shell "[ -z \"$(\tmux list-keys -T root | awk -v key=\"$(\tmux showenv -gh \"normal_key\" | awk -F = '$2 = $2 {print $2}')\" '$4 == key {print}')\" ]" {
	#       if-shell '[ -z \"$(\tmux list-keys -T root | awk -v key=\\"$normal_key" \"\$4 == key {print}\" 2> /dev/null)\" ]' {
			#   bind -T root \"$normal_key\" \"$normal_enter\"
			#   $bind_assist_on_root
			  bind -T root '$assist_key' \"$assist_on_root\"
	#       }
	#   }
	"

	set-hook -gu pane-focus-out
	set-hook -g  pane-focus-out[0] "
	#   run '\tmux color_terminal'
	$color_toggle #   Focus will be locked in terminal pane if using select-pane -P
	$mode_toggle
#   if-shell -F '#{mode_monitor}' {
#   #   $escape_on_prefix #   Focus will be locked in terminal pane if using select-pane -P
#   #   $color_terminal   #   Focus will be locked in terminal pane if using select-pane -P
#       switch-client -T root
#       if-shell -F '#{@is-vim}' {
#           $vim_restore #   Do it in editor
#       }
#   Won't affect copy-mode and prefix mode is not block
#       set -p window-style 'fg=default,bg=terminal'
#   }
	"

	set-hook -gu pane-focus-in
#   set-hook -g  pane-focus-in[0] 'run "[ \"$(\tmux display -p \"#{pane_in_mode}\")\" -eq 1 ] &&
#   tmux select-pane -P \"fg=default,bg=#{normal_background}\" ||
#   tmux select-pane -P fg=default,bg=terminal"'

	#   Needs double quotes here
	set-hook -g  pane-focus-in[0] "
		$color_toggle
	#   if-shell -F '#{@is-vim}' {
	#       if-shell -F '#{@is-insert}' {
	#           unbind -T root \"$prefix_key\"
	#       } {
	#           $vim_rescue
	#       #   $prefix_prefix
	#       }
	#   } {
	#       %if   \"#{==:#{prefix_key},Escape}\"
	#           bind -T root \"$prefix_key\" \"$prefix_root\"
	#           %if   \"#{normal_key}\"
	#           unbind -T root \"$normal_key\"
	#           %endif
	#       %elif \"#{==:#{normal_key},Escape}\"
	#           bind -T root \"$normal_key\" \"$normal_enter\"
	#           %if   \"#{prefix_key}\"
	#           unbind -T root \"$prefix_key\"
	#           %endif
	#       %endif
	#   }
		$mode_toggle # syntx error
		#   select-pane -t '#{pane_id}' -P bg=terminal
	if -F '#{@is-vim}' {} {
		if-shell -F '#{client_prefix}' {
			$color_prefix
		} {
			if-shell -F '#{pane_in_mode}' {} {
				$escape_on_root
			}
		}
	}
#   Why do not you need this? -- When you are copying form one pane to one another, reset the mode is a destruction of the original state
#   if-shell -F '#{delegate_wincmd}' {
#       if-shell -F '#{client_prefix}' {
#           $color_prefix
#       } {
#           $escape_on_root
#       }
#   } {
#   #   $color_prefix
#       switch-client -T prefix
#   }
	"

	set-hook -gu after-set-option
#   Recursively calling it self -- select-pane, set window-active-style, etc.
#   set-hook -g  after-set-option[0] "set -gF window-active-style \"bg=#{?client_prefix,$prefix_background,terminal}\""
#   Enable this, the noevim can not enter command mode and every hljk refresh the screen and inside prefix mode sometime
#   set-hook -g  after-set-option[0] "
#       if-shell -F '#{@is-vim}' {
#           if-shell -F '#{@is-insert}' {
#           #   unbind -T   root "$prefix_key"
#           #   unbind -T prefix "$prefix_key"
#               $unbind_escape_on_root
#           #   unbind -T   root "$normal_key"
#               $unbind_assist_on_root
#           } {

#               if-shell -F '#{rescue}' {
#                   #   To apply bindings in variables, you need to change from {} to "" for the after-set-option[0] enquoting
#                   #   But it is recognized as a recursively calling
#                   #   $vim_rescue #   Heavy operation -- recursively calling
#               }
#           }
#       }
#   "


#   set-hook -g pane-mode-changed[1] 'set -gF message-style "fg=#{?#{==:#{pane_mode},copy-mode},green#,blink,blue},bg=#{?#{==:#{pane_mode},copy-mode},white,white}"' # no spaces permitted before red and white

#   set-hook -g pane-mode-changed[1] { #   after-set-option recursive ?
		set -gF message-style       "fg=#{?pane_in_mode,white,black},bg=#{?pane_in_mode,black,white}"
		set -gF window-active-style "bg=#{?pane_in_mode,$normal_background,#{?client_prefix,$prefix_background,terminal}}"
#   }   #   no spaces permitted before red and white

	#   https://superuser.com/questions/1050485/can-tmux-highlight-change-color-on-control-key-send-prefix-event
	#   set -gF window-active-style '#{?client_prefix,#[fg=default#,bg=$prefix_background#,reverse],#[fg=default#,bg=terminal]}'
	#   set -gF window-active-style 'fg=#{?client_prefix,default,default},bg=#{?client_prefix,$prefix_background#,reverse,terminal}'

	#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"

	#   set-hook -g  pane-mode-changed[2] 'set -gF window-active-style "fg=#{?client_prefix,default,default},bg=#{?client_prefix,colour003,terminal}"'

	#   set-hook -g  pane-mode-changed[2] {
	#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"
	#   #   #   select-pane -t "{marked}" -P bg=terminal
	#   #   #   if-shell -F '#{pane_id}' {
	#   #       display -N "active_pane = #{active_pane}"
	#   #   #   select-pane -t "#{active_pane}" -P bg=terminal
	#   #       select-pane -t "#{active_pane}"
	#   #   #   select-pane -t '#{pane_id}'
	#   #       select-pane -P bg=terminal
	#   #   #   } {
	#   #   #   select-pane -P bg=terminal
	#   #   #   }
	#   }

#   set-hook -g pane-mode-changed[3] 'select-pane -P bg=terminal'

#   set-hook -gu after-display-panes
#   set-hook -g  after-display-panes[0] '
#   #   select-pane -t "{marked}" -P bg=terminal
#   if-shell -F "#{$active_pane}" {
#   #   select-pane -t "$active_pane" -P bg=terminal
#       select-pane -t "$active_pane"
#       select-pane -P bg=terminal
#   } {
#       select-pane -P bg=terminal
#   }
#   switch-client -T root
#   '

#   set-hook -gu after-display-message
#   set-hook -g  after-display-message[0] {
#   #   switch-client -T root
#   #   if-shell -F "#{$active_pane}" {
#   #       select-pane -P bg=terminal -t $active_pane
#   #       select-pane -t $active_pane
#   #       select-pane -t "{marked}" -P bg=terminal
#   #       select-pane -t "$active_pane" -P bg=terminal
#   #       select-pane -t '#{pane_id}' -P bg=terminal
#           select-pane -P bg=terminal
#   #       set -p window-active-style bg=terminal
#   #       set -gF window-active-style bg=terminal
#   #   } {
#   3       select-pane -P bg=terminal
#   3   }
#   }

	set-hook -gu after-select-pane
#   set-hook -g  after-select-pane[0] "
#   #   select-pane -P bg=terminal
#   $mode_toggle
#   $color_toggle
#   Nvim windows won't get the help
#   if-shell -F '#{client_prefix}' {} {
#       $color_prefix
#       switch-client -T prefix
#   }
#   "

	set-hook -gu after-send-keys
	#   Recursive calling
#   set-hook -g  after-send-keys[0] "
#   if-shell -F '#{mode_monitor}' {
#   #   display 'after-send-keys[0]' #   copy-mode won't trigger this hook
#   #   if-shell -F "#{$active_pane}" {
#   #   #   select-pane -t "{marked}" -P bg=terminal
#   #   #   select-pane -t "$active_pane" -P bg=terminal
#   #       select-pane -t "$active_pane"
#   #       select-pane -P bg=terminal
#   #   } {
#   #       select-pane -P bg=terminal
#   #   }
#   $color_toggle #   Will lock copy-mode !
#   }
#   "

	set-hook -gu after-refresh-client
	set-hook -g  after-refresh-client[0] "
	#   if-shell -F "#{$active_pane}" {
	#   #   select-pane -t "{marked}" -P bg=terminal
	#   #   select-pane -t "$active_pane" -P bg=terminal
	#       select-pane -t "$active_pane"
	#       select-pane -P bg=terminal
	#   } {
	#       select-pane -P bg=terminal
	#   }
	#   Make the cursor move with a dragging feel
	#   if-shell -F '#{@is-vim}' {
	#       $vim_rescue
	#   } {
	#       run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; : > /tmp/$(id -u)/tmux/binding.log'
	#   }
	#   if-shell -F '#{pane_in_mode}' {
	#       select-pane -P 'bg=#{normal_background}'
	#   } {
	#       if-shell -F '#{client_prefix}' {
	#           select-pane -P 'bg=#{prefix_background}'
	#       } {
	#           select-pane -P bg=terminal
	#       }
	#   }
	$mode_toggle
#   $color_toggle #   Will lock copy-mode !
	"

#   set-hook -gu alert-silence
#   set-hook -g  alert-silence[0] '
#   select-pane -P bg=terminal
#   '

#   set-hook -g  after-queue[1] "
#   #   select-pane -P bg=terminal
#   #   set -gF window-active-style bg=terminal
#   $mode_toggle
#   "

#   Server side
#   set-hook -gu after-show-messages
#   set-hook -g  after-show-messages[0] '
#   if-shell -F "#{$active_pane}" {
#   #   select-pane -t "{marked}" -P bg=terminal
#   #   select-pane -t "$active_pane" -P bg=terminal
#       select-pane -t "$active_pane"
#       select-pane -P bg=terminal
#   } {
#       select-pane -P bg=terminal
#   }
#   '

#   set-hook -gu window-pane-changed
#   set-hook -g  window-pane-changed[0] {
#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"
#   #   if-shell -F '#{pane_id}' {
#   #       select-pane -t "{marked}" -P bg=terminal
#           display -N "active_pane = #{active_pane}"
#   #       select-pane -t "#{active_pane}" -P bg=terminal
#           select-pane -t "#{active_pane}"
#   #       select-pane -t '#{pane_id}'
#           select-pane -P bg=terminal
#       #   } {
#       #   select-pane -P bg=terminal
#       #   }
#   }

#   set-hook -gu continue
#   set-hook -g  continue[0] '
#   select-pane -P bg=terminal
#   '

#   set-hook -gu after-copy-mode
#   set-hook -g  after-copy-mode[0] "
#   switch-client -T root
#   run '\tmux color_terminal'
#   "
#
#
#
#
#
#
#
#

#   set -su command-alias

%if "#{alias_index_00}"
	display -p "Occupied \$alias_index_00: $alias_index_00"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_00=0
	%if "#{prefix_root}"
		#   tmux show -g command-alias
		#   tmux display -p "#{command-alias[0]}"
		set -s  command-alias[$alias_index_00] prefix_root="$prefix_root"
	%else
		display -p "\$prefix_root not defined: $prefix_root"
		confirm-before -p "alias_index_00, \$prefix_root not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_00
%endif


%if "#{alias_index_08}"
	display -p "Occupied \$alias_index_08: $alias_index_08"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else

	%hidden alias_index_08=8
		set -s  command-alias[$alias_index_08] assist_on_root="$assist_on_root"
		%hidden    assist_on_root_alias_name="assist_on_root" #   Decoupling from the editor
		setenv -gh assist_on_root_alias_name "$assist_on_root_alias_name" #   Decoupling from the editor
	setenv -ghu alias_index_08
%endif


%if "#{alias_index_01}"
	display -p "Occupied \$alias_index_01: $alias_index_01"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else

	%hidden alias_index_01=01
	%if "#{normal_enter}"
	#   set -s  command-alias[$alias_index_01] assist_on_root_nvim="$assist_on_root_nvim"
		set -s  command-alias[$alias_index_01] normal_on_root_nvim_slot="$normal_on_root_nvim_slot"
		#   %if "#{==:#{prefix_key},Escape}" #   #AA0000

		#   %endif
	%else
		display -p "\$normal_enter not defined: $normal_enter"
		confirm-before -p "kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_01
%endif

#   %if "#{alias_index_05}"
#       display -p "Occupied \$alias_index_05: $alias_index_05"
#       confirm-before -p "kill-server ? (y/n)" kill-server
#   %else
#       %hidden alias_index_05=5
#
#       %if   "#{==:#{prefix_key},Escape}" #   #AA0000
#           %if "#{assist_on_root}" #   signal
#               set -s  command-alias[$alias_index_05] normal_on_root_nvim_slot="$normal_on_root_nvim_slot"
#           #   set -s  command-alias[$alias_index_05] normal_root_bind="
#           #       bind -T root '$assist_key' \"$assist_on_root\"
#           #   "
#           %else
#               display -p "\$assist_on_root not defined: $assist_on_root"
#               confirm-before -p "assist_key: #{assist_key}, alias_index_05, \$assist_on_root not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
#           %endif
#       %elif "#{==:#{normal_key},Escape}" #   #00AAAA
#           %if "#{escape_on_root}" #   signal
#               set -s  command-alias[$alias_index_05] normal_on_root_nvim_slot="$normal_on_root_nvim_slot"
#           #   set -s  command-alias[$alias_index_05] normal_root_bind="
#           #       bind -T root '$escape_key' \"$escape_on_root\"
#           #   "
#           %else
#               display -p "\$escape_on_root not defined: $escape_on_root"
#               confirm-before -p "assist_key: #{assist_key}, alias_index_05, \$escape_on_root not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
#           %endif
#       %endif
#       setenv -ghu alias_index_05
#   %endif
#
#   %if "#{alias_index_16}"
#       display -p "Occupied \$alias_index_16: $alias_index_16"
#       confirm-before -p "kill-server ? (y/n)" kill-server
#   %else
#       %hidden alias_index_16=16
#   #   %if "#{normal_enter}"
#       #   set -s  command-alias[$alias_index_16] escape_on_root_nvim="$escape_on_root_nvim"
#           set -s  command-alias[$alias_index_16] normal_on_root_nvim_slot="$normal_on_root_nvim_slot"
#           %if "#{==:#{normal_key},Escape}" #   #00AAAA
#
#           %endif
#   #   %else
#   #       display -p "\$normal_enter not defined: $normal_enter"
#   #       confirm-before -p "kill-session #{session_id} ? (y/n)" kill-session #   no current client
#   #   %endif
#       setenv -ghu alias_index_16
#   %endif


%if "#{alias_index_02}"
	display -p "Occupied \$alias_index_02: $alias_index_02"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_02=2
	%if "#{prefix_prefix}"
		set -s  command-alias[$alias_index_02] prefix_prefix="$prefix_prefix"
	%else
		display -p "\$prefix_prefix not defined: $prefix_prefix"
		confirm-before -p "alias_index_02, \$prefix_prefix not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_02
%endif

%if "#{alias_index_03}"
	display -p "Occupied \$alias_index_03: $alias_index_03"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else

	%hidden alias_index_03=03
#   %if "#{normal_enter}"
		set -s  command-alias[$alias_index_03] assist_on_normal="$assist_on_normal"
		setenv -gh assist_on_normal_alias_name "assist_on_normal" #   Decoupling from the editor
#   %else
#       display -p "\$normal_enter not defined: $normal_enter"
#       confirm-before -p "kill-session #{session_id} ? (y/n)" kill-session #   no current client
#   %endif
	setenv -ghu alias_index_03
%endif


#   %if "#{alias_index_03}"
#       display -p "Occupied \$alias_index_03: $alias_index_03"
#       confirm-before -p "kill-server ? (y/n)" kill-server
#   %else
#       %hidden alias_index_03=3
#       %if "#{prefix_prefix}"
#           set -s  command-alias[$alias_index_03] prefix_prefix_bind="
#           bind -T prefix '$escape_key' \"$prefix_prefix\"
#           "
#       %else
#           display -p "\$prefix_prefix not defined: $prefix_prefix"
#   #   confirm-before -p "kill-server ? (y/n)" kill-server #   no current client
#           confirm-before -p "alias_index_03, \$prefix_prefix not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
#       %endif
#       setenv -ghu alias_index_03
#   %endif

	#   tmux bind -T root Escape "run \$prefix_root_hidden"
	#   tmux run "#{prefix_root_hidden}"
	%hidden prefix_root_hidden="
#   bind -T root Escape display -p 'test'
	tmux display -p '$TMUX_PANE'
	tmux select-pane -t '$TMUX_PANE'
	"

	#   tmux run -C "#{prefix_hidden}"
	%hidden prefix_hidden="
	display -p '$TMUX_PANE'
	select-pane -t '$TMUX_PANE'
	"

%if    "#{assist_key}"

%if "#{alias_index_04}"
	display -p "Occupied \$alias_index_04: $alias_index_04"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_04=4
	%if "#{normal_enter}"
		set -s  command-alias[$alias_index_04] normal_enter="$normal_enter"
	%else
		display -p "\$normal_enter not defined: $normal_enter"
		confirm-before -p "assist_key: #{assist_key}, alias_index_04, \$normal_enter not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_04
%endif

%endif #   "#{assist_key}"

#   set -s  command-alias[6] color_terminal="
#   select-pane -P bg=terminal
#   "

%if "#{alias_index_06}"
	display -p "Occupied \$alias_index_06: $alias_index_06"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_06=6
	%if "#{bind_escape_on_root}"
		set -s  command-alias[$alias_index_06] bind_escape_on_root="$bind_escape_on_root"
	%else
		display -p "\$bind_escape_on_root not defined: $bind_escape_on_root"
		confirm-before -p "alias_index_06, \$bind_escape_on_root not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_06
%endif

%if "#{alias_index_07}"
	display -p "Occupied \$alias_index_07: $alias_index_07"
	confirm-before -p "kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_07=7
	%if "#{bind_escape_on_prefix}"
		set -s  command-alias[$alias_index_07] bind_escape_on_prefix="$bind_escape_on_prefix"
	%else
		display -p "\$bind_escape_on_prefix not defined: $bind_escape_on_prefix"
		confirm-before -p "alias_index_07, \$bind_escape_on_prefix not defined. kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_07
%endif

#   When suing backtick/backquote as a tmux prefix/assist key,
#   `Esc, 'Esc will inftroduce send-keys ESCAPE something to editor and insert to the current buffer
#   mode_toggle avoids the undefined behaviors
#   Must be done
	run -C mode_toggle
#   run -C "$mode_toggle" #   "Not in a mode" error

#   bind_escape_on_root #   unknown command
#   run -C "bind_escape_on_prefix"
#   run -C "bind_escape_on_root" #   bind -T root "$escape_key" "$prefix_root"

#   bind -T prefix "$escape_key" "$escape_on_prefix"
#     bind -T root "$escape_key" "$escape_on_root"

#   The following codes are just some tests
#   %if   "#{==:#{prefix_key},Escape}" #   #AA0000
#   #   Works
#       bind -T root "$escape_key" "$prefix_root" #   $escape_on_root == $prefix_root
#       #   Partially working ?
#       #   bind -T root "$escape_key" run -C 'display -p "#{prefix_root}"'
#   #   Works
#       #   bind -T root "$escape_key" run -C '#{prefix_root}'
#       #   Does not work
#       #   bind -T root "$escape_key" "#{prefix_root}"
#   #   Works out side the tmux configuration files -- no command-aliases needed
#       #   \tmux bind -T root "$(\tmux display -p '#{escape_key}')" "$(\tmux display -p '#{prefix_root}')"
#       #   But run it here does not work: '#{pane_in_mode}' evaluated to ''
#       #   run '\tmux bind -T root "$(\tmux display -p "#{escape_key}")" "$(\tmux display -p "#{prefix_root}")"'
#   #   Works
#       bind -T prefix "$escape_key" "$prefix_prefix" #   $escape_on_prefix == $prefix_prefix
#       #   Partially working ?
#       #   bind -T prefix "$escape_key" run -C 'display -p "#{prefix_prefix}"'


#   %elif "#{==:#{normal_key},Escape}" #   #00AAAA
#   #   Works
#   #   bind -T root "$escape_key" "$normal_enter"
#       bind -T root "$escape_key" "$escape_on_root"
#       #   Partially working ?
#       #   bind -T root "$escape_key" run -C 'display -p "#{normal_enter}"'
#       #   bind -T root "$escape_key" run -C '#{normal_enter}'
#       #   bind -T root "$escape_key" run -C '#{escape_on_prefix}'
#   #   Works
#   #   bind -T prefix "$escape_key" "$normal_enter"
#       bind -T prefix "$escape_key" "$escape_on_prefix"
#       #   Partially working ?
#       #   bind -T prefix "$escape_key" run -C 'display -p "#{normal_enter}"'

#   %endif #   "#{||:#{==:#{prefix_key},Escape},#{==:#{normal_key},Escape}}"







