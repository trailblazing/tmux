#   if '[ -s "$XDG_CONFIG_HOME/tmux/header.conf" ]' \
#   {
#   %if "#{||:#{&&:#{escape_key},#{assist_key}},#{&&:#{!=:#{one_stage_policy},1},#{||:#{escape_key},#{assist_key}}}"
#   %if "#{one_stage_policy?#{&&:#{escape_key},#{assist_key}},#{||:#{escape_key},#{assist_key}}}"
#   %else
#   %if "#{#{==:#{one_stage_policy},1}?#{||:#{==:#{escape_key},},#{==:#{assist_key},}},#{&&:#{==:#{escape_key},},#{==:#{assist_key},}}}"
#   %if "#{should_include}"
	%if "#{&&:#{should_include},#{!=:#{header_loaded},1}}"
		source "$XDG_CONFIG_HOME/tmux/header.conf"
	%endif
#   } {
#       confirm-before -p "# [0012] $XDG_CONFIG_HOME/tmux/header.conf is not a valid file. Kill server ? (y/n)" kill-server
#   }

#   There are three modes for prefix/normal
#   1   one_stage_policy #   overlay mode is not considered when on
#   1.1 one_key_prefix mode                 (via prefix_enter)
#   1.2 C-w delegations                     (via prefix_enter)
#   2.  Navigateion and resize key bindings (via prefix_enter)
#   3   one_key_copy   mode                 (via normal_enter)

#   Purpose: Hanle the definition of key bindings and switch them easily
#   Stage one: Define the function/operations on a specific mode [prefix_quit/enter, normal_quit/enter]
#   Stage two: Define the binding right-hand-side (rhs) general names and composite them by policies
#   Stage three: Trigger a binding right-hand-side general name based on a specific scenario

%if "#{==:#{normal_key},#{prefix_key}}"
	#   How to revise the line numbers in [xxxx] ?
	#   $XDG_CONFIG_HOME/tmux/line-number $XDG_CONFIG_HOME/tmux/prefix.conf
		   display -p "# [0030] Invalid \$prefixx_key: $prefixx_key and \$normal_key: $normal_key"
	confirm-before -p "# [0031] Invalid \$prefixx_key: $prefixx_key and \$normal_key: $normal_key, and kill-session #{session_id} ? (y/n)" kill-session
#   detach
#   kill-session
%endif

#   MARK "overwritten 00"
%if   "#{==:#{prefix_key},Escape}" #   #AA0000
#   This line could be literal empty, just another newline at least (a place holder)
%elif "#{==:#{normal_key},Escape}" #   #00AAAA

%endif

	setenv -gh mode_monitor "on"

	#   %if "#{nesting_support}"
	#       %hidden mode_monitor="on"
	#       %hidden mode_monitor_on="
	#       %hidden mode_monitor='on'
	#       "
	#       %hidden mode_monitor_off="
	#       %hidden mode_monitor=
	#       "
	#   %else
	#       setenv -gh mode_monitor "on"
	#       setenv -gh mode_monitor_on "
	#       setenv -gh mode_monitor 'on'
	#       "
	#       setenv -gh mode_monitor_off "
	#       setenv -ghu mode_monitor
	#       "
	#   %endif

#   Do it in editor ?
	%hidden vim_restore="
#   if-shell -F '#{pane_in_mode}' {
#   #   run 'echo \">>>>vim_restore in mode\" >> $HOME/.vim.log'
#       if-shell -F '#{mode_monitor}' {
#           mode_monitor_original='on'
#       #   } {
#       #   mode_monitor=
#           setenv -ghu mode_monitor
#       }
#       send-keys -X cancel
#   #   https://vi.stackexchange.com/questions/42889/how-to-replace-esc-with-ctrl-c-completely
#   #   #{||:#{@is-insert},#{@is-float}} + send-keys C-c (without Escape before C-c) will bypass/clear all the following operations/settings
#   #   This operations mean binding/unbinding operations
#       if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
#           if-shell -F '#{@is-visual}' {} {
#           #   The following line will erase your file --  Dangerous
#           #   send-keys Escape C-c
#           #   send-keys -X C-c #   Escape
#               send-keys C-c #   Escape
#           }
#       }
#   #   if-shell -F '#{client_prefix}' {
#   #       send-keys Escape #   cancel the pending C-w
#   #   }
#   #   <Leader>S
#   #   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE S'
#   #   send-keys -X ESCAPE 'SPACE S'
#   #   send-keys -X M-F
#       send-keys M-F
#       run -C signal_root #   copy-mode
#       if-shell -F '#{mode_monitor_original}' {
#       #   run -C \"$mode_monitor_on\"
#           setenv -gh mode_monitor 'on'
#       #   mode_monitor='on'
#       #   if-shell -F '#{!=:#{nesting_support},1}' {
#       #       setenv -gh  mode_monitor 'on'
#       #   } {
#       #       setenv -gh  mode_monitor $mode_monitor
#       #   }
#       }
#   } {
		if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
			if-shell -F '#{@is-visual}' {} {
				send-keys C-c #   Escape #   send-keys might be blocked by mode changing ?
			}
		}
	#   if-shell -F '#{client_prefix}' {
	#       send-keys Escape #   cancel the pending C-w
	#   }
	#   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE S'
	#   send-keys ESCAPE 'SPACE S' #   send-keys might be blocked by mode changing
		send-keys M-F              #   send-keys might be blocked by mode changing
#   }
	if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
		if-shell -F '#{@is-visual}' {} {
			send-keys C-c #   Escape
		}
	}
	"
#   Do it in editor ?
	%hidden vim_reverse="
#   if-shell -F '#{pane_in_mode}' {
#   #   run 'echo \"<<<<vim_reverse in mode\" >> $HOME/.vim.log'
#       if-shell -F '#{mode_monitor}' {
#           mode_monitor_original='on'
#       #   } {
#       #   mode_monitor=
#           setenv -ghu mode_monitor
#       }
#       send-keys -X cancel
#       if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
#           if-shell -F '#{@is-visual}' {} {
#           #   send-keys -X C-c #   Escape
#               send-keys C-c #   Escape
#           }
#       }
#   #   <Leader>V
#   #   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE V'
#   #   send-keys -X ESCAPE 'SPACE V'
#   #   send-keys -X \"M-$prefix_key\"
#   #   send-keys -X \"M-K\"
#       send-keys \"M-K\"
#       run -C signal_root #   copy-mode
#       if '#{mode_monitor_original}' {
#           setenv -gh mode_monitor 'on'
#       #   mode_monitor='on'
#       #   if-shell -F '#{!=:#{nesting_support},1}' {
#       #       setenv -gh  mode_monitor 'on'
#       #   } {
#       #       setenv -gh  mode_monitor $mode_monitor
#       #   }
#       }
#   } {
		if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
			if-shell -F '#{@is-visual}' {} {
				send-keys C-c #   Escape #   send-keys might be blocked by mode changing ?
			}
		}
	#   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE V'
	#   send-keys ESCAPE 'SPACE V'  #   send-keys might be blocked by mode changing
	#   send-keys \"M-$prefix_key\"
		send-keys \"M-K\"
#   }
	if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
		if-shell -F '#{@is-visual}' {} {
			send-keys C-c #   Escape
		}
	}
	"

	%hidden color_prefix="
#   run 'echo \"color_prefix\" >> $HOME/.vim.log'
	if-shell -F '#{@is-vim}' {
	#   if-shell -F '#{==:#{default_background},#{current_background}}' {
		#   Prefix and copy modes sending the same key twice will prevent the vim pane from entering copy-mode
		#   send-keys -t '$TMUX_PANE' Escape 'C-SPACE V' #   no Enter appended
		#   Version 2
		if-shell -F '#{==:#{default_background},dark}' {} {
			$vim_reverse #   do it in editor ?
		}
	#   } {
	#   #   Version 1
	#   #   send-keys ESCAPE 'SPACE V'
	#   #   Version 0
	#   #   select-pane -P 'bg=#{prefix_background}' #   if vim bg is NONE  #   got dynamic value
	#   #   Version 2
	#   #   $vim_restore
	#   }
	#   select-pane -P bg=terminal
	} #   {
	#   if-shell -F '#{==:#{default_background},dark}' { #   if-shell -F '#{==:#{default_background},#{current_background}}' {
	#   #    window-active-style default color #1325
	#   #   select-pane -P 'fg=colour051,bg=#{prefix_background}'  #   got dynamic value
	#   #   select-pane -P 'fg=default,bg=terminal' #   got dynamic value
	#              set -p window-style 'fg=default,bg=terminal'
	#       set -p window-active-style 'fg=default,bg=#{prefix_background}'

	#   #   set-window-option -g window-active-style bg=terminal
	#   #   set-window-option -g window-style        bg=black

	#   } {

		#   select-pane -P 'fg=colour051,bg=#{prefix_bg_on_light}' #   got dynamic value
		#   select-pane -P 'fg=default,bg=terminal' #   got dynamic value
				   set -p window-style 'fg=default,bg=terminal'
			set -p window-active-style 'fg=default,bg=#{prefix_bg_on_light}'

		#   set-window-option -g window-active-style bg=terminal
		#   set-window-option -g window-style        bg=black
	#   }
	#   }
	"

	#   How to check alias_index_xx ?
	#   $XDG_CONFIG_HOME/tmux/alias-index $XDG_CONFIG_HOME/tmux
%if "#{alias_index_12}"
		   display -p "# [0220] \$alias_index_12 occupied: $alias_index_12"
	confirm-before -p "# [0221] \$alias_index_12 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_12=12
	%if "#{color_prefix}"
		set -s  command-alias[$alias_index_12] color_prefix="$color_prefix"
	%else
			   display -p "# [0227] \$color_prefix not defined: $color_prefix"
		confirm-before -p "# [0228] alias_index_12, \$color_prefix not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_12
%endif

	%hidden color_terminal="
#   run 'echo \"color_terminal\" >> $HOME/.vim.log'
	if-shell -F '#{@is-vim}' {
		#   if-shell -F '#{default_background}' {
		#   if-shell -F '#{==:#{default_background},#{current_background}}' {} {
	#   if-shell -F '#{==:#{default_background},#{current_background}}' {
	#       #   Version 1
	#       #   send-keys ESCAPE 'SPACE S'
	#       #   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE V'
	#       #   Version 0
	#       #   select-pane -P bg=terminal #   if vim bg is NONE
	#   #   Version 2
	#   if-shell -F '#{==:#{default_background},dark}' {
	#       $vim_reverse
	#   } {
			$vim_restore #   do it in editor ?
	#   }
	#   #   }
	#   } {
	#   #   if-shell -F '#{==:#{default_background},#{current_background}}' {
	#       #   Version 1
	#       #   send-keys -t '$TMUX_PANE' ESCAPE 'SPACE V'
	#       #   send-keys ESCAPE 'SPACE V'
	#       #   Version 0
	#       #   select-pane -P bg=terminal
	#   #   Version 2
	#   #   $vim_restore
	#       $vim_reverse
	#   #   }
	#   }
	#   if-shell -F '#{==:#{default_background},#{current_background}}' {
	#       select-pane -P 'fg=colour051,bg=#{prefix_bg_on_light}' #   got dynamic value
	#   #   select-pane -P 'fg=default,bg=terminal' #   got dynamic value
	#   #   set -p window-active-style 'fg=default,bg=#{prefix_bg_on_light}'
	#   } {
	#       select-pane -P 'fg=colour051,bg=#{prefix_background}'  #   got dynamic value
	#   #   select-pane -P 'fg=default,bg=terminal' #   got dynamic value
	#   #   set -p window-active-style 'fg=default,bg=#{prefix_background}'
	#   }
	} #   {
	#   select-pane -P bg=terminal
			   set -p window-style 'fg=default,bg=terminal'
		set -p window-active-style 'fg=default,bg=terminal'
	#   }
	"

%if "#{alias_index_13}"
		   display -p "# [0280] \$alias_index_13 occupied: $alias_index_13"
	confirm-before -p "# [0281] \$alias_index_13 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_13=13
	%if "#{color_terminal}"
		set -s  command-alias[$alias_index_13] color_terminal="$color_terminal"
	%else
			   display -p "# [0287] \$color_terminal not defined: $color_terminal"
		confirm-before -p "# [0288] alias_index_13, \$color_terminal not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_13
%endif

	%hidden color_normal="
#   run 'echo \"color_normal\" >> $HOME/.vim.log'
	if-shell -F '#{@is-vim}' {
	#   if-shell -F '#{==:#{default_background},#{current_background}}' {
		#   Prefix and copy modes sending the same key twice will prevent the vim pane from entering copy-mode
		#   Version 2
			$vim_reverse #   do it in editor ?
	#   } {
	#   #   Version 1
	#   #   send-keys ESCAPE 'SPACE V'
	#   #   Version 0
	#   #   select-pane -P 'bg=#{normal_background}' #   If vim bg is NONE  #   got dynamic value
	#   #   Version 2
	#   #   $vim_restore
	#   }
	}

	#   config copy-mode colors
	#   set-window-option -g mode-style "fg=default,bg=default,reverse,blink"
	#   set-window-option -g mode-style "fg=default,bg=default,reverse"
	#   set-window-option -g mode-style "fg=default,bg=$prefix_background"

	if-shell -F '#{==:#{current_background},dark}' { #   if-shell -F '#{==:#{default_background},#{current_background}}' {
		set-window-option -g mode-style 'fg=default,bg=#{normal_background}'
	#   set-window-option -g mode-style 'fg=default,bg=default,reverse'
	#   set -p window-active-style 'fg=default,bg=#{normal_bg_on_light}'
	#   select-pane -P 'fg=default,bg=#{normal_bg_on_light}' #   got dynamic value
	} {
		set-window-option -g mode-style 'fg=default,bg=#{normal_bg_on_light}'
	#   set-window-option -g mode-style 'fg=default,bg=default,reverse'
	#   set -p window-active-style 'fg=default,bg=#{normal_background}'
	#   select-pane -P 'fg=default,bg=#{normal_background}'  #   got dynamic value
	}
	#   select-pane -P 'fg=default,bg=terminal'
		   set -p window-style 'fg=default,bg=terminal'
	set -p window-active-style 'fg=default,bg=terminal'
	"

%if "#{alias_index_14}"
		   display -p "# [0332] \$alias_index_14 occupied: $alias_index_14"
	confirm-before -p "# [0333] \$alias_index_14 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_14=14
	%if "#{color_normal}"
		set -s  command-alias[$alias_index_14] color_normal="$color_normal"
	%else
			   display -p "# [0339] \$color_normal not defined: $color_normal"
		confirm-before -p "# [0340] alias_index_14, \$color_normal not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_14
%endif

#   The reason why vim-tmux-navigator is popular, is it found the correct model ?
#   But it broke all the prefix's design
#   We do need less keystroke, but we need concept simple more than key strokes

%if "#{nesting_support}"
	%hidden  prefix_quit=
	%hidden _prefix_quit=
	%hidden _out_of_mode=
%else
	setenv -ghu  prefix_quit
	setenv -ghu _prefix_quit
	setenv -ghu _out_of_mode
%endif

	%hidden _out_of_mode="
		#   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \;
		#   $unbind_assist_on_prefix
		if-shell -F '#{@is-vim}' {
			#   if-shell -F '#{pane_in_mode}' {} {
				if-shell -F '#{@is-float}' 'send-keys Escape'
				#   } {
			#   if-shell -F '#{@is-float}' 'send-keys C-[' #   quit copy-mode and recursivelly calling
			#   }
			#   if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
			if-shell -F '#{@is-insert}' {
				if-shell -F '#{@is-visual}' {} {
					send-keys C-c #   Escape
				}
			}
			#   }
			#   if-shell -F '#{assist_key}' {
			#   #     bind -T root '$assist_key' normal_enter
			#         bind -T root '$assist_key' assist_on_root
			#   #     bind -T root '$assist_key' send-keys ESCAPE SPACE N
			#   #     run -b '\tmux bind -T root '$assist_key' assist_on_root'
			#   }
		} #   {
			#   if-shell -F '#{assist_key}' {
			#       unbind -T root '$assist_key'
			#   #   bind -T root   '$escape_key' prefix_enter
			#   }
		#   }
		#   bind -T root '$escape_key' escape_on_root #   Left hand side hard coded prefix to Escape
		#   The folowing line can not contains comments even you quote the right hand side
		#   run -C 'bind_prefix_on_root'                #   $prefix_enter is not defined at this moment
		#   run -C bind_prefix_on_root

		#   run -C bind_escape_on_root
		
		    bind -T root '$escape_key' escape_on_root

		#   bind -T prefix '$prefix_key' if-shell true {   # won't work
		#   send-keys -X cancel

		#   %if "#{!=:#{normal_key},#{prefix_key}}"

		#   %if    '#{delegate_wincmd}'

		#   %else  #   "#{delegate_wincmd}"
		#       if-shell -F '#{@is-vim}' ' send-keys C-w ' ' switch-client -T root '

		#   %endif #   "#{delegate_wincmd}"

		#   unbind -T prefix "$prefix_key"
		#   bind -n '$prefix_key' \"$prefix_enter\" #   self maintenance
		#
		#   if-shell -F '#{==:@mode-pre,normal}' {
		#   if-shell -F '#{||:#{==:#{client_key_table},#{copy-mode-vi}},#{==:#{client_key_table},#{copy-mode}}}' {
		#   } {
				switch-client -T root
				set -p '@mode-cur' 'root'
			    $color_terminal
				#   run '\tmux color_terminal'
				#   $color_toggle
		#   }
		#
		#   %if   '#{==:#{prefix_key},Escape}'

		#       %if    '#{one_stage_policy}'
		#           if-shell -F '#{pane_in_mode}' {
		#               if-shell -F '#{selection_present}' 'send-keys -X clear-selection' {
		#                   send-keys -X cancel
		#                   $color_terminal
		#                   if-shell -F '#{@is-vim}' {
		#                       send-keys C-c #   Escape
		#                   }
		#               }
		#           }

		#       %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode

		#           if-shell -F '#{pane_in_mode}' { #   does not work in the copy-mode bind block
		#           #   if-shell   -F "#{selection_present}" "send-keys -X clear-selection" "send-keys -X cancel"
		#           #   send-keys -X cancel
		#           } {
		#               copy-mode
		#           }
		#           $color_normal #   let mode-changed hook handle it ?

		#       %endif #   "#{one_stage_policy}"

		#   %elif '#{==:#{normal_key},Escape}'

		#       if-shell -F '#{pane_in_mode}' {
		#           $color_normal #   let mode-changed hook handle it ?
		#       }

		#   %endif #   '#{==:#{normal_key},Escape}'

		#   if-shell -F "#{pane_in_mode}" {
		#       $color_normal #   let mode-changed hook handle it ?
		#   } {
		#       $color_terminal
		#   }

		#   %else  #   "#{!=:#{normal_key},#{prefix_key}}"

		#   %endif #   "#{!=:#{normal_key},#{prefix_key}}"

			#   if-shell -F "#{@is-vim}" {
			#   #   send-keys C-c
			#   #   Won't be a recursive call -- can contain an odd number of single quotes
			#   #   send-keys $prefix_key # will not be a recursive call -- can not contain an odd number of single quotes
			#       if-shell -F "#{@is-cmd}" {
			#           set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
			#       }
			#       if-shell -F "#{@is-float}" {
			#           set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
			#       }
			#   }
		if-shell -F '#{@is-vim}' {
			if-shell -F '#{delegate_wincmd}' {} {
				if-shell -F '#{vim_in_charge_of_keystrokes}' {} {
				#   #   sending C-w will not work, because the loss of atomicity of C-w
				#   send-keys C-w #   Control sequences are case sensitive
				#   if-shell -F '#{client_prefix}' {
				    send-keys Escape #   cancel the pending C-w
				#   }
					send-keys M-F    #   restore colors
				}
			}
		}
	"
#   Double quotes version
	%hidden _prefix_quit="
	run -b 'echo _prefix_quit : `command tmux show -pqv @mode-cur` `command tmux show -pqv @mode-pre` >> $HOME/.vim.log'
	#   if -F '#{@mode-cur}' {
	#   set -p '@mode-pre' '#(command tmux show -pqv @mode-cur)'
	#   run -C 'set -p @mode-pre #(show -pqv @mode-cur)'
	run -b 'mode_cur=`command tmux show -pqv @mode-cur` && [ -z $mode_cur ] || command tmux set -p @mode-pre $mode_cur'
	#   run -C 'set -p @mode-pre #(show -pqv @mode-cur)'
	#   run -C 'set -p @mode-pre #(if -F \"#{@mode-cur}\" { show -pqv @mode-cur })'
	#   run -C 'set -p @mode-pre \"#{@mode-cur}\"'
	#   }
	if-shell -F '#{pane_in_mode}' {
	#   Do not quit copy-mode because you might be working on it
		if-shell -F '#{selection_present}' {
			send-keys -X clear-selection
		} {
	    	send-keys -X cancel
			$_out_of_mode
			#   bind -T root '$escape_key' escape_on_root
			#   switch-client -T root
			#   set -p '@mode-cur' 'root'
			#   $color_terminal #   $color_terminal
			#   #   $vim_reverse # won't work
		}
	} {
			$_out_of_mode
			#   #   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \;
			#   #   $unbind_assist_on_prefix
			#   if-shell -F '#{@is-vim}' {
			#   	#   if-shell -F '#{pane_in_mode}' {} {
			#   		if-shell -F '#{@is-float}' 'send-keys Escape'
			#   		#   } {
			#   	#   if-shell -F '#{@is-float}' 'send-keys C-[' #   quit copy-mode and recursivelly calling
			#   	#   }
			#   	#   if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
			#   	if-shell -F '#{@is-insert}' {
			#   		if-shell -F '#{@is-visual}' {} {
			#   			send-keys C-c #   Escape
			#   		}
			#   	}
			#   	#   }
			#   	#   if-shell -F '#{assist_key}' {
			#   	#   #     bind -T root '$assist_key' normal_enter
			#   	#         bind -T root '$assist_key' assist_on_root
			#   	#   #     bind -T root '$assist_key' send-keys ESCAPE SPACE N
			#   	#   #     run -b '\tmux bind -T root '$assist_key' assist_on_root'
			#   	#   }
			#   } #   {
			#   	#   if-shell -F '#{assist_key}' {
			#   	#       unbind -T root '$assist_key'
			#   	#   #   bind -T root   '$escape_key' prefix_enter
			#   	#   }
			#   #   }
			#   #   bind -T root '$escape_key' escape_on_root #   Left hand side hard coded prefix to Escape
			#   #   The folowing line can not contains comments even you quote the right hand side
			#   #   run -C 'bind_prefix_on_root'                #   $prefix_enter is not defined at this moment
			#   #   run -C bind_prefix_on_root
			#   	run -C bind_escape_on_root
			#   #   bind -T prefix '$prefix_key' if-shell true {   # won't work
			#   #   send-keys -X cancel

			#   #   %if "#{!=:#{normal_key},#{prefix_key}}"

			#   #   %if    '#{delegate_wincmd}'

			#   #   %else  #   "#{delegate_wincmd}"
			#   #       if-shell -F '#{@is-vim}' ' send-keys C-w ' ' switch-client -T root '

			#   #   %endif #   "#{delegate_wincmd}"

			#   #   unbind -T prefix "$prefix_key"
			#   #   bind -n '$prefix_key' \"$prefix_enter\" #   self maintenance
			#   #
			#   #   if-shell -F '#{==:@mode-pre,normal}' {
			#   #   if-shell -F '#{||:#{==:#{client_key_table},#{copy-mode-vi}},#{==:#{client_key_table},#{copy-mode}}}' {
			#   #   } {
			#   		switch-client -T root
			#   		set -p '@mode-cur' 'root'
			#   		$color_terminal
			#   		#   run '\tmux color_terminal'
			#   		#   $color_toggle
			#   #   }
			#   #
			#   #   %if   '#{==:#{prefix_key},Escape}'

			#   #       %if    '#{one_stage_policy}'
			#   #           if-shell -F '#{pane_in_mode}' {
			#   #               if-shell -F '#{selection_present}' 'send-keys -X clear-selection' {
			#   #                   send-keys -X cancel
			#   #                   $color_terminal
			#   #                   if-shell -F '#{@is-vim}' {
			#   #                       send-keys C-c #   Escape
			#   #                   }
			#   #               }
			#   #           }

			#   #       %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode

			#   #           if-shell -F '#{pane_in_mode}' { #   does not work in the copy-mode bind block
			#   #           #   if-shell   -F "#{selection_present}" "send-keys -X clear-selection" "send-keys -X cancel"
			#   #           #   send-keys -X cancel
			#   #           } {
			#   #               copy-mode
			#   #           }
			#   #           $color_normal #   let mode-changed hook handle it ?

			#   #       %endif #   "#{one_stage_policy}"

			#   #   %elif '#{==:#{normal_key},Escape}'

			#   #       if-shell -F '#{pane_in_mode}' {
			#   #           $color_normal #   let mode-changed hook handle it ?
			#   #       }

			#   #   %endif #   '#{==:#{normal_key},Escape}'

			#   #   if-shell -F "#{pane_in_mode}" {
			#   #       $color_normal #   let mode-changed hook handle it ?
			#   #   } {
			#   #       $color_terminal
			#   #   }

			#   #   %else  #   "#{!=:#{normal_key},#{prefix_key}}"

			#   #   %endif #   "#{!=:#{normal_key},#{prefix_key}}"

			#   	#   if-shell -F "#{@is-vim}" {
			#   	#   #   send-keys C-c
			#   	#   #   Won't be a recursive call -- can contain an odd number of single quotes
			#   	#   #   send-keys $prefix_key # will not be a recursive call -- can not contain an odd number of single quotes
			#   	#       if-shell -F "#{@is-cmd}" {
			#   	#           set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
			#   	#       }
			#   	#       if-shell -F "#{@is-float}" {
			#   	#           set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
			#   	#       }
			#   	#   }
			#   if-shell -F '#{@is-vim}' {
			#   	if-shell -F '#{delegate_wincmd}' {} {
			#   		if-shell -F '#{vim_in_charge_of_keystrokes}' {} {
			#   		#   #   sending C-w will not work, because the loss of atomicity of C-w
			#   		#   send-keys C-w #   Control sequences are case sensitive
			#   		#   if-shell -F '#{client_prefix}' {
			#   			send-keys Escape #   cancel the pending C-w
			#   		#   }
			#   			send-keys M-F    #   restore colors
			#   		}
			#   	}
			#   }
	}
	"

	%if "#{nesting_support}"
	setenv -gh _prefix_quit "$_prefix_quit"
	%endif

%if    '#{delegate_wincmd}'

%else  #   "#{delegate_wincmd}"

	#   %hidden _prefix_quit="
	#           if-shell -F '#{@is-vim}' ' send-keys C-w ' ' switch-client -T root '
	#           $_prefix_quit
	#       "
%endif #   "#{delegate_wincmd}"

%if    '#{==:#{prefix_key},Escape}'

	%if    "#{&&:#{==:#{one_stage_policy},1},#{==:#{prefix_key},Escape}}"

		%hidden prefix_quit="
		if-shell -F '#{pane_in_mode}' { # [0659]
			if-shell -F '#{selection_present}' {
				send-keys -X clear-selection
			} {
				send-keys -X cancel
				$color_terminal #   run '\tmux color_terminal'
				if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
					if-shell -F '#{@is-visual}' {} {
						send-keys C-c #   Escape
					}
				}
				$_prefix_quit
			}
		} {
			if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
				if-shell -F '#{@is-visual}' {} {
					send-keys C-c #   Escape
				}
			}
			$_prefix_quit
		}
		"
		%if "#{&&:#{&&:#{assist_key},#{==:#{one_stage_policy},1}},#{==:#{prefix_key},Escape}}"
			%hidden prefix_quit="
			if-shell -F '#{pane_in_mode}' {
				if-shell -F '#{selection_present}' {
					send-keys -X clear-selection
				} {
					send-keys -X cancel
					$color_terminal #   run '\tmux color_terminal'
					if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
						if-shell -F '#{@is-visual}' {} {
							send-keys C-c #   Escape
						}
					}
					$_prefix_quit
				}
			} { # [0696]
			#   $prefix_quit
				if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
					if-shell -F '#{@is-visual}' {} {
						send-keys C-c #   Escape
					}
				}
				$_prefix_quit
				if-shell -F '#{@is-vim}' {
					  bind -T root '$assist_key' assist_on_root
				} {
					unbind -T root '$assist_key'
				}
			}
			"
		%endif
	#   %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode
	%elif  "#{&&:#{!=:#{one_stage_policy},1},#{==:#{prefix_key},Escape}}"
		%hidden prefix_quit="
		$_prefix_quit
		if-shell -F '#{pane_in_mode}' { # [0716] #   does not work in the copy-mode bind block
		#   if-shell -F "#{selection_present}" "send-keys -X clear-selection" "send-keys -X cancel"
		#   send-keys -X cancel
		} {
			run -C signal_root #   copy-mode
			#   $color_normal  #   let mode-changed hook handle it ?
		}
		"
		%if "#{&&:#{&&:#{assist_key},#{!=:#{one_stage_policy},1}},#{==:#{prefix_key},Escape}}"
			%hidden prefix_quit="
			if-shell -F '#{@is-vim}' { # [0726]
				  bind -T root '$assist_key' assist_on_root
			} {
				unbind -T root '$assist_key'
			}
			$prefix_quit
			"
		%endif

	%endif #   "#{one_stage_policy}"

%elif  '#{==:#{normal_key},Escape}'

	%if    "#{&&:#{one_stage_policy},#{==:#{normal_key},Escape}}"

		%hidden prefix_quit="
			$_prefix_quit # [0742]
		#   if-shell -F '#{pane_in_mode}' {
			#   $color_normal #   let mode-changed hook handle it ?
		#   }
		"
		%if "#{&&:#{&&:#{assist_key},#{one_stage_policy}},#{==:#{normal_key},Escape}}"
			%hidden prefix_quit="
			$prefix_quit # [0749]
			if-shell -F '#{@is-vim}' {
				  bind -T root '$assist_key' assist_on_root
			} {
				unbind -T root '$assist_key'
			}
			"
		%endif
	%elif  "#{&&:#{!=:#{one_stage_policy},1},#{==:#{normal_key},Escape}}"

		%hidden prefix_quit="
			$_prefix_quit # [0760]
		#   if-shell -F '#{pane_in_mode}' {
			#   $color_normal #   let mode-changed hook handle it ?
		#   }
		"
		%if "#{&&:#{&&:#{assist_key},#{!=:#{one_stage_policy},1}},#{==:#{normal_key},Escape}}"
			%hidden prefix_quit="
			$prefix_quit # [0767]
			if-shell -F '#{@is-vim}' {
				  bind -T root '$assist_key' assist_on_root
			} {
				unbind -T root '$assist_key'
			}
			"
		%endif

	%endif
%endif

#       %hidden prefix_quit="
#       switch-client -T root
#       $color_terminal
#       if-shell -F '#{pane_in_mode}' {
#           $color_normal #   let mode-changed hook handle it ?
#       }
#       "
#   setenv -gh  prefix_quit " \
#       switch-client -T root \
#       $color_terminal \
#       if-shell -F '#{pane_in_mode}' { \
#           $color_normal \
#       } \
#   "
%if "#{nesting_support}"
	setenv -gh  prefix_quit "$prefix_quit"
%endif

	#   Single quotes version
	#       %hidden _prefix_enter='
	#       #   You don't need these because vim could disable $normal_key by itself when in insert-mode
	#       #   if-shell -F "#{@is-vim}" {
	#       #   #   copy-mode
	#       #       send-keys $prefix_key
	#       #       if-shell -F "#{@is-cmd}" {
	#       #           copy-mode
	#       #           $color_normal #   let mode-changed hook handle it ?
	#       #           set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#       #       } {
	#       #           if-shell -F "#{@is-float}" {
	#       #           #   send-keys $normal_key
	#       #           #   send-keys Escaep #   C-c
	#       #               # } {
	#       #               copy-mode
	#       #               $color_normal #   let mode-changed hook handle it ?
	#       #               set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#       #           } {
	#       #               switch-client -T prefix
	#       #               $color_prefix #   let mode-changed hook handle it ?
	#       #               setenv -gh active_pane "$TMUX_PANE" # got ''?
	#       #               set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#       #               set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#       #           }
	#       #       }
	#       #       set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
	#       #       set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
	#       #   } {
	#
	#       #   %if "#{!=:#{normal_key},#{prefix_key}}"
	#
	#       %if   "#{==:#{prefix_key},Escape}" #   #AA0000
	#           if-shell -F "#{pane_in_mode}" { #   does not work in the copy-mode bind block
	#           } {
	#           #   if-shell -F "#{@is-vim}" {
	#           #   send-keys $normal_key
	#           #   } {
	#           #   copy-mode #   with this design, you can not enter C-w to vim
	#           #   }
	#           #   Don't enter copy-mode here, because the copy-mode will lose window switch functions of vim
	#               copy-mode   # but we do need copy mode -- one-key copy-mode is important to preserve the scense
	#               $color_normal #   let mode-changed hook handle it ?
	#           }
	#       %elif "#{==:#{normal_key},Escape}" #   #00AAAA
	#
	#       %endif #   "#{==:#{normal_key},Escape}"
	#
	#   #   %if    "#{one_stage_policy}"
	#
	#   #   %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode
	#       #   self maintenance
	#           bind -T prefix "$prefix_key" $prefix_quit #   vim is sensitive to this if $prefix_key is a alphabet
	#           switch-client -T prefix #   copy-prefix-overlay/override/superposition-mode
	#           $color_prefix #   let mode-changed hook handle it ?
	#   #   %endif #   "#{one_stage_policy}"
	#
	#       #   %else  #   "#{!=:#{normal_key},#{prefix_key}}"
	#
	#       #   %endif #   "#{!=:#{normal_key},#{prefix_key}}"
	#
	#           #   display-panes -N
	#
	#           #   $color_terminal #   let mode-changed hook handle it ?
	#           #   send-keys ESCAPE 'pwd' Enter
	#           #   if-shell -F "\#{pane_id}" {
	#           #       setenv -gh active_pane "\#{pane_id}"
	#           setenv -gh active_pane "$TMUX_PANE" # got ''?
	#           #   #   select-pane -m
	#           #   }
	#           #   display-panes
	#           #   Shell can not write tmux buffer correctly -- you need send "command" ENTER
	#           #   run -b "export TTY=$(tty) && . '$XDG_CONFIG_HOME/tmux/default-command'"
	#       #   }
	#       '

%if "#{nesting_support}"
	%hidden prefix_enter=
	%hidden _prefix_enter=
%else
	setenv -ghu prefix_enter
	setenv -ghu _prefix_enter
%endif

#   %hidden _prefix_enter="
#   #   bind -T prefix '$prefix_key' \"$prefix_quit\"
#       switch-client -T prefix
#       $color_prefix
#       "

	#   Double quotes version
	%hidden _prefix_enter="
	#   run 'echo _prefix_enter >> $HOME/.vim.log'
	    run -b 'echo _prefix_enter: `command tmux show -pqv @mode-cur` `command tmux show -pqv @mode-pre` >> $HOME/.vim.log'
	#   set -p '@mode-pre' '#(command tmux show -pqv @mode-cur)'
	    run -b 'mode_cur=`command tmux show -pqv @mode-cur` && [ -z $mode_cur ] || command tmux set -p @mode-pre $mode_cur'
	#   run -C 'set -p @mode-pre #(if -F \"#{@mode-cur}\" { show -pqv @mode-cur })'
	#   run -C 'set -p @mode-pre \"#{@mode-cur}\"'
	#   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \;
	if-shell -F '#{pane_in_mode}' {
	#   Do not quit copy-mode because you might be working on it
	#   send-keys -X cancel
		bind -T prefix '$escape_key' escape_on_prefix
		run -C color_prefix #   $color_prefix
		switch-client -T prefix
		set -p '@mode-cur' 'prefix'
	} {
		#   $color_terminal
		#   $bind_assist_on_prefix
		#   Does not work
		#   bind -T prefix '$assist_key' run -C '$normal_enter'
		#   bind -T prefix '$assist_key' 'if true { copy-mode ; $color_normal }'
		#   bind -T prefix '$assist_key' 'if true { tmux \$normal_enter }'
		#
		#   Partially working
		#   bind -T prefix '$assist_key' run '
		#   tmux display -p \"#{normal_enter}\"
		#   #   tmux showenv -gh \"normal_enter\"
		#   '

		#   Does not work
		#   bind -T prefix '$assist_key' '
		#   if true { $normal_enter }
		#   '
		#

		#   Does not work for replace-mode
		#   if-shell -F '#{&&:#{@is-vim},#{@is-insert}}' {
		#       set -p '@mode-cur' '#{@mode-pre}'
		#       send-keys C-c #   Escape
		#       send-keys \"M-$prefix_key\"
		#   } {

		#   Works
		if-shell -F '#{&&:#{@is-vim},#{@is-float}}' {
			#   if-shell -F '#{||:#{@is-insert},#{@is-float}}' {
			#   The following block will bypass prefix-mode ? Yes, full reloading might not help
			#   "Unknown command: on" error #   when sending C-c
			#   if-shell -F '#{@is-float}' {
			#   if-shell 'test \"`\tmux show -pqv @is-float`\" = \"on\"' {
			#       send-keys C-c #   Escape
			#   } #   {
			#   if-shell -F '#{pane_in_mode}' {} {
			#   if-shell -F '#{@is-float}' 'send-keys Escape'
				#   } {
			#   if-shell -F '#{@is-float}' 'send-keys C-[' #   quit copy-mode and recursivelly calling
			#   }
				set -pu @is-float
				send-keys C-c #   high CPU usage and locked in prefix mode
		} {
			if-shell -F '#{@is-vim}' {
				if-shell -F '#{@is-insert}' {
					if-shell -F '#{@is-visual}' {} {
						send-keys C-c #   Escape
					#   send-keys \"M-$prefix_key\"       #   does not work for replace-mode
					#   send-keys Escape
					#   set -p '@mode-cur' '#{@mode-pre}' #   does not work for replace-mode
					}
				}
				#   run -C color_prefix #   for replace-mode
			#   send-keys C-c #   Escape #   resolve tmux 'jump to backward' error
				#   if-shell -F '#{assist_key}' {
				#   #   bind -T root '$assist_key' normal_enter
				#     bind -T root '$assist_key' assist_on_root
				#   #     bind -T root '$assist_key' send-keys ESCAPE SPACE N
				#   #   bind -T prefix '$assist_key' assist_on_prefix
				#   #   Works
				#   #   run '\tmux bind -T root \"$assist_key\" \"$(\tmux display -p \"#{assist_on_root}\")\"'
				#   #   if true { bind -T root "$assist_key" assist_on_root }
				#   #   run '\tmux bind -T prefix "$assist_key" assist_on_prefix' #   recursive call
				#   #   run '\tmux bind -T root "$assist_key" assist_on_root' #   recursive call
				#   #     bind -T root '$assist_key' $assist_on_root
				#   #   send-keys C-w
				#   }

				#   if-shell -F '#{assist_key}' {
				#       unbind -T root '$assist_key'
				#   }
			#   bind -T prefix '$escape_key' prefix_quit
				bind -T prefix '$escape_key' escape_on_prefix
				#   if-shell -F '#{assist_key}' {
				#   #   bind -T prefix '$assist_key' normal_enter
				#       bind -T prefix '$assist_key' assist_on_prefix
				#   }

				#   You don't need these because vim could disable $normal_key by itself when in insert-mode
				#   if-shell -F "#{@is-vim}" {
				#   #   copy-mode
				#       send-keys $prefix_key
				#       if-shell -F "#{@is-cmd}" {
				#           copy-mode
				#           $color_normal #   let mode-changed hook handle it ?
				#           set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
				#       } {
				#           if-shell -F "#{@is-float}" {
				#           #   send-keys $normal_key
				#           #   send-keys Escape #   C-c
				#               # } {
				#               copy-mode
				#               $color_normal #   let mode-changed hook handle it ?
				#               set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
				#           } {
				#               switch-client -T prefix
				#               $color_prefix
				#               setenv -gh active_pane "$TMUX_PANE" # got ''?
				#               set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
				#               set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
				#           }
				#       }
				#       set-option -p -u -t "$TMUX_PANE" @is-cmd     # shut off this channel
				#       set-option -p -u -t "$TMUX_PANE" @is-float   # shut off this channel
				#   } {

				#   %if "#{!=:#{normal_key},#{prefix_key}}"

				#   %if   "#{==:#{prefix_key},Escape}" #   #AA0000
				#       if-shell -F "#{pane_in_mode}" { #   does not work in the copy-mode bind block
				#       } {
				#       #   if-shell -F "#{@is-vim}" {
				#       #   send-keys $normal_key
				#       #   } {
				#       #   copy-mode #   with this design, you can not enter C-w to vim
				#       #   }
				#       #   Don't enter copy-mode here, because the copy-mode will lose window switch functions of vim
				#           copy-mode   # but we do need copy mode -- one-key copy-mode is important to preserve the scense
				#           $color_normal #   let mode-changed hook handle it ?
				#       }
				#   %elif "#{==:#{normal_key},Escape}" #   #00AAAA

				#   %endif #   "#{==:#{normal_key},Escape}"

				#   %if    '#{one_stage_policy}'

				#   %else  #   "#{one_stage_policy}" #   copy-prefix-overlay/override/superposition-mode
					#   Self maintenance
				#       bind -T prefix '$prefix_key' \"$prefix_quit\" #   tmux will prevent your normally input if $prefix_key is a alphabet

					#   switch-client -T root
					#   $color_terminal
					#   $color_prefix #   tmux 'jump to backward' error comes from here
					#   send-keys C-c #   Escape #   send-keys might be blocked by mode changing
					#   send-keys ESCAPE 'SPACE V'      #   send-keys might be blocked by mode changing
					#   select-pane -P 'bg=#{prefix_bg_on_light}'
					#   set -p window-active-style 'fg=default,bg=#{prefix_bg_on_light}'

				#   if-shell -F '#{==:#{@mode-cur},#{@mode-pre}}' {} { #   does not work for replace-mode
						run -C color_prefix #   $color_prefix
					#   $color_terminal
					#   run '\tmux color_prefix' #   tmux 'jump to backward' error comes from here
					#   Duplicated with send-prefix
						switch-client -T prefix #   copy-prefix-overlay/override/superposition-mode when prefix_key triggering copy-mode first from root mode
						set -p '@mode-cur' 'prefix'
				#   } # '#{==:#{@mode-cur},#{@mode-pre}}'
				#   run '\tmux switch-client -T prefix' #   recursive call
				#   send-prefix #   send-keys '$prefix_key' # won't work when tmux just has one pane #   #AAAA00
				#   %endif #   "#{one_stage_policy}"

				#   %else  #   "#{!=:#{normal_key},#{prefix_key}}"

				#   %endif #   "#{!=:#{normal_key},#{prefix_key}}"

					#   display-panes -N

					#   $color_terminal #   let mode-changed hook handle it ?
					#   send-keys 'pwd' Enter
					#   if-shell -F "\#{pane_id}" {
					#       setenv -gh active_pane "\#{pane_id}"
				#   setenv -gh active_pane '$TMUX_PANE' # got ''?
					#   #   select-pane -m
					#   }
					#   display-panes
					#   Shell can not write tmux buffer correctly -- you need send "command" ENTER
					#   run -b "export TTY=$(tty) && . '$XDG_CONFIG_HOME/tmux/default-command'"
				#   }
				#   if-shell -F '#{@is-vim}' {
				if-shell -F '#{delegate_wincmd}' {} {
					if-shell -F '#{&&:#{vim_in_charge_of_keystrokes},#{prefix_key}}' {
						send-keys '$prefix_key'
					} {
						#   Does not work, because the loss of atomicity of C-w
						send-keys C-w #   control sequences are case sensitive
					}
				}
				#   }
				#   } # '#{&&:#{@is-vim},#{@is-insert}}' #   does not work for replace-mode

			} {
			#   This is just checking the available of vi, not the working mode of busybox vi
			#   if-shell '[ $(set -o | awk -v key=vi "\$1 == key {print \$NF}") = on ]' {
			#   }
				bind -T prefix '$escape_key' escape_on_prefix
				run -C color_prefix #   $color_prefix
				switch-client -T prefix
			    #   Does not work, but jump to copy-mode
			    #   run-shell -b 'type -s rolling > /dev/null 2>&1 || . $XDG_CONFIG_HOME/tmux/default-command'
			    #   The following line will insert "rolling" to the command line content and refresh-client will run the ruined command
				#   send-keys 'rolling' Enter
				set -p '@mode-cur' 'prefix'
			}
		} #   '#{@is-float}'
	} #   '#{pane_in_mode}'
	"

	%if "#{nesting_support}"
	setenv -gh _prefix_enter "$_prefix_enter"
	%endif

%if   "#{==:#{prefix_key},Escape}" #   #AA0000

	#   %if "#{one_key_copy}"
	%if    "#{&&:#{==:${one_stage_policy},1},#{==:#{prefix_key},Escape}}"
		%hidden prefix_enter="
			$_prefix_enter # [1109]
		#   $color_toggle
		"
		%if    "#{assist_key}"
			%hidden prefix_enter="
			$prefix_enter  # [1114]
			if-shell -F '#{@is-vim}' {
				  bind -T root '$assist_key' assist_on_root
			} {
				unbind -T root '$assist_key'
			}
				bind -T prefix '$assist_key' assist_on_prefix
			"
		%endif
	#   %else  #   "#{one_key_copy}"
	%elif    "#{&&:#{!=:#{one_stage_policy},1},#{==:#{prefix_key},Escape}}"
		%hidden prefix_enter="
			$_prefix_enter # [1126]
		#   $color_toggle
		"
		%if    "#{assist_key}"
			%hidden prefix_enter="
			$prefix_enter  # [1131]
			if-shell -F '#{@is-vim}' {
				  bind -T root '$assist_key' assist_on_root
			} {
				unbind -T root '$assist_key'
			}
				bind -T prefix '$assist_key' assist_on_prefix
			"
		%endif

	%endif #   "#{one_key_copy}"

%elif "#{==:#{normal_key},Escape}" #   #00AAAA

	#   %if "#{one_key_copy}"
	%if    "#{&&:#{==:${one_stage_policy},1},#{==:#{normal_key},Escape}}"
		%hidden prefix_enter="
			$_prefix_enter # [1148]
		"
		%if    "#{assist_key}"
			%hidden prefix_enter="
			$prefix_enter  # [1152]
			if-shell -F '#{@is-vim}' {
				  bind -T root '$assist_key' assist_on_root
			} {
				unbind -T root '$assist_key'
			}
				bind -T prefix '$assist_key' assist_on_prefix
			"
		%endif
	%elif  "#{&&:#{!=:#{one_stage_policy},1},#{==:#{normal_key},Escape}}"
		%hidden prefix_enter="
			$_prefix_enter # [1163]
		"
		%if    "#{assist_key}"
			%hidden prefix_enter="
			$prefix_enter  # [1167]
			if-shell -F '#{@is-vim}' {
				  bind -T root '$assist_key' assist_on_root
			} {
				unbind -T root '$assist_key'
			}
				bind -T prefix '$assist_key' assist_on_prefix
			"
		%endif

	%endif
%endif

%if "#{nesting_support}"
	setenv -gh  prefix_enter "$prefix_enter"
%endif

#   Trying to avoid command alias -- maintain clias index is a pain
#   %hidden   recover_root="run -C '    bind -T root $prefix_key \"$prefix_enter\"'"
#   %hidden recover_prefix="run -C '  bind -T prefix $prefix_key \"$prefix_quit\"'"
#   %hidden recover_normal="run -C '    bind -T root $normal_key \"$normal_enter\"'"

#     run -C "bind -T root $prefix_key $prefix_enter \; echo \"$(\tmux list-keys -T root   | awk -v key=\"$prefix_key\" '\$4 = key {print}')\" > /tmp/$(id -u)/root.conf"
#   run -C "bind -T prefix $prefix_key $prefix_quit  \; echo \"$(\tmux list-keys -T prefix | awk -v key=\"$prefix_key\" '\$4 = key {print}')\" > /tmp/$(id -u)/prefix.conf"
#     run -C "bind -T root $normal_key $normal_enter \; echo \"$(\tmux list-keys -T root   | awk -v key=\"$normal_key\" '\$4 = key {print}')\" > /tmp/$(id -u)/normal.conf"

	  unbind -T root Enter
	unbind -T prefix Enter
	  bind -T prefix Enter "$_prefix_quit"
#     bind -T prefix Enter "$prefix_enter"   # it's a joke :) you have already entered, better quit

#   if-shell -F '#{delegate_wincmd}' {
#   #   Use default behavior ?
#   #   $color_toggle sending keys is not a stable operation
#       bind -T root Enter "
#           if-shell \"#{||:#{pane_in_mode},#{client_prefix}}\" {
#               display-panes -N
#           }
#           $color_toggle
#           send-keys Enter
#       "
#
#   #   $color_toggle sending keys is not a stable operation
#       bind -T prefix Enter "
#       $color_toggle
#       #   bind -T prefix "$prefix_key"   $prefix_quit
#       #   bind -T root   "$prefix_key"   $prefix_enter
#       #   if-shell -F "#{@is-vim}" {
#
#       #   switch-client -T root
#           switch-client -T prefix
#       #   $color_terminal
#
#       #   #   display-panes -N
#       #   } {
#       #       switch-client -T root   # kill last rolling messages
#       #   #   Shell can not write tmux buffer correctly
#       #   #   run -b "export TTY=$(tty) && . '$XDG_CONFIG_HOME/tmux/default-command'"   # it's a joke :) You have already entered, better quit
#       #   #   run -b 'env TTY=$(tty) sh -c "$XDG_CONFIG_HOME/tmux/default-command"'
#       #       send-keys "export TTY=$(tty) && . '$XDG_CONFIG_HOME/tmux/default-command'" ENTER
#       #   }
#       "
#   }


#   prefix_key_1_1/3/4 -- unset prefix mode $prefix_key


%if "#{prefix_key}"
#   unbind        "$prefix_key"
#   unbind        '`'
#   unbind        Escape
#   When using Escape as prefix and triggerd prefix-w, use ctrl-m to quit it
	unbind -T prefix "$prefix_key"
#   unbind -T prefix Escape
#   unbind -T prefix Escape
%endif

#   prefix_key_1_2/3/4 --   set prefix mode $prefix_key name

#   set-option    prefix None # no current session
    set-option -g prefix None
#   set happens during execution
#   set-option    prefix "$prefix_key" # no current session
#   set        -g prefix "$prefix_key"
#   set-option -g prefix "$prefix_key" # everything about prefix does not work
#   Uncommenting the above line, C-b does not function
#   And "$prefix_key" == Escape won't work, either


#   prefix_key_1_3/3/4 --   set prefix mode $prefix_key actions
#
#   $prefix_quit bindings was removed -- it's just a RHS

#   bind -n ` if-shell "$is_vim" 'set prefix None; unbind \`; unbind -T root \`; bind -T root \` send-keys \`; send-keys \`' 'set prefix \`; bind -T root \` switch-client -T prefix; switch-client -T prefix'
#   bind -n ` if-shell "$is_vim" 'set prefix None; unbind \`; unbind -T root \`; send-keys \`' 'set prefix \`; switch-client -T prefix'

#   https://gist.github.com/darkdreamingdan/8b04a1ee25d7e984f35908a1b9bdf0f7
#   Add ` as prefix
#   set-option -g prefix2 "$prefix_key" #   set-option -g prefix2 '`'
#   #   Double tap ` or Alt-` to get a real `
#   bind "$prefix_key" send-keys "$prefix_key" #   bind ` send-keys `


#   For idempotent binding
#   bind "$prefix_key" \
#   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \; \
#   switch-client -T prefix


#   prefix_key_2_1/2/4 -- unset root mode $prefix_key

%if "#{prefix_key}"
	unbind -T root "$prefix_key"
%endif
#   bind   -T root "$normal_key" copy-mode

#   prefix_key_2_2/2/4 -- set root mode $prefix_key

#   $prefix_enter bindings was removed -- it's just a RHS

#   #000000 normal_general___________________________________________________________________________

%if "#{normal_quit}"
	setenv -ghu normal_quit
%endif
%if "#{normal_enter}"
	setenv -ghu normal_enter
%endif
%if "#{normal_toggle}"
	setenv -ghu normal_toggle
%endif
%if "#{nesting_support}"
	%hidden normal_quit=
	%hidden normal_enter=
	%hidden normal_toggle=
%endif
	setenv -ghur normal_quit
	setenv -ghur normal_enter
	setenv -ghur normal_toggle

#   %if "#{!=:#{normal_key},#{prefix_key}}" #   if '[ "$(\tmux display -p "#{normal_key}")" != "$(\tmux display -p "#{prefix_key}")" ]' {

%if    "#{&&:#{normal_enter},#{nesting_support}}"
		   display -p "# [1311] [error] normal_enter already defined: #{normal_enter}"
	confirm-before -p "# [1312] normal_enter already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
%else  #   "#{normal_enter}"

	#   See MARK "overwritten 00"
	#   select-pane -P bg=$prefix_background
	#   if-shell -F '#{@client-prefix-overlay}' {
	#       switch-client -T prefix
	#       $color_prefix
	#       set -up @client-prefix-overlay
	#   } { #   "#{one_stage_policy}"
	#       switch-client -T root
	#       $color_terminal
	#       set -p @client-prefix-overlay on
	#   }

	%hidden normal_quit="
#   set -p '@mode-pre' '#{@mode-cur}'
	run -b 'mode_cur=`command tmux show -pqv @mode-cur` && [ -z $mode_cur ] || command tmux set -p @mode-pre $mode_cur'
	if-shell -F '#{mode_monitor}' {
		mode_monitor_original='on'
	#   } {
	#   mode_monitor=
		setenv -ghu mode_monitor
	}
	if-shell -F '#{pane_in_mode}' {
		if-shell -F '#{selection_present}' {
			send-keys -X clear-selection
		} {
			send-keys -X cancel
			switch-client -T root
			set -p '@mode-cur' 'root'
			$color_terminal
		#   run '\tmux color_terminal' #   ?
			if-shell -F '#{@is-vim}' {
				if-shell -F '#{@is-insert}' {
					if-shell -F '#{@is-visual}' {} {
						send-keys C-c #   Escape
					}
				}
				#   if-shell -F '#{assist_key}' {
				#       bind -T root '$assist_key' assist_on_root
				#   }
			}
			#   if-shell -F '#{assist_key}' {
			#       unbind -T root '$assist_key'
			#   }
		}
	}
	if-shell -F '#{mode_monitor_original}' {
		setenv -gh mode_monitor 'on'
	#   mode_monitor='on'
	#   if-shell -F '#{!=:#{nesting_support},1}' {
	#       setenv -gh  mode_monitor 'on'
	#   } {
	#       setenv -gh  mode_monitor $mode_monitor
	#   }
	}
	"
	%if "#{assist_key}"
		%hidden normal_quit="
		#   $normal_quit # syntax error if outside quoting is a {}
		$normal_quit
		if-shell -F '#{pane_in_mode}' {} {
			if-shell -F '#{@is-vim}' {
				bind -T root '$assist_key' assist_on_root
			} {
				unbind -T root '$assist_key'
			}
		}
		"
	%endif

#   %if 0 #   0 #   bypass $prefix_normal and $normal_quit #   tmux bug (issue #4234)
#   ^-- Does not work because nested %if does not work on tmux <= 3.5a

#   bind   -n M-s          copy-mode \; send-keys ?
#
#   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#   $normal_quit for overlay
%if "#{normal_key}"
#   unbind -T copy-mode-vi Escape
	unbind -T copy-mode-vi "$normal_key"
#   unbind -T copy-mode    Escape
	   unbind -T copy-mode "$normal_key"
%endif

%if   "#{==:#{prefix_key},Escape}" #   #AA0000

	#   From normal mode to normal_key / triggering normal_key on normal
	#   More than normal_quit, but semantic has changed to escape_key and assist_key

	#   assist_on_normal
#   %if   "#{normal_key}"
#       bind -T copy-mode-vi "$normal_key" "$normal_quit"
#          bind -T copy-mode "$normal_key" "$normal_quit"
#   %endif

%elif "#{==:#{normal_key},Escape}" #   #00AAAA

#   https://stackoverflow.com/questions/47848463/tmux-variable-indicating-whether-text-is-selected
#   bind -T copy-mode-vi Escape send-keys -X clear-selection

#   Recursive calling because of "send-keys $normal_key"
#   bind -T copy-mode-vi "$normal_key" { if-shell -F "#{@is-vim}" "send-keys $normal_key"; \
#   if-shell -F '#{selection_present}' \
#       'send-keys -X clear-selection' \
#       'send-keys -X cancel' }

#   bind -T copy-mode-vi "$normal_key" "
#   if-shell -F "#{@is-vim}" { send-keys C-c \; send-keys C-c \n } {
#   if-shell -F '#{selection_present}' { send-keys -X clear-selection \n } { send-keys -X cancel \n } \n }

#   bind -T copy-mode-vi "$normal_key" "$normal_quit $mode_toggle"

	#   assist_on_normal
#   %if   "#{normal_key}"
#       bind -T copy-mode-vi "$normal_key" "$normal_quit"
#          bind -T copy-mode "$normal_key" "$normal_quit"
#   %endif

%endif #   "#{==:#{normal_key},Escape}"

#   bind -T copy-mode    Escape send-keys -X cancel
#
#   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

#   ----------------------------------------------------------------------------------------------
#
#   $prefix_normal for overlay
#
#   bind -T copy-mode-vi "$prefix_key" \
#   if-shell -F '#{==:#{pane-border-status},off}' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \; \
#   switch-client -T prefix \; \
#   select-pane -P 'fg=default,   bg=colour020' \; \
#   display-panes -N \; \
#   select-pane -P 'fg=default,   bg=terminal'

#   prefix_key_3_1/2/4 -- unset copy-mode prefix_key
%if "#{prefix_key}"
	unbind -T copy-mode-vi "$prefix_key"
#   unbind -T copy-mode-vi "$prefix_key"
#   unbind -T copy-mode-vi "$prefix_key"
	   unbind -T copy-mode "$prefix_key"
%endif
#   prefix_key_3_2/2/4 --   set copy-mode prefix_key actions

#   Recursive calling ?
#   %if '#{==:#{prefix_key},Escape}'
#       bind -T copy-mode-vi "$prefix_key" \
#       select-pane -P "fg=default,bg=#{prefix_background}" \; \
#       switch-client -T prefix \; \
#       display-panes -N \; \
#       select-pane -P fg=default,bg=terminal
#   %else
#       bind -T copy-mode-vi "$prefix_key" send-prefix
#   #   bind -T copy-mode-vi "$prefix_key" send-keys "$prefix_key"
#   %endif

#   %if "#{!=:#{normal_key},#{prefix_key}}" #   if '[ "$(\tmux display -p "#{normal_key}")" != "$(\tmux display -p "#{prefix_key}")" ]' {

#   set -p @client-prefix-overlay on

%if   "#{==:#{prefix_key},Escape}" #   #AA0000 #   if '[ "Escape" = "$(\tmux display -p "#{prefix_key}")" ]' {

	#   From normal mode to prefix_key / triggering prefix_key on normal
	#   More than normal_quit, but semantic has changed to escape_key and assist_key

	#   Will be override by "$normal_key" on copy-mode<-vi> mode -- tmux bug (issue #4234)
	#   escape_on_normal
	#   bind -T copy-mode-vi "$prefix_key" "$prefix_normal"
	#      bind -T copy-mode "$prefix_key" "$prefix_normal"

%elif "#{==:#{normal_key},Escape}" #   #00AAAA #   } {

	#   escape_on_normal
	#   bind -T copy-mode-vi "$prefix_key" "$prefix_normal"
	#      bind -T copy-mode "$prefix_key" "$prefix_normal"

%endif #   "#{==:#{normal_key},Escape}" #   }

#   %endif #   "#{!=:#{normal_key},#{prefix_key}}" #   }

#   ----------------------------------------------------------------------------------------------
#
#   %endif #   0 #   Bypass $prefix_normal and $normal_quit
#

	%hidden normal_enter="
	#   mode_monitor=
	setenv -ghu mode_monitor
#   set -p '@mode-pre' '#{@mode-cur}'
	run -b 'mode_cur=`command tmux show -pqv @mode-cur` && [ -z $mode_cur ] || command tmux set -p @mode-pre $mode_cur'
	#   select-pane -P 'fg=green,bg=#{prefix_bg_on_light}'
	#   if-shell -F '#{||:#{client_prefix},#{==:#{client_key_table},prefix}}' {
	if-shell -F '#{client_prefix}' { # [1507]
		switch-client -T root
	}
#   } {
#       switch-client -T prefix
#       switch-client -T root
#   }
#   prefix_enter or normal_quit
#   if-shell -F '#{assist_key}' {
#       bind -T copy-mode-vi '$assist_key' assist_on_normal
#          bind -T copy-mode '$assist_key' assist_on_normal
#   }
	bind -T copy-mode-vi '$escape_key' escape_on_normal
	   bind -T copy-mode '$escape_key' escape_on_normal
	if-shell -F '#{pane_in_mode}' {
		$normal_quit
	} {
	#   send-keys C-c #   Escape
	#   $color_terminal #   'jump to backward' error
	#   select-pane -P 'fg=green,bg=#{prefix_bg_on_light}'

	#   bind -T prefix '$prefix_key' $prefix_quit
	#   bind -T root   '$prefix_key' $prefix_enter
	#   You don't need these because vim could disable $normal_key by itself when in insert-mode
	#   if-shell -F '#{@is-vim}' {
	#       if-shell -F '#{@is-cmd}' {
	#           copy-mode
	#           $color_normal
	#       } {
	#           if-shell -F '#{@is-float}' {
	#               send-keys $escape_key
	#           #   send-keys Escape #   C-c
	#               set-option -p -u -t '$TMUX_PANE' @is-float #   shut off this channel
	#           } {
	#               copy-mode
	#               $color_normal
	#           }
	#       }
	#   } {
	#   if-shell -F '#{@is-vim}' {} {
		#   send-keys $normal_key #   ?
			$color_normal
		#   run '\tmux color_normal' #   let mode-changed hook handle it ?
	#   }
			copy-mode #   you can not enter C-w to vim without quit copy-mode first
			set -p '@mode-cur' 'normal'
	#   }
	#   switch-client -T prefix #   let mode-changed hook do it since copy-mode initiated
	#   $color_prefix
	}
		setenv -gh mode_monitor 'on'
#   mode_monitor='on'
#   if-shell -F '#{!=:#{nesting_support},1}' {
#       setenv -gh  mode_monitor 'on'
#   } {
#       setenv -gh  mode_monitor $mode_monitor
#   }
	"
	%if "#{assist_key}"
		%hidden normal_enter="
		$normal_enter
		bind -T copy-mode-vi '$assist_key' assist_on_normal
		   bind -T copy-mode '$assist_key' assist_on_normal
		"
	%endif

	#    Depends on normal_enter
	%hidden signal_root="
	if-shell -F '#{@is-vim}' {
		if-shell -F '#{@is-insert}' {
			if-shell -F '#{@is-visual}' {} {
				send-keys C-c #   Escape
			}
		}
	#   send-keys SPACE N
	#   send-keys ESCAPE \"M-$normal_key\" C-m
	#   If you don't send $normal_key, you will not get back correct input on nvim's replace-mode/insert-mode
	#   [alt/meta+normal_mode_key](https://vim.fandom.com/wiki/Avoid_the_escape_key)
	#   send-keys \"M-$normal_key\"
		send-keys M-Escape
	} {
		run -C normal_enter
	}
	"

#    Depends on signal_root
	%hidden normal_toggle="
	#   mode_monitor=
	setenv -ghu mode_monitor
	run -b 'mode_cur=`command tmux show -pqv @mode-cur` && [ -z $mode_cur ] || command tmux set -p @mode-pre $mode_cur'
	if-shell -F '#{client_prefix}' {
		switch-client -T root
	}
	#   $color_terminal #   'jump to backward' error
	#   if-shell -F '#{&&:#{rescue},#{@is-vim}}' {
	#       $vim_rescue
	#       #   $prefix_quit
	#   }
	bind -T copy-mode-vi '$escape_key' escape_on_normal
	   bind -T copy-mode '$escape_key' escape_on_normal
	if-shell -F '#{pane_in_mode}' {
		$normal_quit
	#   $color_normal
	#   #   run '\tmux color_normal' #   let mode-changed hook handle it ?
	#   if-shell -F '#{selection_present}' {
	#       send-keys -X clear-selection
	#   } {
	#       send-keys -X cancel
	#       switch-client -T root
	#       $color_terminal
	#   #   run '\tmux color_terminal'
	#       if-shell -F '#{@is-vim}' {
	#           send-keys C-c #   Escape
	#       }
	#   }
	#
	#   if-shell -F '#{client_prefix}' {
	#   #   switch-client -T root
	#   #   if-shell -F '#{selection_present}' {
	#   #       send-keys -X clear-selection
	#   #   } {
	#           send-keys -X cancel
	#           switch-client -T root
	#           run '\tmux color_terminal'
	#           if-shell -F '#{@is-vim}' {
	#               send-keys C-c #   Escape
	#           }
	#           copy-mode
	#   #   }
	#   }
	} {
	#   #   select-pane
	#       $color_normal
	#   #   run '\tmux color_normal' #   let mode-changed hook handle it ?
	#   #   send-keys ESCAPE 'SPACE V'
	#       copy-mode
		$signal_root
	}
	#   Pure copy-mode, otherwise h/j/k/l will move to other panes
	#   switch-client -T prefix
	#   $color_prefix
		setenv -gh mode_monitor 'on'
#   mode_monitor='on'
#   if-shell -F '#{!=:#{nesting_support},1}' {
#       setenv -gh  mode_monitor 'on'
#   } {
#       setenv -gh  mode_monitor $mode_monitor
#   }
#   mode_toggle #   recursively calling
	"
	%if "#{assist_key}"
		%hidden normal_toggle="
		$normal_toggle
		bind -T copy-mode-vi '$assist_key' assist_on_normal
		   bind -T copy-mode '$assist_key' assist_on_normal
		"
	%endif

	%if   "#{==:#{prefix_key},Escape}" #   #AA0000

		display -p "# [1667] prefix_key: #{prefix_key}"

	%elif "#{==:#{normal_key},Escape}" #   #00AAAA

		display -p "# [1671] normal_key: #{normal_key}"

		#   %hidden normal_enter="copy-mode"
		#   Reducing the dependencies on @is-vim is a better choice because vim might be failed
		#   set-option -g @is-vim      false # wrong operation. if-shell -F "#{@is-vim}" only read the pane option value

		#   Will be override by prefix_key binding when they share the same key

		#   Makes vim/nvim complicated if $normal_key == Escape
		#   %hidden normal_enter="
		#       bind   -T prefix '$prefix_key' switch-client -T root
		#       bind   -T root '$prefix_key' if-shell true {
		#           switch-client -T prefix
		#           $color_prefix
		#           #   display-panes -N
		#       }
		#       if-shell -F '#{@is-vim}' 'send-keys $normal_key' 'copy-mode'
		#   "

	%endif

	%if "#{nesting_support}"
		setenv -gh  normal_quit   "$normal_quit"
		setenv -gh  normal_enter  "$normal_enter"
		setenv -gh  normal_toggle "$normal_toggle"
	%endif

%endif #   "#{normal_enter}"

#   %endif #   "#{!=:#{normal_key},#{prefix_key}}" #   }

#   #000000 normal_general___________________________________________________________________________


#   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#   Keeping the default key binding as a backup
	unbind -T copy-mode-vi q
	#   Using "$normal_quit" as the RHS won't work for tmux bug (issue #4234)
	  bind -T copy-mode-vi q "run -C normal_quit"
		 bind -T copy-mode q "run -C normal_quit"

#   [Is it possible to support interactive command in run-shell?](https://github.com/tmux/tmux/issues/3187)

#   %if "#{!=:#{normal_key},#{prefix_key}}" #   deprecated
#   %if   "#{==:#{prefix_key},Escape}" #   #AA0000
	unbind -T prefix [
#     unbind -T root [

	  bind -T prefix [ "
	  #   mode_monitor=
		setenv -ghu mode_monitor
		#   if-shell -F '#{||:#{client_prefix},#{==:#{client_key_table},prefix}}' {
		if-shell -F '#{client_prefix}' { # [1724]
			switch-client -T root
		#   $color_terminal
		}
		if-shell -F '#{pane_in_mode}' {
			send-keys -X cancel
			$color_terminal
		} {
			copy-mode
			$color_normal
		}
	#   run '\tmux color_normal' #   let mode-changed hook handle it ?
	#   run '\tmux display -p #{color_normal}'
		setenv -gh mode_monitor 'on'
	#   mode_monitor='on'
	#   if-shell -F '#{!=:#{nesting_support},1}' {
	#       setenv -gh  mode_monitor 'on'
	#   } {
	#       setenv -gh  mode_monitor $mode_monitor
	#   }
	"

#   %elif "#{==:#{normal_key},Escape}" #   #00AAAA

#   %endif #   "#{==:#{normal_key},Escape}"
#   %endif #   "#{!=:#{normal_key},#{prefix_key}}" #   deprecated

#   bind    [ run-shell 'tmux-vim-pager'
#
#   bind   -n "$prefix_key" copy-mode # using Backtick as copy-mode initiator does not work without restart tmux
#   bind   -n "`"           copy-mode
#   bind   -T root          "$normal_key" copy-mode
#   run -C 'bind -n Escape  copy-mode'
#   bind   -n Tab           copy-mode
#   bind   -n Escape        send-keys "$prefix_key-["

	unbind -n C-d
#   bind -T copy-mode-vi C-d           send-keys -X halfpage-down

	   unbind -n "$toggle_key"
		  unbind "$toggle_key"
			bind "$toggle_key" "$normal_toggle"
		 bind -n "$toggle_key" "$normal_toggle"
		#   bind "$toggle_key" "$normal_enter"

	unbind -T copy-mode-vi "$toggle_key"
	   unbind -T copy-mode "$toggle_key"
	  bind -T copy-mode-vi "$toggle_key" "$normal_quit"
		 bind -T copy-mode "$toggle_key" "$normal_quit"
	unbind -T copy-mode-vi [
	   unbind -T copy-mode [
	  bind -T copy-mode-vi [ "$normal_quit"
		 bind -T copy-mode [ "$normal_quit"

	#   "replace-mode"
		unbind -T root r
		  bind -T root r "
		  if-shell -F '#{@is-vim}' {
			  unbind -T root '$escape_key'
		  }
		  send-keys r
		  "
		unbind -T root R
		  bind -T root R "
		  if-shell -F '#{@is-vim}' {
			  unbind -T root '$escape_key'
		  }
		  send-keys R
		  "

#   bind -T copy-mode-vi "$toggle_key" {
#       if-shell -F "#{selection_present}" {
#           send-keys -X clear-selection
#       } {
#           send-keys -X cancel
#           switch-client -T root
#           select-pane -P bg=terminal
#       #   "$color_terminal" #   ?   #   "#{color_terminal}" #   ?
#           if-shell -F "#{@is-vim}" {
#               send-keys "Escape"
#           }
#       }
#   }

#   bind   -n "$toggle_key"         copy-mode-vi #   unknown command: copy-mode-vi -- it's a mode, not a command
#   bind   -n Escape                   copy-mode-vi
#   bind   -n "$toggle_key"         confirm-before -p "kill-pane #P? (y/n)" kill-pane
#   bind   -n "$toggle_key"         copy-mode \; select-pane -P "fg=default,bg=#{normal_background}"

#   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#   Implement CursorMoved in tmux ?
#   unbind -n h
#   unbind -n l
#   unbind -n j
#   unbind -n k
#   bind -n h if-shell -F "#{is-vim}" 'send-keys h ; select-pane -P bg=terminal '

# # %hidden color_up="
# # $color_toggle
# # send-keys -X cursor-up
# # "
# # bind -T copy-mode-vi k "$color_up
# # selectp" #   just a test, and works

# # unknown command:
# # bind -T copy-mode-vi k {
# # $color_toggle
# # send-keys -X cursor-up
# # }
# # bind -T copy-mode-vi k {
# # if-shell -F "#{pane_in_mode}" {
# #     select-pane -P "bg=#{normal_background}"
# # } {
# # if-shell -F "#{client_prefix}" {
# #     select-pane -P "bg=$prefix_background"
# # } {
# #     select-pane -P bg=terminal
# # }
# # }
# # send-keys -X cursor-up }

#       unbind -T copy-mode-vi k
#       bind -T copy-mode-vi k "
#       send-keys -X cursor-up
#   #   $color_toggle
#       "
#
#       unbind -T copy-mode-vi h
#       bind -T cory-mode-vi h "
#       send-keys -X cursor-left
#   #   $color_toggle
#       "
#
#       unbind -T copy-mode-vi l
#       bind -T copy-mode-vi l "
#       send-keys -X cursor-right
#   #   $color_toggle
#       "
#
#       unbind -T copy-mode-vi j
#       bind -T copy-mode-vi j "
#       send-keys -X cursor-down
#   #   $color_toggle
#       "
#
#       unbind -T root h
#       bind -T root h "
#           send-keys h
#       #   $color_toggle #   too heavy
#       "
#       unbind -T root l
#       bind -T root l "
#           send-keys l
#       #   $color_toggle #   too heavy
#       "
#       unbind -T root j
#       bind -T root j "
#           send-keys j
#       #   $color_toggle #   too heavy
#       "
#       unbind -T root k
#       bind -T root k "
#           send-keys k
#       #   $color_toggle #   too heavy
#       "
#

#
#
#
#
#


#   %hidden color_toggle='
#   tmux if-shell -F "#{pane_in_mode}" {
#       tmux select-pane -P "fg=default,bg=#{normal_background}"
#       tmux set -p window-active-style "fg=default,bg=#{normal_background}"
#   } {
#       if-shell -F "#{client_prefix}" {
#           tmux select-pane -P "fg=default,bg=#{prefix_background}"
#           tmux set -p window-active-style "fg=default,bg=#{prefix_background}"
#       } {
#           tmux select-pane -P bg=terminal
#           tmux set -p window-active-style bg=terminal
#       }
#   }
#   '

	%hidden color_toggle="
	if-shell -F '#{pane_in_mode}' {
		$color_normal
	#   run -C 'color_normal'
	#   Got "dragging" effect, poor compile and run performance ? No
	#   select-pane -P 'bg=#{normal_background}' #   got dynamic value
	#   select-pane -P bg=$normal_background     #   got static value
	#   set -p window-active-style bg=$normal_background #   got static value #   after-set-option recursive ?
	} {
		if-shell -F '#{client_prefix}' {
			$color_prefix
		#   run '\tmux color_prefix'
		#   Got "dragging" effect, poor compile and run performance ? No
		#   select-pane -P 'bg=#{prefix_background}' #   got dynamic value
		#   select-pane -P bg=$prefix_background     #   got static value
		#   set -p window-active-style bg=$prefix_background #   got static value #   after-set-option recursive ?
		} {
			$color_terminal
		#   run '\tmux color_terminal'
		#   select-pane -P bg=terminal
		#   set -p window-active-style bg=terminal   #   got static value         #   after-set-option recursive ?
		}
	}
	"
#   %hidden style_on_client_prefix='
#   if-shell -F "#{client_prefix}" {
#       set -p window-active-style "bg=#{prefix_background}"
#   } {
#       set -p window-active-style bg=terminal
#   }
#   '

	%hidden select_on_client_prefix="
	if-shell -F '#{client_prefix}' {
		$color_prefix
	#   run '\tmux color_prefix'
	} {
		$color_terminal
	#   run '\tmux color_terminal'
	}
	"

#   Composition factory #AABB00

nesting_parse_route=
setenv -gh nesting_execute_route ""

#   Moved to init.conf but useless

%if "#{!=:#{nesting_support},1}"

#   Tmux 3.4 support this
%if "#{&&:#{escape_key},#{assist_key}}"
#   setenv -gh init '
	%hidden init='
	display -p "" # [1969]
#   %if "#{escape_key}"
	unbind -T   root "$escape_key" # $normal_key
	unbind -T prefix "$escape_key" # $normal_key

#   %hidden escape_on_root=
	setenv -ghu escape_on_root #   unknown variable: escape_on_root
#   setenv -gh  escape_on_root $escape_on_root

#   %if '#{escape_on_root}'
#       display -p '[1812] [error] escape_on_root already defined: #{escape_on_root}'
#       confirm-before -p 'escape_on_root already defined. Kill session #{session_id} ? (y/n)' kill-session #   no current client
#   %else
#       display -p '[1815] [succeeded] escape_on_root already cleared: #{escape_on_root}'
#   %endif

#   %hidden bind_escape_on_root=
	setenv -ghu bind_escape_on_root

#   %hidden escape_on_prefix=
	setenv -ghu escape_on_prefix

#   %hidden bind_escape_on_prefix=
	setenv -ghu bind_escape_on_prefix

#   %hidden     escape_on_normal=
	setenv -ghu escape_on_normal

#   %hidden unbind_escape_on_root="unbind -T root \"$escape_key\""
	setenv -gh unbind_escape_on_root "unbind -T root \"$escape_key\""

#   %hidden unbind_escape_on_prefix="unbind -T prefix '$escape_key'"
	setenv -gh unbind_escape_on_prefix "unbind -T prefix \"$escape_key\""

#   %hidden unbind_escape_on_normal="
#       unbind -T copy-mode    '$escape_key'
#       unbind -T copy-mode-vi '$escape_key'
#       "
	setenv -gh unbind_escape_on_normal "
		unbind -T copy-mode    \"$escape_key\"
		unbind -T copy-mode-vi \"$escape_key\"
		"

	display -p "# [2012] escape_key: #{escape_key}"

#   %else
#   #   %hidden unbind_escape_on_root=
#       setenv -ghu unbind_escape_on_root
#   #   %hidden     unbind_escape_on_prefix=
#       setenv -ghu unbind_escape_on_prefix
#   #   %hidden     unbind_escape_on_normal=
#       setenv -ghu unbind_escape_on_normal
#   %endif

#   %if "#{assist_key}"
	unbind -T   root "$assist_key"

#   %hidden assist_on_root=
	setenv -ghu assist_on_root

#   %hidden bind_assist_on_root=
	setenv -ghu bind_assist_on_root

#   %hidden assist_on_prefix=
	setenv -ghu assist_on_prefix

#   %hidden bind_assist_on_prefix=
	setenv -ghu bind_assist_on_prefix

#   %hidden assist_on_normal=
	setenv -ghu assist_on_normal

#      %hidden unbind_assist_on_root="unbind -T root '$assist_key'"
	setenv -gh unbind_assist_on_root   "unbind -T root \"$assist_key\""
#      %hidden unbind_assist_on_prefix="unbind -T prefix '$assist_key'"
	setenv -gh unbind_assist_on_prefix "unbind -T prefix \"$assist_key\""
#   %hidden unbind_assist_on_normal="
#       unbind -T copy-mode    '$assist_key'
#       unbind -T copy-mode-vi '$assist_key'
#       "
	setenv -gh unbind_assist_on_normal "
		   unbind -T copy-mode \"$assist_key\"
		unbind -T copy-mode-vi \"$assist_key\"
		"

	display -p "# [2054] assist_key: #{assist_key}"

#   %else
#   #   %hidden     unbind_assist_on_root=
#       setenv -ghu unbind_assist_on_root
#   #   %hidden unbind_assist_on_prefix=
#       setenv -ghu unbind_assist_on_prefix
#   #   %hidden     unbind_assist_on_normal=
#       setenv -ghu unbind_assist_on_normal
#   %endif

	display -p "# [2065] prefix_key: #{prefix_key}"
	display -p "# [2066] normal_key: #{normal_key}"

	display -p "# [2068] Composition factory initialized"
	'

%elif "#{&&:#{escape_key},#{==:#{assist_key},}}"
#   setenv -gh init '
	%hidden init='
	display -p "" # [2074]
	unbind -T   root "$escape_key" # $normal_key
	unbind -T prefix "$escape_key" # $normal_key
	#   %if "#{escape_on_root}"
#   %hidden escape_on_root=
#   The comment will be part of the output
	setenv -ghu escape_on_root #   unknown variable: escape_on_root
#   setenv -gh  escape_on_root $escape_on_root
#   %endif

#   %if '#{escape_on_root}'
#       display -p '[1812] [error] escape_on_root already defined: #{escape_on_root}'
#       confirm-before -p 'escape_on_root already defined. Kill session #{session_id} ? (y/n)' kill-session #   no current client
#   %else
#       display -p '[1815] [succeeded] escape_on_root already cleared: #{escape_on_root}'
#   %endif

#   %hidden bind_escape_on_root=
	setenv -ghu bind_escape_on_root

#   %hidden escape_on_prefix=
	setenv -ghu escape_on_prefix

#   %hidden bind_escape_on_prefix=
	setenv -ghu bind_escape_on_prefix

#   %hidden     escape_on_normal=
	setenv -ghu escape_on_normal

#   %hidden unbind_escape_on_root="unbind -T root \"$escape_key\""
	setenv -gh unbind_escape_on_root "unbind -T root \"$escape_key\""

#   %hidden unbind_escape_on_prefix="unbind -T prefix '$escape_key'"
	setenv -gh unbind_escape_on_prefix "unbind -T prefix \"$escape_key\""

#   %hidden unbind_escape_on_normal="
#       unbind -T copy-mode    '$escape_key'
#       unbind -T copy-mode-vi '$escape_key'
#       "
	setenv -gh unbind_escape_on_normal "
		unbind -T copy-mode    \"$escape_key\"
		unbind -T copy-mode-vi \"$escape_key\"
		"

	display -p "# [2118] escape_key: #{escape_key}"

#   %hidden     unbind_assist_on_root=
	setenv -ghu unbind_assist_on_root
#   %hidden unbind_assist_on_prefix=
	setenv -ghu unbind_assist_on_prefix
#   %hidden     unbind_assist_on_normal=
	setenv -ghu unbind_assist_on_normal

	display -p "# [2127] assist_key: #{assist_key}"

	display -p "# [2129] prefix_key: #{prefix_key}"
	display -p "# [2130] normal_key: #{normal_key}"

	display -p "# [2132] Composition factory initialized"
	'
%elif "#{&&:#{==:#{escape_key},},#{assist_key}}"
#   setenv -gh init '
	%hidden init='
	display -p "" # [2137]
#   %hidden unbind_escape_on_root=
	setenv -ghu unbind_escape_on_root
#   %hidden     unbind_escape_on_prefix=
	setenv -ghu unbind_escape_on_prefix
#   %hidden     unbind_escape_on_normal=
	setenv -ghu unbind_escape_on_normal

	display -p "# [2145] escape_key: #{escape_key}"

	unbind -T   root "$assist_key"

#   %hidden assist_on_root=
	setenv -ghu assist_on_root

#   %hidden bind_assist_on_root=
	setenv -ghu bind_assist_on_root

#   %hidden assist_on_prefix=
	setenv -ghu assist_on_prefix

#   %hidden bind_assist_on_prefix=
	setenv -ghu bind_assist_on_prefix

#   %hidden assist_on_normal=
	setenv -ghu assist_on_normal

#      %hidden unbind_assist_on_root="unbind -T root '$assist_key'"
	setenv -gh unbind_assist_on_root   "unbind -T root \"$assist_key\""
#      %hidden unbind_assist_on_prefix="unbind -T prefix '$assist_key'"
	setenv -gh unbind_assist_on_prefix "unbind -T prefix \"$assist_key\""
#   %hidden unbind_assist_on_normal="
#       unbind -T copy-mode    '$assist_key'
#       unbind -T copy-mode-vi '$assist_key'
#       "
	setenv -gh unbind_assist_on_normal "
		   unbind -T copy-mode \"$assist_key\"
		unbind -T copy-mode-vi \"$assist_key\"
		"

	display -p "# [2177] assist_key: #{assist_key}"

	display -p "# [2179] prefix_key: #{prefix_key}"
	display -p "# [2180] normal_key: #{normal_key}"

	display -p "# [2182] Composition factory initialized"
	'
%elif "#{&&:#{==:#{escape_key},},#{==:#{assist_key},}}"
#   setenv -gh init '
	%hidden init='
	display -p "" # [2187]
#   %hidden unbind_escape_on_root=
	setenv -ghu unbind_escape_on_root
#   %hidden     unbind_escape_on_prefix=
	setenv -ghu unbind_escape_on_prefix
#   %hidden     unbind_escape_on_normal=
	setenv -ghu unbind_escape_on_normal

	display -p "# [2195] escape_key: #{escape_key}"

#   %hidden     unbind_assist_on_root=
	setenv -ghu unbind_assist_on_root
#   %hidden unbind_assist_on_prefix=
	setenv -ghu unbind_assist_on_prefix
#   %hidden     unbind_assist_on_normal=
	setenv -ghu unbind_assist_on_normal

	display -p "# [2204] assist_key: #{assist_key}"
	'
%endif

%if "#{alias_index_17}"
		   display -p "# [2209] \$alias_index_17 occupied: $alias_index_17"
	confirm-before -p "# [2210] \$alias_index_17 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_17=17
	%if "#{init}"
		set -s  command-alias[$alias_index_17] init="$init"
		#   %if #{!=:#{nesting_support},1}
		#       setenv -gh init_alias_name "init" #   decoupling from the editor
		#   %else
			init_alias_name="init"
		#       setenv -gh init_alias_name "$init_alias_name" #   decoupling from the editor
		#   %endif
	%else
			   display -p "# [2222] \$init not defined: $init"
		confirm-before -p "# [2223] \$init not defined, and kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_17
%endif

#   Useless
#   run -b '\tmux init' #   does not work
#   Useless
#   run -C '#{init}'    #   syntax error (comes from %if)
#   Useless
#   run -C "$init"      #   syntax error (comes from %if)

	run -C "$init"      #   syntax error (comes from %if)

%endif #   "#{!=:#{nesting_support},1}"

#   source "$XDG_CONFIG_HOME/tmux/init.conf"


%if "#{&&:#{nesting_support},#{==:#{init_alias_name},}}"

%if    "#{&&:#{escape_key},#{nesting_support}}"
	unbind -T   root "$escape_key" # $normal_key
	unbind -T prefix "$escape_key" # $normal_key

	%hidden     escape_on_root=
	setenv -ghu escape_on_root

	%if "#{escape_on_root}"
			   display -p "# [2252] [error] escape_on_root already defined: #{escape_on_root}"
		confirm-before -p "# [2253] [error] escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%else
			   display -p "# [2255] [succeeded] escape_on_root already cleared: #{escape_on_root}"
	#   run -b 'echo "# [2256] [succeeded] escape_on_root already cleared: #{escape_on_root}" >> $HOME/.vim.log'
	%endif

	%hidden     bind_escape_on_root=
	setenv -ghu bind_escape_on_root


	%hidden     escape_on_prefix=
	setenv -ghu escape_on_prefix

	%hidden     bind_escape_on_prefix=
	setenv -ghu bind_escape_on_prefix

	%hidden     escape_on_normal=
	setenv -ghu escape_on_normal

	%hidden unbind_escape_on_root="unbind -T root '$escape_key'"

	%hidden unbind_escape_on_prefix="unbind -T prefix '$escape_key'"

	%hidden unbind_escape_on_normal="
		unbind -T copy-mode    '$escape_key'
		unbind -T copy-mode-vi '$escape_key'
		"

#   display -p "# [2281] escape_key: #{escape_key}"
#   display -p "# [2282] nesting_support: #{nesting_support}"
#   %else
%elif "#{&&:#{==:#{escape_key},},#{nesting_support}}"
	%hidden     unbind_escape_on_root=
	setenv -ghu unbind_escape_on_root
	%hidden     unbind_escape_on_prefix=
	setenv -ghu unbind_escape_on_prefix
	%hidden     unbind_escape_on_normal=
	setenv -ghu unbind_escape_on_normal
%endif

%if    "#{&&:#{assist_key},#{nesting_support}}"
	unbind -T   root "$assist_key"

	%hidden assist_on_root=
	setenv -ghu assist_on_root

	%hidden bind_assist_on_root=
	setenv -ghu bind_assist_on_root

	%hidden assist_on_prefix=
	setenv -ghu assist_on_prefix

	%hidden bind_assist_on_prefix=
	setenv -ghu bind_assist_on_prefix

	%hidden assist_on_normal=
	setenv -ghu assist_on_normal

	%hidden unbind_assist_on_root="unbind -T root '$assist_key'"

	%hidden unbind_assist_on_prefix="unbind -T prefix '$assist_key'"

	%hidden unbind_assist_on_normal="
		unbind -T copy-mode    '$assist_key'
		unbind -T copy-mode-vi '$assist_key'
		"

#   display -p "# [2320] assist_key: #{assist_key}"
#   display -p "# [2321] nesting_support: #{nesting_support}"
#   %else
%elif  "#{&&:#{==:#{assist_key},},#{nesting_support}}"
	%hidden     unbind_assist_on_root=
	setenv -ghu unbind_assist_on_root
	%hidden     unbind_assist_on_prefix=
	setenv -ghu unbind_assist_on_prefix
	%hidden     unbind_assist_on_normal=
	setenv -ghu unbind_assist_on_normal
%endif

#   display -p "# [2332] prefix_key: #{prefix_key}"
#   display -p "# [2333] normal_key: #{normal_key}"

	display -p "# [2335] Composition factory initialized"
%endif #   "#{&&:#{nesting_support},#{==:#{init_alias_name},}}"

	nesting_parse_route=0
	setenv -gh nesting_execute_route 0

#   Escape -> prefix-mode -> assist_key -> copy-mode
%if   "#{==:#{prefix_key},Escape}" #   #AA0000
#   if-shell -F "#{==:#{prefix_key},Escape}" { #   #AA0000

#   source "$XDG_CONFIG_HOME/tmux/prefix-escape.conf"

	display -p "# [2347] prefix_key: #{prefix_key} [current policy]"
    display -p "# [2348] assist_key: #{assist_key} [current policy]"
#   Useless
#   run -C '#{init}'    #   syntax error (comes from %if)
#   Useless
#   run -C "$init"      #   syntax error (comes from %if)
#   run -b '\tmux init' #   does not work

#   source "$XDG_CONFIG_HOME/tmux/init.conf"

	%if "#{&&:#{!=:#{nesting_support},1},#{==:#{init_alias_name},}}"
#   %if "#{!=:#{nesting_support},1}"
		%if    "#{&&:#{escape_key},#{==:#{prefix_key},Escape}}"
			unbind -T   root "$escape_key" # $normal_key
			unbind -T prefix "$escape_key" # $normal_key

		#   %hidden     escape_on_root=
			setenv -ghu escape_on_root

		#   %if "#{&&:#{escape_on_root},#{==:#{prefix_key},Escape}}"
		#       display -p "# [2367] [error] escape_on_root already defined: #{escape_on_root}"
		#       confirm-before -p "# [2368] [error] escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		#   %else
		#       display -p "# [2370] [succeeded] escape_on_root already cleared: #{escape_on_root}"
		#   %endif

		#   %hidden     bind_escape_on_root=
			setenv -ghu bind_escape_on_root


		#   %hidden     escape_on_prefix=
			setenv -ghu escape_on_prefix

		#   %hidden     bind_escape_on_prefix=
			setenv -ghu bind_escape_on_prefix

		#   %hidden     escape_on_normal=
			setenv -ghu escape_on_normal

		#   %hidden unbind_escape_on_root="unbind -T root '$escape_key'"
			setenv -gh unbind_escape_on_root "unbind -T root '$escape_key'"
		#   %hidden unbind_escape_on_prefix="unbind -T prefix '$escape_key'"
			setenv -gh unbind_escape_on_prefix "unbind -T prefix '$escape_key'"
		#   %hidden unbind_escape_on_normal="
		#       unbind -T copy-mode    '$escape_key'
		#       unbind -T copy-mode-vi '$escape_key'
		#       "
			setenv -gh unbind_escape_on_normal "
				unbind -T copy-mode    '$escape_key'
				unbind -T copy-mode-vi '$escape_key'
				"
			display -p "# [2398] escape_key: #{escape_key}"
		%elif  "#{&&:#{==:#{escape_key},},#{==:#{prefix_key},Escape}}"
			#   %hidden     unbind_escape_on_root=
			setenv -ghu unbind_escape_on_root
		#   %hidden     unbind_escape_on_prefix=
			setenv -ghu unbind_escape_on_prefix
		#   %hidden     unbind_escape_on_normal=
			setenv -ghu unbind_escape_on_normal
		%endif

		%if    "#{&&:#{assist_key},#{==:#{prefix_key},Escape}}"
			unbind -T   root "$assist_key"

		#   %hidden assist_on_root=
			setenv -ghu assist_on_root

		#   %hidden bind_assist_on_root=
			setenv -ghu bind_assist_on_root

		#   %hidden assist_on_prefix=
			setenv -ghu assist_on_prefix

		#   %hidden bind_assist_on_prefix=
			setenv -ghu bind_assist_on_prefix

		#   %hidden assist_on_normal=
			setenv -ghu assist_on_normal

		#      %hidden unbind_assist_on_root="unbind -T root '$assist_key'"
			setenv -gh unbind_assist_on_root   "unbind -T root '$assist_key'"
		#      %hidden unbind_assist_on_prefix="unbind -T prefix '$assist_key'"
			setenv -gh unbind_assist_on_prefix "unbind -T prefix '$assist_key'"
		#   %hidden unbind_assist_on_normal="
		#       unbind -T copy-mode    '$assist_key'
		#       unbind -T copy-mode-vi '$assist_key'
		#       "
			setenv -gh unbind_assist_on_normal "
				unbind -T copy-mode    '$assist_key'
				unbind -T copy-mode-vi '$assist_key'
				"

			display -p "# [2439] assist_key: #{assist_key}"
		%elif  "#{&&:#{==:#{assist_key},},#{==:#{prefix_key},Escape}}"
		#   %hidden     unbind_assist_on_root=
			setenv -ghu unbind_assist_on_root
		#   %hidden     unbind_assist_on_prefix=
			setenv -ghu unbind_assist_on_prefix
		#   %hidden     unbind_assist_on_normal=
			setenv -ghu unbind_assist_on_normal
		%endif

		display -p "# [2449] prefix_key: #{prefix_key}"
		display -p "# [2450] normal_key: #{normal_key}"

		display -p "# [2452] Composition factory initialized"
	%endif #   #{!=:#{nesting_support},1}

	%if "#{&&:#{prefix_quit},#{==:#{prefix_key},Escape}}"
	#   Go to $escape_on_normal
	%elif  "#{nesting_support}" #   tmux bug (issue #4234)
			   display -p "# [2458] \$prefix_quit not defined: $prefix_quit"
		confirm-before -p "# [2459] prefix_key: #{prefix_key}, \$prefix_quit not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif #   "#{prefix_quit}"

	#   %if    "#{nesting_support}"
	%if    "#{==:${one_stage_policy},1}"
		%if    "#{normal_quit}"
			%if   "#{&&:#{escape_on_normal},#{nesting_support}}" #   if-shell -F '#{escape_on_normal}' {
			#   %if "#{escape_on_normal}"
					   display -p "# [2467] [error] escape_on_normal already defined: #{escape_on_normal}"
				confirm-before -p "# [2468] [error] normal_key: #{normal_key}, escape_on_normal already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			#   %elif "#{nesting_support}" #   } {
			%else
				%if "#{&&:#{==:#{one_stage_policy},1},#{==:#{prefix_key},Escape}}" #   tmux bug (issue #4234)
				%hidden    escape_on_normal="# [2472] \n $prefix_enter"            #   %hidden    escape_on_normal="# [2472] \n $normal_quit"
			#   setenv -gh escape_on_normal "# [2473] \n $normal_quit"
				%endif
			%endif #   }
		%elif  "#{nesting_support}" #   tmux bug (issue #4234)
				   display -p "# [2477] \$normal_quit not defined: $normal_quit"
			confirm-before -p "# [2478] normal_key: #{normal_key}, \$normal_quit not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%endif #   "#{normal_quit}"
	%else
	#   %endif
	#   %if    '#{!=:#{one_stage_policy},1}'
		%if    "#{prefix_enter}"
			%if   "#{&&:#{escape_on_normal},#{nesting_support}}"
			#   %if "#{escape_on_normal}"
					   display -p "# [2486] [error] escape_on_normal already defined: #{escape_on_normal}"
				confirm-before -p "# [2487] prefix_key: #{prefix_key}, escape_on_normal already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			#   %elif "#{nesting_support}"
			%else
				%if "#{&&:#{!=:#{one_stage_policy},1},#{==:#{prefix_key},Escape}}" #   tmux bug (issue #4234)
				#   %hidden    escape_on_normal="
				#   # [2492] #   run 'echo \"# \[2876]\" >> $HOME/.vim.log'
				#   $prefix_enter"
				%hidden    escape_on_normal="# [2494] \n $prefix_enter"
			#   setenv -gh escape_on_normal "# [2495] \n $prefix_enter"
				%endif
			%endif
		%endif #   "#{prefix_enter}"
	%endif #   "#{one_stage_policy}"
	#   %else
	#       #   #AA0000 -- tmux bug (issue #4234)
	#       %if    "#{&&:#{one_stage_policy},#{==:#{prefix_key},Escape}}"
	#           setenv -gh escape_on_normal "$prefix_enter # [2503]"
	#       %elif  "#{&&:#{!=:#{one_stage_policy},1},#{==:#{prefix_key},Escape}}"
	#           setenv -gh escape_on_normal "$normal_quit  # [2505]"
	#       %endif
	#   %endif

	#   %if "#{nesting_support}"
	#   %if "#{||:#{&&:#{!=:#{prefix_enter},},#{==:#{prefix_key},Escape}},#{!=:#{nesting_support},1}}"
	%if "#{prefix_enter}"
		%if   "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
		nesting_parse_route=1 # put this variable definition into one of the end points in the depth direction of the conditional branch
		setenv -gh nesting_execute_route 1
		%endif
		%if "#{&&:#{escape_on_root},#{nesting_support}}"
			run 'echo "escape_on_root: $(\tmux display -p "#{escape_on_root}")" >> $HOME/.vim.log'
				   display -p "# [2518] [error] escape_on_root already defined: #{escape_on_root}"
			confirm-before -p "# [2519] [error] normal_key: #{normal_key}, escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%else
				   display -p "# [2521] [succeeded] escape_on_root already cleared: #{escape_on_root}"
		#   run -b 'echo "# [2522] [succeeded] escape_on_root already cleared: #{escape_on_root}" >> $HOME/.vim.log'
		%endif

		%if "#{&&:#{escape_on_root},#{nesting_support}}"
				   display -p "# [2526] [error] Vscape_on_root already defined: #{escape_on_root}"
			confirm-before -p "# [2527] prefix_key: #{prefix_key}, assist_key: #{assist_key}, escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			%if   "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
		#   display -p "# [2530] escape_on_root is gonna be assigned: #{escape_on_root}"
			%hidden    escape_on_root="# [2531] \n $prefix_enter"
			#   setenv -gh escape_on_root "if true { run 'echo [2824] >> $HOME/.vim.log' \n } \n $prefix_enter"
			#   setenv -gh escape_on_root "# [2533] \n $prefix_enter # [2533]"
		#   display -p "# [2534] [succeeded] escape_on_root was assigned: #{escape_on_root}"
			%endif
		%endif

		%if "#{&&:#{bind_escape_on_root},#{nesting_support}}"
				   display -p "# [2539] [error] bind_escape_on_root already defined: #{bind_escape_on_root}"
			confirm-before -p "# [2540] prefix_key: #{prefix_key}, assist_key: #{assist_key}, bind_escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			%if   "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
			%hidden    bind_escape_on_root="
			bind -T root '$escape_key' \"$prefix_enter\"
			"
		#   setenv -gh bind_escape_on_root "
		#   bind -T root '$escape_key' \"$prefix_enter\"
		#   "
			%endif
		%endif

		display -p "# [2552] nesting_parse_route    == #{nesting_parse_route}"
		display -p "# [2553] nesting_execute_route  == #{nesting_execute_route}"

	#   %else  #   "#{prefix_enter}"
	%elif  "#{nesting_support}" #   tmux bug (issue #4234)
			   display -p "# [2557] \$prefix_enter not defined: $prefix_enter"
		confirm-before -p "# [2558] prefix_key: #{prefix_key}, \$prefix_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif #   "#{prefix_enter}"
	#   %else
	#       %if    "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
	#       #   Useless
	#       #   if-shell -F "$prefix_enter" {} {
	#       #       display -p "# [2564] \$prefix_enter not defined: $prefix_enter"
	#       #       confirm-before -p "# [2565] prefix_key: #{prefix_key}, \$prefix_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	#       #   }
	#           setenv -gh escape_on_root "$prefix_enter"
	#           setenv -gh bind_escape_on_root "
	#           bind -T root '$escape_key' \"$prefix_enter\"
	#           "
	#       %endif
	#   %endif


	#   %if "#{nesting_support}"
	#   %if "#{&&:#{prefix_quit},#{==:#{prefix_key},Escape}}"
	#   %if "#{||:#{prefix_quit},#{!=:#{nesting_support},1}}"
	%if "#{prefix_quit}"
		%if "#{&&:#{escape_on_prefix},#{nesting_support}}"
				   display -p "# [2580] [error] escape_on_prefix already defined: #{escape_on_prefix}"
			confirm-before -p "# [2581] prefix_key: #{prefix_key}, escape_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			%if    "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
			%hidden    escape_on_prefix="# [2584] \n $prefix_quit"
		#   setenv -gh escape_on_prefix "# [2585] \n $prefix_quit"
		#   %if "#{==:#{prefix_quit},#{escape_on_prefix}}"
		#       display -p "prefix_quit == escape_on_prefix"
		#   %else
		#       display -p "prefix_quit != escape_on_prefix"
		#   %endif
			%endif
		%endif

		%if "#{&&:#{bind_escape_on_prefix},#{nesting_support}}"
				   display -p "# [2595] [error] bind_escape_on_prefix already defined: #{bind_escape_on_prefix}"
			confirm-before -p "# [2596] prefix_key: #{prefix_key}, bind_escape_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%else
			%if    "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
			%hidden    bind_escape_on_prefix="
			bind -T root '$escape_key' \"$prefix_quit\"
			"
		#   setenv -gh bind_escape_on_prefix "
		#   bind -T root '$escape_key' \"$prefix_quit\"
		#   "
			%endif
		%endif

		display -p "# [2608] nesting_parse_route    == #{nesting_parse_route}"
		display -p "# [2609] nesting_execute_route  == #{nesting_execute_route}"

	#   %else  #   "#{prefix_quit}"
	%elif  "#{nesting_support}" #   tmux bug (issue #4234)
			   display -p "# [2613] \$prefix_quit not defined: $prefix_quit"
		confirm-before -p "# [2614] prefix_key: #{prefix_key}, \$prefix_quit not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif #   "#{prefix_quit}"
	#   %else
	#       %if    "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
	#           setenv -gh escape_on_prefix "$prefix_quit"
	#           setenv -gh bind_escape_on_prefix "
	#           bind -T root '$escape_key' \"$prefix_quit\"
	#           "
	#       %endif
	#   %endif
	display -p "# [2624] escape_on_prefix <= prefix_quit"

	#   %if "#{nesting_support}"
	#   %if "#{&&:#{normal_enter},#{==:#{prefix_key},Escape}}"
	%if "#{normal_enter}"
		%if "#{&&:#{toggle_key},#{normal_toggle}}"
		#   unbind -n "$toggle_key"
		#      unbind "$toggle_key"
		#     bind -n "$toggle_key" "$normal_enter"
		#     bind -n "$toggle_key" "$signal_root"
		#        bind "$toggle_key" "$normal_toggle"
		#     bind -n "$toggle_key" "$normal_toggle"
		%endif

		%if    "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
		#   %hidden assist_on_root_nvim="$normal_enter"
		#   setenv -gh assist_on_root_nvim "$assist_on_root_nvim"
			#   normal_on_root_bind
		#   %hidden    normal_on_root_nvim_slot="$assist_on_root_nvim"
		%hidden    normal_on_root_nvim_slot="$normal_enter"
	#   setenv -gh normal_on_root_nvim_slot "$normal_enter" #   decoupling from the editor
		%hidden    normal_on_root_nvim_alias_name="normal_enter"
	#   setenv -gh normal_on_root_nvim_alias_name "normal_enter" #   decoupling from the editor
		%endif
	%endif
	#   %else
	#       %if    "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
	#           setenv -gh normal_on_root_nvim_slot "$normal_enter" #   decoupling from the editor
	#           setenv -gh normal_on_root_nvim_alias_name "normal_enter" #   decoupling from the editor
	#       %endif
	#   %endif

	%if   "#{&&:#{assist_key},#{==:#{prefix_key},Escape}}"

		#   %if "#{nesting_support}"
		%if "#{normal_enter}"
			%if "#{&&:#{assist_on_prefix},#{nesting_support}}"
					   display -p "# [2661] [error] assist_on_prefix already defined: #{assist_on_prefix}"
				confirm-before -p "# [2662] prefix_key: #{prefix_key}, assist_key: #{assist_key}, assist_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			%else
				%if   "#{&&:#{assist_key},#{==:#{prefix_key},Escape}}" #   #AA0000 -- tmux bug (issue #4234)
				%hidden    assist_on_prefix="# [2665] \n $normal_enter"
				#   setenv -gh assist_on_prefix "# [2666] \n $normal_enter"
				%endif
			%endif

			%if "#{&&:#{bind_assist_on_prefix},#{nesting_support}}"
					   display -p "# [2671] [error] bind_assist_on_prefix already defined: #{bind_assist_on_prefix}"
				confirm-before -p "# [2672] prefix_key: #{prefix_key}, assist_key: #{assist_key}, bind_assist_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			%else
				%if   "#{&&:#{assist_key},#{==:#{prefix_key},Escape}}" #   #AA0000 -- tmux bug (issue #4234)
				%hidden    bind_assist_on_prefix="
				#   bind -T prefix '$normal_key' \"$normal_prefix\"
				bind -T prefix '$assist_key' \"$normal_enter\"
				"
			#   setenv -gh bind_assist_on_prefix "
			#   bind -T prefix '$assist_key' \"#{normal_enter}\"
			#   "
				%endif
			%endif

			%if "#{&&:#{assist_on_root},#{nesting_support}}"
					   display -p "# [2686] [error] assist_on_root already defined: #{assist_on_root}"
				confirm-before -p "# [2687] prefix_key: #{prefix_key}, assist_key: #{assist_key}, assist_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			%else
				%if   "#{&&:#{assist_key},#{==:#{prefix_key},Escape}}" #   #AA0000 -- tmux bug (issue #4234)
				%hidden    assist_on_root="$signal_root"
			#   setenv -gh assist_on_root "$signal_root"

				display -p "# [2693] nesting_parse_route    == #{nesting_parse_route}"
				display -p "# [2694] nesting_execute_route  == #{nesting_execute_route}"

			#   display -p "assist_on_root   <= send-keys ESCAPE SPACE N"
				%hidden    bind_assist_on_root="
				#     bind -T root '$assist_key' \"$normal_enter\"
				#     bind -T root '$assist_key' send-keys ESCAPE SPACE N
				bind -T root '$assist_key' \"$assist_on_root\"
				"
			#   setenv -gh bind_assist_on_root "
			#   bind -T root '$assist_key' \"$assist_on_root\"
			#   "
				%endif
			%endif
		%else
				   display -p "# [2708] \$normal_enter not defined: $normal_enter"
			confirm-before -p "# [2709] prefix_key: #{prefix_key}, assist_key: #{assist_key}, \$normal_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%endif
		#   %else
		#       %if   "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
		#           setenv -gh assist_on_prefix "#{normal_enter}"
		#           setenv -gh bind_assist_on_prefix "
		#           bind -T prefix '$assist_key' \"#{normal_enter}\"
		#           "
		#           setenv -gh assist_on_root "$signal_root"
		#           setenv -gh bind_assist_on_root "
		#           bind -T root '$assist_key' \"$assist_on_root\"
		#           "
		#       %endif
		#   %endif

		#   %if "#{nesting_support}"
		%if "#{normal_quit}"
			%if "#{&&:#{assist_on_normal},#{nesting_support}}"
					   display -p "# [2727] [error] assist_on_normal already defined: #{assist_on_normal}"
				confirm-before -p "# [2728] prefix_key: #{prefix_key}, assist_key: #{assist_key}, assist_on_normal already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			%else
				%if   "#{&&:#{assist_key},#{==:#{prefix_key},Escape}}" #   #AA0000 -- tmux bug (issue #4234)
			#   %hidden    assist_on_normal_impl="$normal_quit"
				%hidden    assist_on_normal="# [2732] \n $normal_quit"
			#   %hidden    assist_on_normal="send-keys ESCAPE SETQUIT"
			#   setenv -gh assist_on_normal "# [2734] \n $normal_quit"
				%endif
			%endif
		%else
				   display -p "# [2738] \$normal_quit not defined: $normal_quit"
			confirm-before -p "# [2739] normal_key: #{normal_key}, \$normal_quit not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%endif #   "#{normal_quit}"
		#   %else
		#       %if   "#{==:#{prefix_key},Escape}" #   #AA0000 -- tmux bug (issue #4234)
		#           setenv -gh assist_on_normal "$normal_quit"
		#       %endif
		#   %endif

	#   %else  #   "#{assist_key}"
	%elif  "#{&&:#{==:#{assist_key},},#{==:#{prefix_key},Escape}}"
		#   %if "#{nesting_support}"
			%hidden     bind_assist_on_prefix=
			%hidden     bind_assist_on_root=
			%hidden     assist_on_root=
			%hidden     assist_on_prefix=
		#   %else
			%if   "#{&&:#{==:#{assist_key},},#{==:#{prefix_key},Escape}}" #   #AA0000 -- tmux bug (issue #4234)
				setenv -ghu bind_assist_on_prefix
				setenv -ghu bind_assist_on_root
				setenv -ghu assist_on_root
				setenv -ghu assist_on_prefix
			%endif
		#   %endif
	%endif #   "#{assist_key}"
#   }





#   }
#   %else #   "#{==:#{prefix_key},Escape}"
#   Escape -> copy-mode   -> assist_key -> prefix-mode
%elif "#{==:#{normal_key},Escape}" #   #00AAAA
#   %if "#{==:#{normal_key},Escape}" #   #00AAAA
#   if-shell -F "#{==:#{normal_key},Escape}" { #   #00AAAA

#   source "$XDG_CONFIG_HOME/tmux/normal-escape.conf"

	display -p "# [2778] normal_key: #{normal_key} [current policy]"
    display -p "# [2779] assist_key: #{assist_key} [current policy]"

#   Useless
#   run -C '#{init}' #   syntax error (comes from %if)
#   Useless
#   run -C "$init"   #   syntax error (comes from %if)
#   $init             #   unknown command:
#   if true { $init } #   unknown command:

#   source "$XDG_CONFIG_HOME/tmux/init.conf"


	%if "#{&&:#{!=:#{nesting_support},1},#{==:#{init_alias_name},}}"
#   %if #{!=:#{nesting_support},1}
		%if    "#{&&:#{escape_key},#{==:#{normal_key},Escape}}"
			unbind -T   root "$escape_key" # $normal_key
			unbind -T prefix "$escape_key" # $normal_key

		#   %hidden     escape_on_root=
			setenv -ghu escape_on_root

		#   %if "#{&&:#{escape_on_root},#{==:#{normal_key},Escape}}"
		#       display -p "# [2801] [error] escape_on_root already defined: #{escape_on_root}"
		#       confirm-before -p "# [2802] [error] escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		#   %else
		#       display -p "# [2804] [succeeded] escape_on_root already cleared: #{escape_on_root}"
		#   %endif

		#   %hidden     bind_escape_on_root=
			setenv -ghu bind_escape_on_root

		#%if "#{==:#{normal_key},Escape}" #   #00AAAA
		#       %hidden     escape_on_prefix=
				setenv -ghu escape_on_prefix
		#%endif

		#   %hidden     bind_escape_on_prefix=
			setenv -ghu bind_escape_on_prefix

		#   %hidden     escape_on_normal=
			setenv -ghu escape_on_normal

		#   %hidden unbind_escape_on_root="unbind -T root '$escape_key'"
			setenv -gh unbind_escape_on_root "unbind -T root '$escape_key'"
		#   %hidden unbind_escape_on_prefix="unbind -T prefix '$escape_key'"
			setenv -gh unbind_escape_on_prefix "unbind -T prefix '$escape_key'"

		#   %hidden unbind_escape_on_normal="
		#       unbind -T copy-mode    '$escape_key'
		#       unbind -T copy-mode-vi '$escape_key'
		#       "
			setenv -gh unbind_escape_on_normal "
				unbind -T copy-mode    '$escape_key'
				unbind -T copy-mode-vi '$escape_key'
				"

			display -p "# [2835] escape_key: #{escape_key}"
		%elif  "#{&&:#{==:#{escape_key},},#{==:#{normal_key},Escape}}"
		#   %hidden     unbind_escape_on_root=
			setenv -ghu unbind_escape_on_root
		#   %hidden     unbind_escape_on_prefix=
			setenv -ghu unbind_escape_on_prefix
		#   %hidden     unbind_escape_on_normal=
			setenv -ghu unbind_escape_on_normal
		%endif

		%if    "#{&&:#{assist_key},#{==:#{normal_key},Escape}}"
			unbind -T   root "$assist_key"

		#%if "#{==:#{normal_key},Escape}" #   #00AAAA
		#   %hidden assist_on_root=
			setenv -ghu assist_on_root
		#%endif

		#   %hidden bind_assist_on_root=
			setenv -ghu bind_assist_on_root

		#   %hidden assist_on_prefix=
			setenv -ghu assist_on_prefix

		#   %hidden bind_assist_on_prefix=
			setenv -ghu bind_assist_on_prefix

		#   %hidden assist_on_normal=
			setenv -ghu assist_on_normal

		#      %hidden unbind_assist_on_root="unbind -T root '$assist_key'"
			setenv -gh unbind_assist_on_root   "unbind -T root '$assist_key'"
		#      %hidden unbind_assist_on_prefix="unbind -T prefix '$assist_key'"
			setenv -gh unbind_assist_on_prefix "unbind -T prefix '$assist_key'"
		#   %hidden unbind_assist_on_normal="
		#       unbind -T copy-mode    '$assist_key'
		#       unbind -T copy-mode-vi '$assist_key'
		#       "
			setenv -gh unbind_assist_on_normal "
				unbind -T copy-mode    '$assist_key'
				unbind -T copy-mode-vi '$assist_key'
				"

			display -p "# [2878] assist_key: #{assist_key}"
		%elif  "#{&&:#{==:#{assist_key},},#{==:#{normal_key},Escape}}"
		#   %hidden     unbind_assist_on_root=
			setenv -ghu unbind_assist_on_root
		#   %hidden     unbind_assist_on_prefix=
			setenv -ghu unbind_assist_on_prefix
		#   %hidden     unbind_assist_on_normal=
			setenv -ghu unbind_assist_on_normal
		%endif

		display -p "# [2888] prefix_key: #{prefix_key}"
		display -p "# [2889] normal_key: #{normal_key}"

		display -p "# [2891] Composition factory initialized"
	%endif #   #{!=:#{nesting_support},1}

	#   %if "#{nesting_support}"
#   #   %if "#{!=:#{escape_on_root},}"
#   #   %if '#(\tmux display -p "#{escape_on_root}")'
#   #   %if '$escape_on_root'
	%if "#{&&:#{escape_on_root},#{nesting_support}}"
		run 'echo "escape_on_root: $(\tmux display -p "#{escape_on_root}")" >> $HOME/.vim.log'
#       showenv -gh 'escape_on_root' #   unknown variable: escape_on_root

			   display -p "# [2902] [error] escape_on_root already defined: '#{escape_on_root}'"
		confirm-before -p "# [2903] [error] normal_key: #{normal_key}, escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%else
#       display -p "# [2905] [succeeded] escape_on_root already cleared: #{escape_on_root}"
		display -p "# [2906] [succeeded] escape_on_root already cleared: #{escape_on_root}"
	%endif

	%if "#{&&:#{escape_on_root},#{nesting_support}}"
#   Works ? #   No
#   if-shell -F '#{escape_on_root}' {
			   display -p "# [2912] [error] escape_on_root already defined: #{escape_on_root}"
		confirm-before -p "# [2913] [error] normal_key: #{normal_key}, escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
#   } {
	%else
		%if "#{==:#{normal_key},Escape}" #   #00AAAA -- tmux bug (issue #4234)
			nesting_parse_route=2
			setenv -gh nesting_execute_route 2
			%hidden    escape_on_root="# [2919] \n $signal_root"
		#   setenv -gh escape_on_root "# [2920] \n $signal_root"
		%endif
	%endif
#   }
	%if "#{&&:#{bind_escape_on_root},#{nesting_support}}" #   if-shell -F '#{bind_escape_on_root}' {
			   display -p "# [2925] [error] bind_escape_on_root already defined: #{bind_escape_on_root}"
		confirm-before -p "# [2926] [error] normal_key: #{normal_key}, bind_escape_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%else #   } {
		%if "#{==:#{normal_key},Escape}" #   #00AAAA -- tmux bug (issue #4234)
		%hidden    bind_escape_on_root="
	#   bind -T root '$escape_key' \"$normal_enter\"
		bind -T root '$escape_key' \"$escape_on_root\"
		"
	#   setenv -gh bind_escape_on_root "
	#   bind -T root '$escape_key' \"$escape_on_root\"
	#   "
		%endif
	%endif #   }

	%if "#{normal_enter}"

		%if "#{&&:#{toggle_key},#{normal_toggle}}"
		#   unbind -n "$toggle_key"
		#      unbind "$toggle_key"
		#     bind -n "$toggle_key" "$normal_enter"
		#     bind -n "$toggle_key" "$signal_root"
		#        bind "$toggle_key" "$normal_toggle"
		#     bind -n "$toggle_key" "$normal_toggle"
		%endif

		%if "#{==:#{normal_key},Escape}" #   #00AAAA -- tmux bug (issue #4234)
	#   %hidden escape_on_root_nvim="$normal_enter"
	#   setenv -gh escape_on_root_nvim "$escape_on_root_nvim"
		#   normal_on_root_bind
	#   %hidden    normal_on_root_nvim_slot="$escape_on_root_nvim"
		%hidden    normal_on_root_nvim_slot="$normal_enter"
	#   setenv -gh normal_on_root_nvim_slot "$normal_enter" #   decoupling from the editor

	#   %hidden    normal_on_root_nvim_alias_name="escape_on_root_nvim"
		%hidden    normal_on_root_nvim_alias_name="normal_enter"
	#   setenv -gh normal_on_root_nvim_alias_name "normal_enter" #   decoupling from the editor
		%endif

		%if "#{&&:#{escape_on_prefix},#{nesting_support}}" #   if-shell -F '#{escape_on_prefix}' {
				   display -p "# [2964] [error] escape_on_prefix already defined: #{escape_on_prefix}"
			confirm-before -p "# [2965] [error] normal_key: #{normal_key}, escape_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%else #   } {
			%if "#{==:#{normal_key},Escape}" #   #00AAAA -- tmux bug (issue #4234)
				%hidden    escape_on_prefix="# [2968] \n $normal_enter"
			#   setenv -gh escape_on_prefix "$normal_enter"
			display -p "# [2970] escape_on_prefix <= normal_enter"
			%endif
		%endif #   }

		%if "#{&&:#{bind_escape_on_prefix},#{nesting_support}}" #   if-shell -F '#{bind_escape_on_prefix}' {
				   display -p "# [2975] [error] bind_escape_on_prefix already defined: #{bind_escape_on_prefix}"
			confirm-before -p "# [2976] [error] normal_key: #{normal_key}, bind_escape_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%else #   } {
			%if "#{==:#{normal_key},Escape}" #   #00AAAA -- tmux bug (issue #4234)
			%hidden    bind_escape_on_prefix="
		#   bind -T root '$escape_key' \"$normal_prefix\"
			bind -T root '$escape_key' \"$normal_enter\"
			"
		#   setenv -gh bind_escape_on_prefix "
		#   bind -T root '$escape_key' \"$normal_enter\"
		#   "
			%endif
		%endif #   }

		display -p "# [2989] nesting_parse_route    == #{nesting_parse_route}"
		display -p "# [2990] nesting_execute_route  == #{nesting_execute_route}"

	%else
			   display -p "# [2993] \$normal_enter not defined: $normal_enter"
		confirm-before -p "# [2994] normal_key: #{normal_key}, \$normal_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	#   %else
	#       %if "#{==:#{normal_key},Escape}" #   #00AAAA -- tmux bug (issue #4234)
	#           setenv -gh escape_on_root "$signal_root"
	#           setenv -gh bind_escape_on_root "
	#           bind -T root '$escape_key' \"$escape_on_root\"
	#           "
	#           setenv -gh escape_on_prefix "#{normal_enter}"
	#           setenv -gh bind_escape_on_prefix "
	#           bind -T root '$escape_key' \"#{normal_enter}\"
	#           "
	#           setenv -gh normal_on_root_nvim_slot "$normal_enter" #   decoupling from the editor
	#           setenv -gh normal_on_root_nvim_alias_name "normal_enter" #   decoupling from the editor
	#       %endif #   "#{==:#{normal_key},Escape}"
	#   %endif #   "#{nesting_support}"

	%if "#{&&:#{prefix_quit},#{==:#{normal_key},Escape}}"
	#   Go to $escape_on_normal
	%else
			   display -p "# [3014] \$prefix_quit not defined: $prefix_quit"
		confirm-before -p "# [3015] normal_key: #{normal_key}, \$prefix_quit not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif #   "#{prefix_quit}"

	#   %if "#{nesting_support}"
	%if    "#{==:${one_stage_policy},1}"
		%if    "#{normal_quit}"
			%if "#{&&:#{escape_on_normal},#{nesting_support}}" #   if-shell -F '#{escape_on_normal}' {
			#   %if "#{escape_on_normal}"
					   display -p "# [3023] [error] escape_on_normal already defined: #{escape_on_normal}"
				confirm-before -p "# [3024] [error] normal_key: #{normal_key}, escape_on_normal already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			#   %elif "#{nesting_support}" #   } {
			%else
				%if "#{&&:#{==:${one_stage_policy},1},#{==:#{normal_key},Escape}}" #   tmux bug (issue #4234)
				%hidden    escape_on_normal="# [3028] \n $prefix_enter"    #   %hidden    escape_on_normal="# [3028] \n $normal_quit"
			#   setenv -gh escape_on_normal "# [3029] \n $normal_quit"
				%endif
			%endif #   }

		%else
				   display -p "# [3034] \$normal_quit not defined: $normal_quit"
			confirm-before -p "# [3035] normal_key: #{normal_key}, \$normal_quit not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%endif #   "#{normal_quit}"
	%else
		%if    "#{prefix_enter}"
			%if "#{&&:#{escape_on_normal},#{nesting_support}}"
			#   %if "#{escape_on_normal}"
					   display -p "# [3041] [error] escape_on_normal already defined: #{escape_on_normal}"
				confirm-before -p "# [3042] prefix_key: #{prefix_key}, escape_on_normal already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			#   %elif "#{nesting_support}" #   be careful, tmux bug (issue #4234) will enter
			%else
				%if "#{&&:#{!=:#{one_stage_policy},1},#{==:#{normal_key},Escape}}" #   tmux bug (issue #4234)
				%hidden    escape_on_normal="# [3046] \n $prefix_enter"
			#   setenv -gh escape_on_normal "# [3047] \n $prefix_enter"
				%endif
			%endif

			display -p "# [3051] nesting_parse_route    == #{nesting_parse_route}"
			display -p "# [3052] nesting_execute_route  == #{nesting_execute_route}"
			#   Be careful, tmux bug (issue #4234) will enter
			#   %if "#{&&:#{==:#{escape_on_normal},},#{nesting_support}}"
			#       %hidden    escape_on_normal="$prefix_enter # [3055]"
			#   %else
			#              display -p "# [3057] [error] escape_on_normal already defined: #{escape_on_normal}"
			#       confirm-before -p "# [3058] prefix_key: #{prefix_key}, escape_on_normal already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			#   %endif
		%else
				   display -p "# [3061] \$prefix_enter not defined: $prefix_enter"
			confirm-before -p "# [3062] normal_key: #{normal_key}, \$prefix_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%endif #   "#{prefix_enter}"
	%endif #   "#{one_stage_policy}"
	#   %else
	#       #   #00AAAA -- tmux bug (issue #4234)
	#       %if   "#{&&:#{one_stage_policy},#{==:#{normal_key},Escape}}"
	#           setenv -gh escape_on_normal "$normal_quit  # [3068]"
	#       %elif "#{&&:#{!=:#{one_stage_policy},1},#{==:#{normal_key},Escape}}"
	#           setenv -gh escape_on_normal "$prefix_enter # [3070]"
	#       %endif
	#   %endif

	#   %if    "#{assist_key}"
	%if    "#{&&:#{assist_key},#{==:#{normal_key},Escape}}"

		#   %if "#{nesting_support}"
		%if "#{prefix_quit}"

			%if "#{&&:#{assist_on_prefix},#{nesting_support}}" #   if-shell -F '#{assist_on_prefix}' {
					   display -p "# [3081] [error] assist_on_prefix already defined: #{assist_on_prefix}"
				confirm-before -p "# [3082] normal_key: #{normal_key}, assist_key: #{assist_key}, assist_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			%else #   } {
				%if "#{&&:#{assist_key},#{==:#{normal_key},Escape}}" #   #00AAAA -- tmux bug (issue #4234)
				%hidden    assist_on_prefix="$prefix_quit"
			#   setenv -gh assist_on_prefix "$prefix_quit"
				%endif
			%endif #   }

			%if "#{&&:#{bind_assist_on_prefix},#{nesting_support}}" #   if-shell -F '#{bind_assist_on_prefix}' {
					   display -p "# [3091] [error] bind_assist_on_prefix already defined: #{bind_assist_on_prefix}"
				confirm-before -p "# [3092] normal_key: #{normal_key}, assist_key: #{assist_key}, bind_assist_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			%else #   } {
				%if "#{&&:#{assist_key},#{==:#{normal_key},Escape}}" #   #00AAAA -- tmux bug (issue #4234)
				%hidden    bind_assist_on_prefix="
				#   bind -T prefix "$normal_key" "$prefix_quit"
				bind -T prefix '$assist_key' \"$prefix_quit\"
				"
			#   setenv -gh bind_assist_on_prefix "
			#   bind -T prefix '$assist_key' \"$prefix_quit\"
			#   "
				%endif
			%endif #   }

		#   %if '#{unbind_assist_on_prefix}' #   if-shell -F '#{unbind_assist_on_prefix}' {
		#              display -p "# [3106] [error] unbind_assist_on_prefix already defined: #{unbind_assist_on_prefix}"
		#       confirm-before -p "# [3107] normal_key: #{normal_key}, assist_key: #{assist_key}, unbind_assist_on_prefix already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		#   %else #   } {
		#       %hidden unbind_assist_on_prefix="
		#       unbind -T prefix '$assist_key'
		#       "
		#   %endif #   }

			display -p "# [3114] nesting_parse_route    == #{nesting_parse_route}"
			display -p "# [3115] nesting_execute_route  == #{nesting_execute_route}"

		%else
				   display -p "# [3118] \$prefix_quit not defined: $prefix_quit"
			confirm-before -p "# [3119] normal_key: #{normal_key}, assist_key: #{assist_key}, \$prefix_quit not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%endif
		#   %else
		#       %if "#{==:#{normal_key},Escape}" #   #00AAAA -- tmux bug (issue #4234)
		#           setenv -gh assist_on_prefix "$prefix_quit"
		#           setenv -gh bind_assist_on_prefix "
		#           bind -T prefix '$assist_key' \"$prefix_quit\"
		#           "
		#       %endif
		#   %endif

		#   %if "#{nesting_support}"
		%if "#{prefix_enter}"
			%if "#{&&:#{assist_on_root},#{nesting_support}}" #   if-shell -F '#{assist_on_root}' {
					   display -p "# [3133] [error] assist_on_root already defined: #{assist_on_root}"
				confirm-before -p "# [3134] normal_key: #{normal_key}, assist_key: #{assist_key}, assist_on_root already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			%else #   } {
				%if "#{&&:#{assist_key},#{==:#{normal_key},Escape}}" #   #00AAAA -- tmux bug (issue #4234)
				%hidden    assist_on_root="$prefix_enter"
			#   setenv -gh assist_on_root "$prefix_enter"
			#   %hidden assist_on_root_nvim="$prefix_enter"
				display -p "# [3140] assist_on_root   <= prefix_enter"
				%hidden    bind_assist_on_root="
				bind -T root '$assist_key' \"$prefix_enter\"
				"
			#   setenv -gh bind_assist_on_root "
			#   bind -T root '$assist_key' \"$prefix_enter\"
			#   "
				%endif
			%endif #   }
			%if "#{&&:#{assist_on_normal},#{nesting_support}}" #   if-shell -F '#{assist_on_normal}' {
					   display -p "# [3150] [error] assist_on_normal already defined: #{assist_on_normal}"
				confirm-before -p "# [3151] normal_key: #{normal_key}, assist_key: #{assist_key}, assist_on_normal already defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
			%else #   } {
				%if "#{&&:#{assist_key},#{==:#{normal_key},Escape}}" #   #00AAAA -- tmux bug (issue #4234)
			#   %hidden assist_on_normal_impl="$prefix_enter"
				%hidden    assist_on_normal="$prefix_enter"
			#   %hidden assist_on_normal="send-keys ESCAPE SETQUIT"
			#   setenv -gh assist_on_normal "$prefix_enter"
				%endif
			%endif #   }

			display -p "# [3161] nesting_parse_route    == #{nesting_parse_route}"
			display -p "# [3162] nesting_execute_route  == #{nesting_execute_route}"

		%else
				   display -p "# [3165] \$prefix_enter not defined: $prefix_enter"
			confirm-before -p "# [3166] normal_key: #{normal_key}, assist_key: #{assist_key}, \$prefix_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		%endif
		#   %else
		#       %if "#{==:#{normal_key},Escape}" #   #00AAAA -- tmux bug (issue #4234)
		#           setenv -gh assist_on_root "$prefix_enter"
		#           setenv -gh bind_assist_on_root "
		#           bind -T root '$assist_key' \"$prefix_enter\"
		#           "
		#           setenv -gh assist_on_normal "$prefix_enter"
		#       %endif
		#   %endif

	#   %else  #   "#{assist_key}"
	%elif  "#{&&:#{==:#{assist_key},},#{==:#{normal_key},Escape}}"
		#   %if "#{nesting_support}"
			%hidden     bind_assist_on_prefix=
			%hidden     bind_assist_on_root=
			%hidden     assist_on_root=
			%hidden     assist_on_prefix=
		#   %else
			%if "#{&&:#{==:#{assist_key},},#{==:#{normal_key},Escape}}" #   #00AAAA -- tmux bug (issue #4234)
				setenv -ghu bind_assist_on_prefix
				setenv -ghu bind_assist_on_root
				setenv -ghu assist_on_root
				setenv -ghu assist_on_prefix
			%endif
		#   %endif

	%endif #   "#{assist_key}"




#   }
	#   %endif #   "#{==:#{normal_key},Escape}" #   #00AAAA
%endif #   "#{||:#{==:#{prefix_key},Escape},#{==:#{normal_key},Escape}}"

#   %if "#{==:#{normal_enter},#{assist_on_root}}"
#       display -p "# [3204] assist_on_root   == normal_enter"
#       display -p "# [3205] assist_on_root   != prefix_enter"
%if "#{==:#{prefix_enter},#{assist_on_root}}"
	display -p "# [3207] assist_on_root   == prefix_enter"
	display -p "# [3208] assist_on_root   != signal_root"
%elif "#{==:#{signal_root},#{assist_on_root}}"
	display -p "# [3210] assist_on_root   == signal_root"
	display -p "# [3211] assist_on_root   != prefix_enter"
#   %elif "#{==:send-keys ESCAPE SPACE N,#{assist_on_root}}"
#       display -p "# [3213] assist_on_root   == send-keys ESCAPE SPACE N"
%endif

%if "#{==:#{normal_enter},#{assist_on_prefix}}"
	display -p "# [3217] assist_on_prefix == normal_enter"
	display -p "# [3218] assist_on_prefix != prefix_quit"
%elif "#{==:#{prefix_quit},#{assist_on_prefix}}"
	display -p "# [3220] assist_on_prefix == prefix_quit"
	display -p "# [3221] assist_on_prefix != normal_enter"
%endif

#   %if "#{==:#{normal_enter},#{escape_on_root}}"
#       display -p "# [3225] escape_on_root   == normal_enter"
#       display -p "# [3226] escape_on_root   != prefix_enter"
%if "#{==:#{prefix_enter},#{escape_on_root}}"
	display -p "# [3228] escape_on_root   == prefix_enter"
	display -p "# [3229] escape_on_root   != signal_root"
%elif "#{==:#{signal_root},#{escape_on_root}}"
	display -p "# [3231] escape_on_root   == signal_root"
	display -p "# [3232] escape_on_root   != prefix_enter"
#   %elif "#{==:send-keys ESCAPE SPACE N,#{escape_on_root}}"
#       display -p "# [3234] escape_on_root   == send-keys ESCAPE SPACE N"
%endif

%if "#{==:#{prefix_quit},#{escape_on_prefix}}"
	display -p "# [3238] escape_on_prefix == prefix_quit"
	display -p "# [3239] escape_on_prefix != normal_enter"
%elif "#{==:#{normal_enter},#{escape_on_prefix}}"
	display -p "# [3241] escape_on_prefix == normal_enter"
	display -p "# [3242] escape_on_prefix != prefix_quit"
%endif

	display -p "# [3245] nesting_parse_route    == #{nesting_parse_route}"
	display -p "# [3246] nesting_execute_route  == #{nesting_execute_route}"

#   set -su command-alias


%if "#{alias_index_00}"
		   display -p "# [3252] \$alias_index_00 occupied: $alias_index_00"
	confirm-before -p "# [3253] \$alias_index_00 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_00=00
	#   %if "#{nesting_support}"
	%if "#{prefix_enter}"
	#   set -s  command-alias[$alias_index_00] escape_on_root_nvim="$escape_on_root_nvim"
		set -s  command-alias[$alias_index_00] prefix_enter="$prefix_enter"
	%else
			   display -p "# [3261] \$prefix_enter not defined: $prefix_enter"
		confirm-before -p "# [3262] alias_index_00, \$prefix_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	#   %else
	#       set -s  command-alias[$alias_index_00] prefix_enter="run -C \"#{prefix_enter}\""
	#   %endif
	setenv -ghu alias_index_00
%endif

%if "#{alias_index_16}"
		   display -p "# [3271] \$alias_index_16 occupied: $alias_index_16"
	confirm-before -p "# [3272] \$alias_index_16 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_16=16
	#   %if "#{nesting_support}"
	#   %if "#{prefix_enter}"
	%if "#{escape_on_root}"
		#   tmux show -g command-alias
		#   tmux display -p "#{command-alias[0]}"
	#   set -s  command-alias[$alias_index_16] prefix_enter="$prefix_enter"
		set -s  command-alias[$alias_index_16] escape_on_root="$escape_on_root"
		#   %if #{!=:#{nesting_support},1}
		#       setenv -gh escape_on_root_alias_name "escape_on_root"
		#   %else
		#       setenv -gh escape_on_root_alias_name "$escape_on_root_alias_name"
		#   %endif
	%else
			   display -p "# [3288] \$escape_on_root not defined: $escape_on_root"
		#   confirm-before -p "alias_index_16, \$prefix_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
		confirm-before -p "# [3290] alias_index_16, \$escape_on_root not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	#   %else
	#       %if   "#{==:#{prefix_key},Escape}" #   #AA0000
	#           set -s  command-alias[$alias_index_16] escape_on_root="$prefix_enter"
	#       %elif "#{==:#{normal_key},Escape}" #   #00AAAA
	#           set -s  command-alias[$alias_index_16] escape_on_root="$signal_root"
	#       %endif
	#   %endif
	escape_on_root_alias_name="escape_on_root" #   decoupling from the editor
	setenv -ghu alias_index_16
%endif
	#   %if   "#{&&:#{==:#{prefix_key},Escape},#{==:#{nesting_support},}" #   #AA0000
	#       set -s  command-alias[$alias_index_16] escape_on_root="$prefix_enter"
	#   %elif "#{&&:#{==:#{normal_key},Escape},#{==:#{nesting_support},}" #   #00AAAA
	#       set -s  command-alias[$alias_index_16] escape_on_root="$signal_root"
	#   %endif


%if "#{alias_index_01}"
		   display -p "# [3310] \$alias_index_01 occupied: $alias_index_01"
	confirm-before -p "# [3311] \$alias_index_01 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_01=01
	#   %if "#{nesting_support}"
	%if "#{prefix_quit}"
		set -s  command-alias[$alias_index_01] prefix_quit="$prefix_quit"
	%else
			   display -p "# [3318] \$prefix_quit not defined: $prefix_quit"
		confirm-before -p "# [3319] alias_index_01, \$prefix_quit not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	#   %else
	#       set -s  command-alias[$alias_index_01] prefix_quit="run -C \"#{prefix_quit}\""
	#   %endif
	prefix_quit_alias_name="prefix_quit"
	setenv -ghu alias_index_01
%endif


%if "#{alias_index_02}"
		   display -p "# [3330] \$alias_index_02 occupied: $alias_index_02"
	confirm-before -p "# [3331] \$alias_index_02 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_02=02
	%if "#{signal_root}"
	#   set -s  command-alias[$alias_index_02] assist_on_root_nvim="$assist_on_root_nvim"
	#   set -s  command-alias[$alias_index_02] normal_on_root_nvim_slot="$normal_on_root_nvim_slot"
		set -s  command-alias[$alias_index_02] signal_root="$signal_root"
		#   %if "#{==:#{prefix_key},Escape}" #   #AA0000

		#   %endif
	%else
			   display -p "# [3342] \$signal_root not defined: $signal_root"
		confirm-before -p "# [3343] \$signal_root not defined, and kill-session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_02
%endif

%if "#{alias_index_03}"
		   display -p "# [3349] \$alias_index_03 occupied: $alias_index_03"
	confirm-before -p "# [3350] \$alias_index_03 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_03=03
	%if "#{normal_quit}"
		set -s  command-alias[$alias_index_03] normal_quit="$normal_quit"
		assist_on_normal_alias_name="normal_quit" #   decoupling from the editor
		#   %if #{!=:#{nesting_support},1}
		#       setenv -gh assist_on_normal_alias_name "assist_on_normal" #   decoupling from the editor
		#   %endif
	%endif
	setenv -ghu alias_index_03
%endif

%if "#{alias_index_18}"
		   display -p "# [3364] \$alias_index_18 occupied: $alias_index_18"
	confirm-before -p "# [3365] \$alias_index_18 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_18=18
	%if "#{&&:#{assist_on_normal},#{assist_key}}"
		set -s  command-alias[$alias_index_18] assist_on_normal="$assist_on_normal"
		assist_on_normal_alias_name="assist_on_normal" #   decoupling from the editor
		#   %if #{!=:#{nesting_support},1}
		#       setenv -gh assist_on_normal_alias_name "assist_on_normal" #   decoupling from the editor
		#   %endif
	%endif
	setenv -ghu alias_index_18
%endif


#   %if    "#{assist_key}"

%if "#{alias_index_04}"
		   display -p "# [3382] \$alias_index_04 occupied: $alias_index_04"
	confirm-before -p "# [3383] \$alias_index_04 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_04=04
	#   %if "#{nesting_support}"
	%if "#{normal_enter}"
		set -s  command-alias[$alias_index_04] normal_enter="$normal_enter"
	%else
			   display -p "# [3390] \$normal_enter not defined: $normal_enter"
		confirm-before -p "# [3391] assist_key: #{assist_key}, alias_index_04, \$normal_enter not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	#   %else
	#       set -s  command-alias[$alias_index_04] normal_enter="run -C \"#{normal_enter}\""
	#   %endif
	setenv -ghu alias_index_04
%endif

#   %endif #   "#{assist_key}"


#   %if "#{alias_index_05}"
#       display -p "\$alias_index_05 occupied: $alias_index_05"
#       confirm-before -p "kill-server ? (y/n)" kill-server
#   %else
#       %hidden alias_index_05=5
#
#       %if   "#{==:#{prefix_key},Escape}" #   #AA0000
#           %if "#{assist_on_root}" #   signal
#               set -s  command-alias[$alias_index_05] normal_on_root_nvim_slot="$normal_on_root_nvim_slot"
#           #   set -s  command-alias[$alias_index_05] normal_on_root_bind="
#           #       bind -T root '$assist_key' \"$assist_on_root\"
#           #   "
#           %else
#               display -p "\$assist_on_root not defined: $assist_on_root"
#               confirm-before -p "assist_key: #{assist_key}, alias_index_05, \$assist_on_root not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
#           %endif
#       %elif "#{==:#{normal_key},Escape}" #   #00AAAA
#           %if "#{escape_on_root}" #   signal
#               set -s  command-alias[$alias_index_05] normal_on_root_nvim_slot="$normal_on_root_nvim_slot"
#           #   set -s  command-alias[$alias_index_05] normal_on_root_bind="
#           #       bind -T root '$escape_key' \"$escape_on_root\"
#           #   "
#           %else
#               display -p "\$escape_on_root not defined: $escape_on_root"
#               confirm-before -p "assist_key: #{assist_key}, alias_index_05, \$escape_on_root not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
#           %endif
#       %endif
#       setenv -ghu alias_index_05
#   %endif

%if "#{alias_index_05}"
		   display -p "# [3433] \$alias_index_05 occupied: $alias_index_05"
	confirm-before -p "# [3434] \$alias_index_05 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_05=05
		set -s  command-alias[$alias_index_05] escape_on_normal="$escape_on_normal"
		assist_on_normal_alias_name="escape_on_normal" #   decoupling from the editor
		#   %if #{!=:#{nesting_support},1}
		#       setenv -gh assist_on_normal_alias_name "escape_on_normal" #   decoupling from the editor
		#   %endif
	setenv -ghu alias_index_05
%endif

%if "#{==:#{escape_on_normal},}"
		   display -p "# [3446] \$escape_on_normal has not been initialized: $escape_on_normal"
	confirm-before -p "# [3447] \$escape_on_normal has not been initialized. Kill-server ? (y/n)" kill-server
%endif

	#   \tmux bind -T root Escape "run \$prefix_root_hidden"
	#   \tmux run "#{prefix_root_hidden}"
	%hidden prefix_root_hidden="
#   bind -T root Escape display -p 'test'
	\tmux display -p '$TMUX_PANE'
	\tmux select-pane -t '$TMUX_PANE'
	"

	#   tmux run -C "#{prefix_hidden}"
	%hidden prefix_hidden="
	display -p '$TMUX_PANE'
	select-pane -t '$TMUX_PANE'
	"

#   set -s  command-alias[6] color_terminal="
#   select-pane -P bg=terminal
#   "

%if "#{alias_index_06}"
		   display -p "# [3469] \$alias_index_06 occupied: $alias_index_06"
	confirm-before -p "# [3470] \$alias_index_06 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_06=06
	%if "#{bind_escape_on_root}"
		set -s  command-alias[$alias_index_06] bind_escape_on_root="$bind_escape_on_root"
	%else
			   display -p "# [3476] \$bind_escape_on_root not defined: $bind_escape_on_root"
		confirm-before -p "# [3477] alias_index_06, \$bind_escape_on_root not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_06
%endif


%if "#{alias_index_07}"
		   display -p "# [3484] \$alias_index_07 occupied: $alias_index_07"
	confirm-before -p "# [3485] \$alias_index_07 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_07=07
	%if "#{bind_escape_on_prefix}"
		set -s  command-alias[$alias_index_07] bind_escape_on_prefix="$bind_escape_on_prefix"
	%else
			   display -p "# [3491] \$bind_escape_on_prefix not defined: $bind_escape_on_prefix"
		confirm-before -p "# [3492] alias_index_07, \$bind_escape_on_prefix not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_07
%endif


%if "#{alias_index_08}"
		   display -p "# [3499] \$alias_index_08 occupied: $alias_index_08"
	confirm-before -p "# [3500] \$alias_index_08 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_08=08
	%if "#{&&:#{assist_on_root},#{assist_key}}"
		set -s  command-alias[$alias_index_08] assist_on_root="$assist_on_root"
		assist_on_root_alias_name="assist_on_root" #   decoupling from the editor
		#   %if #{!=:#{nesting_support},1}
		#       setenv -gh assist_on_root_alias_name "assist_on_root" #   decoupling from the editor
		#   %endif
	#   %else
	#              display -p "# [3510] \$assist_on_root not defined: $assist_on_root"
	#       confirm-before -p "# [3511] alias_index_08, \$assist_on_root not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_08
%endif


%if "#{alias_index_09}"
		   display -p "# [3518] \$alias_index_09 occupied: $alias_index_09"
	confirm-before -p "# [3519] \$alias_index_09 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_09=09
	%if "#{&&:#{assist_on_prefix},#{assist_key}}"
		set -s  command-alias[$alias_index_09] assist_on_prefix="$assist_on_prefix"
		assist_on_prefix_alias_name="assist_on_prefix"
		#   %if #{!=:#{nesting_support},1}
		#       setenv -gh assist_on_prefix_alias_name "assist_on_prefix" #   decoupling from the editor
		#   %endif
	#   %else
	#              display -p "# [3529] \$assist_on_prefix not defined: $assist_on_prefix"
	#       confirm-before -p "# [3530] alias_index_08, \$assist_on_prefix not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	setenv -ghu alias_index_09
%endif


%if "#{alias_index_10}"
		   display -p "# [3537] \$alias_index_10 occupied: $alias_index_10"
	confirm-before -p "# [3538] \$alias_index_10 occupied. Kill-server ? (y/n)" kill-server
%else
#   #   %hidden alias_index="$alias_index + 1" #   got string '0 + 1'
#   #   run 'index=$(\tmux showenv -gh alias_index | awk -F = "{print \$2}"); : $((index += 1)); tmux setenv -gh alias_index $index;'
#   #   run 'index=$(\tmux display -p "#{alias_index}"); : $((index += 1)); tmux setenv -gh "alias_index" "$index"; \
#   #   tmux set -s  command-alias[#{alias_index}] bind_prefix_on_root=" \
#   #   bind -T root \"#{escape_key}\" \"#{prefix_enter}\" \
#   #   "'

#   Diagram of the relationship between primary key and auxiliary key combination  |
#                           [Neovim/Terminal](mode_toggle)                         |
#                             /       \                                            |
#                       Escape        Assist                                       |
#             "#{==:#{prefix_key},Escape}"                                         |
#   prefix-mode <--  [prefix_key]  ]prefix_key[                                    |
#                                \/                                                |
#                                /\                                                |
#     copy-mode <--  ]normal_key[  [normal_key]                                    |
#             "#{==:#{normal_key},Escape}"                                         |
#   normal_on_root_nvim_slot  #   point to $normal_enter                           |
#   bind_prefix_on_root       #   point to $prefix_enter and used in $_prefix_quit |
#   escape_on_root_alias_name #   exported for editor                              |
#   assist_on_root_alias_name #   exported for editor                              |

	%hidden alias_index_10=10
	#   Escape -> prefix-mode -> assist_key -> copy-mode
	%if   "#{==:#{prefix_key},Escape}"
		set -s  command-alias[$alias_index_10] bind_prefix_on_root="$bind_escape_on_root" #   point to $prefix_enter
		#   %hidden    prefix_on_root_alias_name="bind_prefix_on_root" #   decoupling from the editor
		#   setenv -gh prefix_on_root_alias_name "$prefix_on_root_alias_name" #   decoupling from the editor
	#   Escape -> copy-mode   -> assist_key -> prefix-mode
	%elif "#{==:#{normal_key},Escape}" #   #00AAAA
		set -s  command-alias[$alias_index_10] bind_prefix_on_root="$bind_assist_on_root" #   point to $prefix_enter
		#   %hidden    prefix_on_root_alias_name="bind_prefix_on_root" #   decoupling from the editor
		#   setenv -gh prefix_on_root_alias_name "$prefix_on_root_alias_name" #   decoupling from the editor

	%endif

	setenv -ghu alias_index_10
%endif


%if "#{alias_index_11}"
		   display -p "# [3581] \$alias_index_11 occupied: $alias_index_11"
	confirm-before -p "# [3582] \$alias_index_11 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_11=11

	#   %if   "#{==:#{prefix_key},Escape}" #   #AA0000
	#       %if "#{==:#{prefix_quit},#{escape_on_prefix}}"

	#       %else
	#           display -p "# [3590] [error] escape_on_prefix != prefix_quit"
	#           %if "#{nesting_support}"
	#               %if "#{prefix_quit}"

	#               %else
	#                   display -p "# [3595] prefix_quit: #{prefix_quit}"
	#               %endif
	#           %endif
			%if "#{nesting_support}"
				%if "#{escape_on_prefix}"

				%else
					display -p "# [3602] escape_on_prefix: #{escape_on_prefix}"
				%endif
			%endif
	#       %endif
	#   %elif "#{==:#{normal_key},Escape}" #   #00AAAA
	#       %if "#{==:#{normal_enter},#{escape_on_prefix}}"

	#       %else
	#           display -p "# [3610] [error] escape_on_prefix != normal_enter"
	#           %if "#{nesting_support}"
	#               %if "#{normal_enter}"

	#               %else
	#                   display -p "# [3615] normal_enter: #{normal_enter}"
	#               %endif
	#           %endif
	#           %if "#{nesting_support}"
	#               %if "#{escape_on_prefix}"

	#               %else
	#                   display -p "# [3622] escape_on_prefix: #{escape_on_prefix}"
	#               %endif
	#           %endif
	#       %endif
	#   %endif #   "#{||:#{==:#{prefix_key},Escape},#{==:#{normal_key},Escape}}"

		set -s  command-alias[$alias_index_11] escape_on_prefix="$escape_on_prefix"
		escape_on_prefix_alias_name="escape_on_prefix"
		#   %if #{!=:#{nesting_support},1}
		#       setenv -gh escape_on_prefix_alias_name "escape_on_prefix" #   decoupling from the editor
		#   %endif

	setenv -ghu alias_index_11
%endif



%if "#{assist_key}"
	%hidden mode_toggle="
				bind -T copy-mode-vi '$escape_key' \"$escape_on_normal\"
				   bind -T copy-mode '$escape_key' \"$escape_on_normal\"
		if-shell -F '#{@is-vim}' {
					#   bind -T root '$escape_key' \"$prefix_enter\"
			#   $bind_escape_on_root
			#   Duplicated with main source process and will enter a overlay mode ?
			#   When the "overlay mode" is not by design, something messed up
			#           bind -T root '$escape_key' \"$escape_on_root\"
			if-shell -F '#{@is-insert}' {
					  unbind -T root '$escape_key'
			#   $unbind_escape_on_root

				if-shell -F '#{assist_key}' {
					  unbind -T root '$assist_key'
				    unbind -T prefix '$assist_key' #   must do this, otherwise backtick will prevent vim window from entering copy-mode
				}
			#   $unbind_assist_on_root
			#   $unbind_assist_on_prefix
			} {
					#   bind -T root '$normal_key' \"$normal_enter\"
						bind -T root '$escape_key' \"$escape_on_root\"

				if-shell -F '#{assist_key}' {
			#   Works
			#   $bind_assist_on_root
			#   Works
			#   bind -T root '$assist_key' \"$assist_on_root\"
			#   Works
						bind -T root '$assist_key' \"$assist_on_root\"

			#   bind -T root '$assist_key' run '\tmux showenv -gh \"bind_assist_on_root\" | awk -F = \"\$2 = \$2 {print \$2}\"'
			#   bind -T root '$assist_key' run '\tmux display -p  \"#{bind_assist_on_root}\"'
			#   bind -T root '$assist_key' run '\tmux $(\tmux display -p \"#{assist_on_root}\")'
				#
				#   $prefix_quit # syntax error
			#   \"$bind_assist_on_prefix\" # won't work
			#   $bind_assist_on_prefix
					  bind -T prefix '$assist_key' \"$assist_on_prefix\"

			#   bind -T copy-mode-vi '$assist_key' \"$assist_on_normal\" #   'jump to backward' error
			#      bind -T copy-mode '$assist_key' \"$assist_on_normal\" #   'jump to backward' error

				bind -T copy-mode-vi '$assist_key' \"$assist_on_normal\"
				   bind -T copy-mode '$assist_key' \"$assist_on_normal\"
			   }
			}
		} {
						bind -T root '$escape_key' \"$escape_on_root\"
		#   if-shell -F "#{||:#{pane_in_mode},#{@is-vim}}" {
			if-shell -F '#{pane_in_mode}' {
			#   bind   -T prefix "$prefix_key" $prefix_quit

				if-shell -F '#{assist_key}' {
			#   bind -T root '$normal_key' \"$normal_enter\"
			#   $bind_assist_on_root
						bind -T root '$assist_key' \"$assist_on_root\"

				#   run -b "echo \"$(\tmux list-keys -T root | awk -v key=\"$prefix_key\" \"\$4 = key {print}\")\" > /tmp/$(id -u)/root.conf"
			#   $prefix_quit # syntax error
			#   $bind_assist_on_prefix
					  bind -T prefix '$assist_key' \"$assist_on_prefix\"
			#   select-pane -P "bg=#{prefix_background}"
			#   $color_normal
				bind -T copy-mode-vi '$assist_key' \"$assist_on_normal\"
				   bind -T copy-mode '$assist_key' \"$assist_on_normal\"
				}
			} {
			#   unbind -T prefix "$prefix_key"

				if-shell -F '#{assist_key}' {
					  unbind -T root '$assist_key'
				#   unbind -T prefix '$assist_key' # must don't do this, otherwise backtick will not trigger on prefix-mode

				#   $unbind_assist_on_root
				#   $unbind_assist_on_prefix
				}
			#   Toggle binding root on prefix == Escape, you can not quit copy-mode to root mode
			#   -- there will be always a prefix mode there waiting for you
			#   bind   -T root "$normal_key" $normal_enter
			#   $color_terminal
			}
		}
		#   if-shell -F "#{client_prefix}" {
		#     select-pane -P "bg=#{prefix_background}"
		#   } {
		#     select-pane -P bg=terminal
		#   }
		#   set -pF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"

	#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}" #   after-set-option recursive ?

		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}"
		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}" -t $TMUX_PANE
		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}" -t "#{pane_id}"
		#   display-panes -N
			bind '$toggle_key' \"$normal_toggle\"
		 bind -n '$toggle_key' \"$normal_toggle\"
	"
%else
	%hidden mode_toggle="
				bind -T copy-mode-vi '$escape_key' \"$escape_on_normal\"
				   bind -T copy-mode '$escape_key' \"$escape_on_normal\"
		if-shell -F '#{@is-vim}' {
					#   bind -T root '$escape_key' \"$prefix_enter\"
			#   $bind_escape_on_root
			#   Duplicated with main source process and will enter a overlay mode ?
			#   When the "overlay mode" is not by design, something messed up
			#           bind -T root '$escape_key' \"$escape_on_root\"
			if-shell -F '#{@is-insert}' {
					  unbind -T root '$escape_key'
			#   $unbind_escape_on_root

			#   $unbind_assist_on_root
			#   $unbind_assist_on_prefix
			} {
					#   bind -T root '$normal_key' \"$normal_enter\"
						bind -T root '$escape_key' \"$escape_on_root\"

			}
		} {
						bind -T root '$escape_key' \"$escape_on_root\"
		#   if-shell -F "#{||:#{pane_in_mode},#{@is-vim}}" {
			if-shell -F '#{pane_in_mode}' {
			#   bind   -T prefix "$prefix_key" $prefix_quit
			} {
			#   unbind -T prefix "$prefix_key"

			#   Toggle binding root on prefix == Escape, you can not quit copy-mode to root mode
			#   -- there will be always a prefix mode there waiting for you
			#   bind   -T root "$normal_key" $normal_enter
			#   $color_terminal
			}
		}
		#   if-shell -F "#{client_prefix}" {
		#     select-pane -P "bg=#{prefix_background}"
		#   } {
		#     select-pane -P bg=terminal
		#   }
		#   set -pF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"

	#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}" #   after-set-option recursive ?

		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}"
		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}" -t $TMUX_PANE
		#   select-pane -P "bg=#{?client_prefix,$prefix_background,terminal}" -t "#{pane_id}"
		#   display-panes -N
			bind '$toggle_key' \"$normal_toggle\"
		 bind -n '$toggle_key' \"$normal_toggle\"
	"
%endif

%if "#{alias_index_15}"
		   display -p "# [3793] \$alias_index_15 occupied: $alias_index_15"
	confirm-before -p "# [3794] \$alias_index_15 occupied. Kill-server ? (y/n)" kill-server
%else
	%hidden alias_index_15=15
	#   %if "#{nesting_support}"
	%if "#{mode_toggle}"
		set -s  command-alias[$alias_index_15] mode_toggle="$mode_toggle"
	%else
			   display -p "# [3801] \$mode_toggle not defined: $mode_toggle"
		confirm-before -p "# [3802] \$mode_toggle not defined. Kill session #{session_id} ? (y/n)" kill-session #   no current client
	%endif
	#   %else
	#       set -s  command-alias[$alias_index_15] mode_toggle="$mode_toggle"
	#   %endif
	setenv -ghu alias_index_15
%endif

	set-hook -gu after-copy-mode
#   set-hook -g  after-copy-mode[0] "
#   $color_normal
#   "

	%hidden vim_rescue="
	#   if-shell -F '#{@is-insert}' {
	#   #   display -p "@is-insert : #{@is-insert}" #   this will print to editor when insert
	#   #   run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; [ ! -s \"/tmp/$(id -u)/tmux/insert.log\" ] || : > /tmp/$(id -u)/tmux/insert.log'
	#       run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; echo \"#{@is-insert}\" >> /tmp/$(id -u)/tmux/insert.log'
	#   #   tail -f -n 10 /tmp$(id -u)/tmux/insert.log
	#       run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; : > /tmp/$(id -u)/tmux/binding.log'
	#   } {
	#       The following line is a heavy operation
	#       run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; echo \"binding\" >> /tmp/$(id -u)/tmux/binding.log'
	#   #   if-shell "# [ -z \"$(\tmux list-keys -T root | awk -v key=\"$(\tmux showenv -gh \"prefix_key\" | awk -F = '$2 = $2 {print $2}')\" '$4 == key {print}')\" ]" {
	#       if-shell '[ -z \"$(\tmux list-keys -T root | awk -v key=\\"$prefix_key" \"\$4 == key {print}\" 2> /dev/null)\" ]' {
			#   bind -T root \"$prefix_key\" \"$prefix_enter\"
			#   $bind_escape_on_root
			  bind -T root '$escape_key' \"$escape_on_root\"
	#       }
	#   #   if-shell "# [ -z \"$(\tmux list-keys -T prefix | awk -v key=\"$(\tmux showenv -gh \"prefix_key\" | awk -F = '$2 = $2 {print $2}')\" '$4 == key {print}')\" ]" {
	#       if-shell '[ -z \"$(\tmux list-keys -T prefix | awk -v key=\\"$prefix_key" \"\$4 == key {print}\" 2> /dev/null)\" ]' {
			#   bind -T prefix \"$prefix_key\" \"$prefix_quit\"
			#   $bind_escape_on_prefix
			bind -T prefix '$escape_key' \"$escape_on_prefix\"
	#       }
		if-shell -F '#{assist_key}' {
	#   #   if-shell "# [ -z \"$(\tmux list-keys -T root | awk -v key=\"$(\tmux showenv -gh \"normal_key\" | awk -F = '$2 = $2 {print $2}')\" '$4 == key {print}')\" ]" {
	#       if-shell '[ -z \"$(\tmux list-keys -T root | awk -v key=\\"$normal_key" \"\$4 == key {print}\" 2> /dev/null)\" ]' {
			#   bind -T root \"$normal_key\" \"$normal_enter\"
			#   $bind_assist_on_root
			  bind -T root '$assist_key' \"$assist_on_root\"
	#       }
		}
	#   }
	"

	set-hook -gu pane-focus-out
	set-hook -g  pane-focus-out[0] "
	#   run '\tmux color_terminal'
	$color_toggle #   focus will be locked in terminal pane if using select-pane -P
	$mode_toggle  #   run -C mode_toggle
#   if-shell -F '#{mode_monitor}' {
#   #   $escape_on_prefix #   focus will be locked in terminal pane if using select-pane -P
#   #   $color_terminal   #   focus will be locked in terminal pane if using select-pane -P
#       switch-client -T root
#       if-shell -F '#{@is-vim}' {
#           $vim_restore #   do it in editor ?
#       }
#   Won't affect copy-mode and prefix mode is not block
#       set -p window-style 'fg=default,bg=terminal'
#   }
	"

	set-hook -gu pane-focus-in
#   set-hook -g  pane-focus-in[0] 'run "# [ \"$(\tmux display -p \"#{pane_in_mode}\")\" -eq 1 ] &&
#   tmux select-pane -P \"fg=default,bg=#{normal_background}\" ||
#   tmux select-pane -P fg=default,bg=terminal"'

	#   Needs double quotes here
	set-hook -g  pane-focus-in[0] "
		$color_toggle
	#   if-shell -F '#{@is-vim}' {
	#       if-shell -F '#{@is-insert}' {
	#           unbind -T root \"$prefix_key\"
	#       } {
	#           $vim_rescue
	#       #   $prefix_quit
	#       }
	#   } {
	#       %if   \"#{==:#{prefix_key},Escape}\"
	#           bind -T root \"$prefix_key\" \"$prefix_enter\"
	#           %if   \"#{normal_key}\"
	#           unbind -T root \"$normal_key\"
	#           %endif
	#       %elif \"#{==:#{normal_key},Escape}\"
	#           bind -T root \"$normal_key\" \"$normal_enter\"
	#           %if   \"#{prefix_key}\"
	#           unbind -T root \"$prefix_key\"
	#           %endif
	#       %endif
	#   }
		$mode_toggle #   run -C mode_toggle # syntx error
		#   select-pane -t '#{pane_id}' -P bg=terminal
	if -F '#{@is-vim}' {} {
		if-shell -F '#{client_prefix}' {
			$color_prefix
		} {
			if-shell -F '#{pane_in_mode}' {} {
				if-shell -F '#{default_mode}' {
					$escape_on_root
				}
			}
		}
	}
#   Why do not you need this? -- When you are copying form one pane to one another, reset the mode is a destruction of the original state
#   if-shell -F '#{delegate_wincmd}' {
#       if-shell -F '#{client_prefix}' {
#           $color_prefix
#       } {
#           $escape_on_root
#       }
#   } {
#   #   $color_prefix
#       switch-client -T prefix
#   }
	"

%if "#{nesting_support}"
	set-hook -gu command-error
	set-hook -g  command-error[0] "
	#   The following line will erase your file --  Dangerous
	#   send-keys Escape C-c
	if-shell -F '#{pane_in_mode}' {
		send-keys -X cancel
	}
	#   send-keys C-c Enter
	#   Will kill Telescope windows if you send C-c unconditionally
	if-shell -F '#{@is-vim}' {
		if-shell -F '#{@is-insert}' {
			if-shell -F '#{@is-visual}' {} {
				send-keys C-c
		#   send-keys Enter
			}
		}
	}
		$color_terminal
	"
%endif

	set-hook -gu after-set-option
#   Recursively calling it self -- select-pane, set window-active-style, etc.
#   set-hook -g  after-set-option[0] "set -gF window-active-style \"bg=#{?client_prefix,$prefix_background,terminal}\""
#   Enable this, the noevim can not enter command mode and every hljk refresh the screen and inside prefix mode sometime
#   set-hook -g  after-set-option[0] "
#       if-shell -F '#{@is-vim}' {
#           if-shell -F '#{@is-insert}' {
#           #   unbind -T   root "$prefix_key"
#           #   unbind -T prefix "$prefix_key"
#               $unbind_escape_on_root
#           #   unbind -T   root "$normal_key"
#               $unbind_assist_on_root
#           } {

#               if-shell -F '#{rescue}' {
#                   #   To apply bindings in variables, you need to change from {} to "" for the after-set-option[0] enquoting
#                   #   But it is recognized as a recursive call
#                   #   $vim_rescue #   heavy operation -- recursive call
#               }
#           }
#       }
#   "


#   tmux show-hooks -g pane-mode-changed
#   set-hook -g  pane-mode-changed[0] 'set -g #{?pane_in_mode, #[fg=default#,bg=#{prefix_background}, #[fg=default#,bg=terminal}#W'
#   set-hook -g  pane-mode-changed[0] 'run "# [ \"$(\tmux display -p \"#{pane_in_mode}\")\" -ne \"0\" ] && tmux select-pane -P \"fg=default,bg=#{normal_background}\" || tmux select-pane -P fg=default,bg=terminal"'
#   set-hook -g  pane-mode-changed[0] 'run "# [ \"$(\tmux display -p \"#{pane_in_mode}\")\" -eq 1 ] &&

#   set-hook -g  pane-mode-changed[1] 'run "# [ \"$(\tmux display -p \"#{client_prefix}\")\" -eq 1 ] &&
#   tmux select-pane -P \"fg=default,bg=#{normal_background}\" ||
#   tmux select-pane -P fg=default,bg=terminal"'
#   https://github.com/tmux/tmux/issues/634
#   set-hook -g  pane-mode-changed { if-shell -F "#{pane_in_mode}" "selectp -P bg=blue" "selectp -P default" }
#   set-hook -g  pane-mode-changed \
#   '#{?pane_in_mode, \
#   select-pane -P "fg=default,bg=#{prefix_background}", \
#   select-pane -P fg=default,bg=terminal}#W'

#   set-hook -g  pane-mode-changed \
#   'run "# [ \"$(\tmux display -p \"#{pane_in_mode}\")\" -ne \"0\" ] && \
#   tmux set-option -wp pane-border-status off || \
#   tmux set-option -wp pane-border-status bottom"'

#   'run "# [ \"$(\tmux display -p \"#{pane_in_mode}\")\" -eq \"0\" ] && \
#   tmux set-option -wp pane-border-status bottom || \
#   tmux set-option -wp pane-border-status off"'

#   set-hook -g  pane-mode-changed '#{?pane_in_mode, \
#   set-option -g pane-border-status off, \
#   set-option -g pane-border-status bottom}'

#   Change mode after changed mode is recursive #   $mode_toggle might do it
#   set-hook -g pane-mode-changed[0] "
#   #   display 'pane-mode-changed'
#   if-shell -F '#{mode_monitor}' {
#   Because the prefix color is needed to display, copy-mode color should not occupy all the places
#   #   $color_toggle
#       $mode_toggle
#   }
#   "
#   https://github.com/tmux/tmux/issues/1500
#   Does not work for visual indicator to copy-mode
#   set-hook -g 'pane-mode-changed' 'set -gF status-style "bg=#{?#{==:#{pane_mode},copy-mode},red,blue}"'

#   set-hook -g pane-mode-changed[1] 'set -gF message-style "fg=#{?#{==:#{pane_mode},copy-mode},green#,blink,blue},bg=#{?#{==:#{pane_mode},copy-mode},white,white}"' # no spaces permitted before red and white

#   set-hook -g pane-mode-changed[1] { #   after-set-option recursive ?

	set -gF status-style        'bg=#{?#{==:#{pane_mode},copy-mode},white,black}'

#   Command line style (command mode, prompt)
#   tmux set  -gu  message-style # will get the following result -- very dark color combination in tty
#   tmux show -gqv message-style # bg=yellow,fg=black

	set -gu message-command-style
	set -g  message-command-style bg=black,fg=white
	set -gu message-style
#   set -g  message-style bg=default
#   set -gF message-style "fg=#{?#{==:#{pane_mode},copy-mode},blue#,blink,white},bg=#{?#{==:#{pane_mode},copy-mode},white#,bold,blue#,bold}"
#   Works
	set -gF message-style       'fg=#{?#{==:#{pane_mode},copy-mode},black,white},bg=#{?#{==:#{pane_mode},copy-mode},white,black}'
#   set -gF message-style "fg=#{?pane_in_mode,green,blue},bg=#{?pane_in_mode,white,white}"
#   set -gF message-style '#{l:#{?pane_in_mode,#[fg=green#,bg=white],#[fg=blue#,bg=white]}}'
#   Works
#   set -g  message-style 'fg=#{?pane_in_mode,white,black},bg=#{?pane_in_mode,black,white}'
#   set -g  message-style bg=black,fg=white

	set -gF message-style       'fg=#{?pane_in_mode,white,black},bg=#{?pane_in_mode,black,white}'
	set -gF window-active-style 'bg=#{?pane_in_mode,#{normal_background},#{?client_prefix,#{prefix_background},terminal}}'
#   }   #   no spaces permitted before red and white

	#   https://superuser.com/questions/1050485/can-tmux-highlight-change-color-on-control-key-send-prefix-event
	#   set -gF window-active-style '#{?client_prefix,#[fg=default#,bg=$prefix_background#,reverse],#[fg=default#,bg=terminal]}'
	#   set -gF window-active-style 'fg=#{?client_prefix,default,default},bg=#{?client_prefix,$prefix_background#,reverse,terminal}'

	#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"

	#   set-hook -g  pane-mode-changed[2] 'set -gF window-active-style "fg=#{?client_prefix,default,default},bg=#{?client_prefix,colour003,terminal}"'

	#   set-hook -g  pane-mode-changed[2] {
	#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"
	#   #   #   select-pane -t "{marked}" -P bg=terminal
	#   #   #   if-shell -F '#{pane_id}' {
	#   #       display -N "active_pane = #{active_pane}"
	#   #   #   select-pane -t "#{active_pane}" -P bg=terminal
	#   #       select-pane -t "#{active_pane}"
	#   #   #   select-pane -t '#{pane_id}'
	#   #       select-pane -P bg=terminal
	#   #   #   } {
	#   #   #   select-pane -P bg=terminal
	#   #   #   }
	#   }

#   set-hook -g pane-mode-changed[3] 'select-pane -P bg=terminal'

#   set-hook -gu after-display-panes
#   set-hook -g  after-display-panes[0] '
#   #   select-pane -t "{marked}" -P bg=terminal
#   if-shell -F "#{$active_pane}" {
#   #   select-pane -t "$active_pane" -P bg=terminal
#       select-pane -t "$active_pane"
#       select-pane -P bg=terminal
#   } {
#       select-pane -P bg=terminal
#   }
#   switch-client -T root
#   '

#   set-hook -gu after-display-message
#   set-hook -g  after-display-message[0] {
#   #   switch-client -T root
#   #   if-shell -F "#{$active_pane}" {
#   #       select-pane -P bg=terminal -t $active_pane
#   #       select-pane -t $active_pane
#   #       select-pane -t "{marked}" -P bg=terminal
#   #       select-pane -t "$active_pane" -P bg=terminal
#   #       select-pane -t '#{pane_id}' -P bg=terminal
#           select-pane -P bg=terminal
#   #       set -p window-active-style bg=terminal
#   #       set -gF window-active-style bg=terminal
#   #   } {
#   3       select-pane -P bg=terminal
#   3   }
#   }

	set-hook -gu after-select-pane
#   set-hook -g  after-select-pane[0] "
#   #   select-pane -P bg=terminal
#   $mode_toggle
#   $color_toggle
#   Nvim windows won't get the help
#   if-shell -F '#{client_prefix}' {} {
#       $color_prefix
#       switch-client -T prefix
#   }
#   "

	set-hook -gu after-send-keys
	#   Recursive calling
#   set-hook -g  after-send-keys[0] "
#   if-shell -F '#{mode_monitor}' {
#   #   display 'after-send-keys[0]' #   copy-mode won't trigger this hook
#   #   if-shell -F "#{$active_pane}" {
#   #   #   select-pane -t "{marked}" -P bg=terminal
#   #   #   select-pane -t "$active_pane" -P bg=terminal
#   #       select-pane -t "$active_pane"
#   #       select-pane -P bg=terminal
#   #   } {
#   #       select-pane -P bg=terminal
#   #   }
#   $color_toggle #   Will lock copy-mode !
#   }
#   "

	set-hook -gu after-refresh-client
	set-hook -g  after-refresh-client[0] "
	#   if-shell -F "#{$active_pane}" {
	#   #   select-pane -t "{marked}" -P bg=terminal
	#   #   select-pane -t "$active_pane" -P bg=terminal
	#       select-pane -t "$active_pane"
	#       select-pane -P bg=terminal
	#   } {
	#       select-pane -P bg=terminal
	#   }
	#   Make the cursor move with a dragging feel
	#   if-shell -F '#{@is-vim}' {
	#       $vim_rescue
	#   } {
	#       run -b '[ -d \"/tmp/$(id -u)/tmux\" ] || \mkdir -p \"/tmp/$(id -u)/tmux\"; : > /tmp/$(id -u)/tmux/binding.log'
	#   }
	#   if-shell -F '#{pane_in_mode}' {
	#       select-pane -P 'bg=#{normal_background}'
	#   } {
	#       if-shell -F '#{client_prefix}' {
	#           select-pane -P 'bg=#{prefix_background}'
	#       } {
	#           select-pane -P bg=terminal
	#       }
	#   }
	$mode_toggle #   run -C mode_toggle
#   $color_toggle #   Will lock copy-mode !
	"

#   set-hook -gu alert-silence
#   set-hook -g  alert-silence[0] '
#   select-pane -P bg=terminal
#   '

#   set-hook -g  after-queue[1] "
#   #   select-pane -P bg=terminal
#   #   set -gF window-active-style bg=terminal
#   $mode_toggle
#   "

#   Server side
#   set-hook -gu after-show-messages
#   set-hook -g  after-show-messages[0] '
#   if-shell -F "#{$active_pane}" {
#   #   select-pane -t "{marked}" -P bg=terminal
#   #   select-pane -t "$active_pane" -P bg=terminal
#       select-pane -t "$active_pane"
#       select-pane -P bg=terminal
#   } {
#       select-pane -P bg=terminal
#   }
#   '

#   set-hook -gu window-pane-changed
#   set-hook -g  window-pane-changed[0] {
#   set -gF window-active-style "bg=#{?client_prefix,$prefix_background,terminal}"
#   #   if-shell -F '#{pane_id}' {
#   #       select-pane -t "{marked}" -P bg=terminal
#           display -N "active_pane = #{active_pane}"
#   #       select-pane -t "#{active_pane}" -P bg=terminal
#           select-pane -t "#{active_pane}"
#   #       select-pane -t '#{pane_id}'
#           select-pane -P bg=terminal
#       #   } {
#       #   select-pane -P bg=terminal
#       #   }
#   }

#   set-hook -gu continue
#   set-hook -g  continue[0] '
#   select-pane -P bg=terminal
#   '

#   set-hook -gu after-copy-mode
#   set-hook -g  after-copy-mode[0] "
#   switch-client -T root
#   run '\tmux color_terminal'
#   "
#
#
#
#
#
#
#
#


#   When suing backtick/backquote as a tmux prefix/assist key,
#   `Esc, 'Esc will inftroduce send-keys ESCAPE something to editor and insert to the current buffer
#   mode_toggle avoids the undefined behaviors
#   Must be done
	run -C mode_toggle
#   run -C "$mode_toggle" #   "Not in a mode" error

#   Tmux bug (issue #4234), might be a recursive call
#   if -F "#{&&:#{==:#{escape_on_root},},#{==:#{nesting_support},}}" \
#   if-shell -F "#{==:#{escape_on_root},}" \
#   if-shell -F "#{escape_on_root}" {} {
	if-shell '[ "$(\tmux showenv -gh reloaded)" -ne 1 ]' {
	source "$XDG_CONFIG_HOME/tmux/prefix.conf"
	setenv -gh reloaded 1
	}
#   }

#   bind_escape_on_root #   unknown command
#   run -C "bind_escape_on_prefix"
#   run -C "bind_escape_on_root" #   bind -T root "$escape_key" "$prefix_enter"

#   bind -T prefix "$escape_key" "$escape_on_prefix"
#     bind -T root "$escape_key" "$escape_on_root"

#   The following codes are just some tests
#   %if   "#{==:#{prefix_key},Escape}" #   #AA0000
#   #   Works
#       bind -T root "$escape_key" "$prefix_enter" #   $escape_on_root == $prefix_enter
#       #   Partially working ?
#       #   bind -T root "$escape_key" run -C 'display -p "#{prefix_enter}"'
#   #   Works
#       #   bind -T root "$escape_key" run -C '#{prefix_enter}'
#       #   Does not work
#       #   bind -T root "$escape_key" "#{prefix_enter}"
#   #   Works out side the tmux configuration files -- no command-aliases needed
#       #   \tmux bind -T root "$(\tmux display -p '#{escape_key}')" "$(\tmux display -p '#{prefix_enter}')"
#       #   But run it here does not work: '#{pane_in_mode}' evaluated to ''
#       #   run '\tmux bind -T root "$(\tmux display -p "#{escape_key}")" "$(\tmux display -p "#{prefix_enter}")"'
#   #   Works
#       bind -T prefix "$escape_key" "$prefix_quit" #   $escape_on_prefix == $prefix_quit
#       #   Partially working ?
#       #   bind -T prefix "$escape_key" run -C 'display -p "#{prefix_quit}"'


#   %elif "#{==:#{normal_key},Escape}" #   #00AAAA
#   #   Works
#   #   bind -T root "$escape_key" "$normal_enter"
#       bind -T root "$escape_key" "$escape_on_root"
#       #   Partially working ?
#       #   bind -T root "$escape_key" run -C 'display -p "#{normal_enter}"'
#       #   bind -T root "$escape_key" run -C '#{normal_enter}'
#       #   bind -T root "$escape_key" run -C '#{escape_on_prefix}'
#   #   Works
#   #   bind -T prefix "$escape_key" "$normal_enter"
#       bind -T prefix "$escape_key" "$escape_on_prefix"
#       #   Partially working ?
#       #   bind -T prefix "$escape_key" run -C 'display -p "#{normal_enter}"'

#   %endif #   "#{||:#{==:#{prefix_key},Escape},#{==:#{normal_key},Escape}}"







