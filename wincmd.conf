%if "#{&&:#{escape_key},#{assist_key}}"

%else
	%if '[ -s "$DOT_CONFIG/terminal/tmux/header.conf" ]'
    	source "$DOT_CONFIG/terminal/tmux/header.conf"
	%endif
%endif


#   https://superuser.com/questions/1601701/tmux-how-to-move-current-pane-to-far-left-right-up-down-like-in-vim
#   move pane to the far right/left/bottom/top
#   b -- back, f[h/v] -- full height/width
#   bind      C-H  splitw -fhb \; swapp -t ! \; killp -t !
#   bind      C-L  splitw -fh  \; swapp -t ! \; killp -t !
#   bind      C-J  splitw -fv  \; swapp -t ! \; killp -t !
#   bind      C-K  splitw -fvb \; swapp -t ! \; killp -t !

#   Do it in prefix binding generally
    %hidden copy_cancel="
        if-shell -F '#{pane_in_mode}' ' send-keys -X cancel '
    "
    bind -T prefix     n next-window \; display-panes -N
    bind -T prefix     e new-window

%if "#{prefix_closed_loop}"
    %hidden loop_operation="
    if-shell -F '#{@is-float}' {} {
        $prefix_root
    }"
%else
    %hidden loop_operation="$color_terminal"
%endif

%if "#{delegate_wincmd}"

    #   Let vim default shortcuts take precedence
    bind -T prefix     r "if-shell -F '#{@is-vim}' ' send-keys C-W C-R ' ' splitw -fhb \; swapp -t ! \; killp -t ! ' \; $loop_operation"
    bind -T prefix     x "if-shell -F '#{@is-vim}' ' send-keys C-W C-X ' ' splitw -fhb \; swapp -t ! \; killp -t ! ' \; $loop_operation"
    #   bind -T prefix     v if-shell -F '#{@is-vim}' ' send-keys C-W v ' \; set -g window-active-style bg=terminal
    bind -T prefix     v "if-shell -F '#{@is-vim}' ' send-keys C-W v ' $loop_operation"
    #   bind -T prefix     n if-shell -F '#{@is-vim}' ' send-keys C-W n ; set -g window-active-style bg=terminal '
    #   bind -T prefix     n next-window \; select-pane -t '#{pane_id}' \; set -p -t '#{pane_id}' window-active-style bg=terminal
    #   bind -T prefix     n next-window \; select-pane -t '#{pane_id}' -P bg=terminal \; set -p -t '#{pane_id}' window-active-style bg=terminal
    #   bind -T prefix     n next-window
    #   bind -T prefix     n next-window \; select-pane -t '#{active_pane}' \; set -p -t '#{active_pane}' window-active-style bg=terminal
    bind -T prefix     s if-shell -F '#{@is-vim}' ' send-keys C-W s '
    #   bind -T prefix     c if-shell -F '#{@is-vim}' ' send-keys C-W c ' ' new-window '
    bind -T prefix     c "
    if-shell -F '#{@is-vim}' {
        $copy_cancel
        send-keys C-W c
    } {
        confirm-before -p 'kill-pane #P? (y/n)' kill-pane
    }
    $loop_operation
#   $color_terminal #   Make bindings easy to read
#   The reason the color_terminal can be directly use here is that command aliases have been completely initialized
#   color_terminal  #   Static expansion like $color_terminal_impl
#   $color_terminal #   Also work ? No, command alias ignored
    "
    unbind h
    bind -T prefix     h "if-shell -F '#{@is-vim}' ' send-keys C-W h ' ' select-pane -L ' \; $loop_operation"
    unbind Left
    bind -T prefix  Left "if-shell -F '#{@is-vim}' ' send-keys C-W h ' ' select-pane -L ' \; $loop_operation"
    unbind j
    bind -T prefix     j "if-shell -F '#{@is-vim}' ' send-keys C-W j ' ' select-pane -D ' \; $loop_operation"
    unbind Down
    bind -T prefix  Down "if-shell -F '#{@is-vim}' ' send-keys C-W j ' ' select-pane -D ' \; $loop_operation"
    unbind k
    bind -T prefix     k "if-shell -F '#{@is-vim}' ' send-keys C-W k ' ' select-pane -U ' \; $loop_operation"
    unbind Up
    bind -T prefix    Up "if-shell -F '#{@is-vim}' ' send-keys C-W k ' ' select-pane -U ' \; $loop_operation"
    unbind l
#   bind -T prefix     l if-shell -F '#{pane_in_mode}' ' select-pane -R ' { if-shell -F '#{@is-vim}' ' send-keys C-W l ' ' select-pane -R ' }
#   bind -T prefix     l if-shell -F '#{@is-vim}' ' send-keys C-W l ' ' select-pane -R ' #   won't work in copy-prefix-overlay/override/superposition-mode
    bind -T prefix     l "if-shell -F '#{@is-vim}' ' send-keys C-W l ' ' select-pane -R ' \; $loop_operation"
    unbind Right
    bind -T prefix Right "if-shell -F '#{@is-vim}' ' send-keys C-W l ' ' select-pane -R ' \; $loop_operation"

#   bind -T prefix     H if-shell -F '#{pane_in_mode}' ' splitw -fhb \; swapp -t ! \; killp -t ! ' { if-shell -F '#{@is-vim}' ' send-keys C-W H ' end-keys splitw -fhb \; swapp -t ! \; killp -t ! ' }
    bind -T prefix     H "if-shell -F '#{@is-vim}' ' send-keys C-W H ; send-keys C-W +50 ' ' splitw -fhb \; swapp -t ! \; killp -t ! ' \; $loop_operation"
    bind -T prefix     L "if-shell -F '#{@is-vim}' ' send-keys C-W L ; send-keys C-W -50 ' ' splitw -fh  \; swapp -t ! \; killp -t ! ' \; $loop_operation"
    bind -T prefix     J "if-shell -F '#{@is-vim}' ' send-keys C-W J ' ' splitw -fv  \; swapp -t ! \; killp -t ! ' \; $loop_operation"
    bind -T prefix     K "if-shell -F '#{@is-vim}' ' send-keys C-W K ' ' splitw -fvb \; swapp -t ! \; killp -t ! ' \; $loop_operation"
    #   run -C "bind -T prefix h if-shell -F \"#{\@is-vim}\" \" send-keys C-W h ; set -g window-active-style bg=terminal \""

    #   unbind Enter
%else
    bind -T prefix     r "if-shell -F '#{@is-vim}' ' ' ' splitw -fhb \; swapp -t ! \; killp -t ! ' \; $loop_operation"
    bind -T prefix     x "if-shell -F '#{@is-vim}' ' ' ' splitw -fhb \; swapp -t ! \; killp -t ! ' \; $loop_operation"
    bind -T prefix     v "if-shell -F '#{@is-vim}' ' send-keys v ' $loop_operation"

    #   bind      h select-pane -L
    #   bind      l select-pane -R
    #   bind      j select-pane -D
    #   bind      k select-pane -U

    #   bind   -r h select-pane -L
    #   bind   -r l select-pane -R
    #   bind   -r j select-pane -D
    #   bind   -r k select-pane -U

    #   bind   -r k select-pane -U\; refresh-client -S
    #   bind   -r j select-pane -D\; refresh-client -S
    #   bind   -r l select-pane -R\; refresh-client -S
    #   bind   -r h select-pane -L\; refresh-client -S

    unbind h
    #   -r does not work on current tmux 3.4
#   bind    -T prefix  h select-pane -L
    bind -T prefix     h "if-shell -F '#{@is-vim}' ' send-keys h ' ' select-pane -L ' \; $loop_operation"
    unbind Left
    bind -T prefix  Left "if-shell -F '#{@is-vim}' ' send-keys Left ' ' select-pane -L ' \; $loop_operation"
    unbind l
#   bind    -T prefix  l select-pane -R
    bind -T prefix     l "if-shell -F '#{@is-vim}' ' send-keys l ' ' select-pane -R ' \; $loop_operation"
    unbind Right
    bind -T prefix Right "if-shell -F '#{@is-vim}' ' send-keys Right ' ' select-pane -R ' \; $loop_operation"
    unbind j
#   bind    -T prefix  j select-pane -D
    bind -T prefix     j "if-shell -F '#{@is-vim}' ' send-keys j ' ' select-pane -D ' \; $loop_operation"
    unbind Down
    bind -T prefix  Down "if-shell -F '#{@is-vim}' ' send-keys Down ' ' select-pane -D ' \; $loop_operation"
    unbind k
#   bind    -T prefix  k select-pane -U
    bind -T prefix     k "if-shell -F '#{@is-vim}' ' send-keys k ' ' select-pane -U ' \; $loop_operation"
    unbind Up
    bind -T prefix    Up "if-shell -F '#{@is-vim}' ' send-keys Up ' ' select-pane -U ' \; $loop_operation"

#   unbind Left
#   bind -T prefix  Left select-pane -L
#   unbind Right
#   bind -T prefix Right select-pane -R
#   unbind Down
#   bind -T prefix  Down select-pane -D
#   unbind Up
#   bind -T prefix    Up select-pane -U

#   bind               H  splitw -fhb \; swapp -t ! \; killp -t !
    bind -T prefix     H "if-shell -F '#{@is-vim}' ' send-keys H ' ' splitw -fhb \; swapp -t ! \; killp -t ! ' \; $loop_operation"
#   bind               L  splitw -fh  \; swapp -t ! \; killp -t !
    bind -T prefix     L "if-shell -F '#{@is-vim}' ' send-keys L ' ' splitw -fh  \; swapp -t ! \; killp -t ! ' \; $loop_operation"
#   bind               J  splitw -fv  \; swapp -t ! \; killp -t !
    bind -T prefix     J "if-shell -F '#{@is-vim}' ' send-keys J ' ' splitw -fv  \; swapp -t ! \; killp -t ! ' \; $loop_operation"
#   bind               K  splitw -fvb \; swapp -t ! \; killp -t !
    bind -T prefix     K "if-shell -F '#{@is-vim}' ' send-keys K ' ' splitw -fvb \; swapp -t ! \; killp -t ! ' \; $loop_operation"

    bind -T prefix     c "
    if-shell -F '#{@is-vim}' {
        $copy_cancel
        send-keys c
    } {
        confirm-before -p 'kill-pane #P? (y/n)' kill-pane
    }
    $loop_operation
#   $color_terminal #   Make bindings easy to read
#   The reason the color_terminal can be directly use here is command aliases have been completely initialized
#   color_terminal  #   Static expansion like $color_terminal_impl
#   $color_terminal #   Also work ? No, command alias ignored
    "

%endif
